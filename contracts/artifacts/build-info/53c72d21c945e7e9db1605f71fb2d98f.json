{"id":"53c72d21c945e7e9db1605f71fb2d98f","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\n\n        if (batchSize > 1) {\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\n            revert(\"ERC721Enumerable: consecutive transfers not supported\");\n        }\n\n        uint256 tokenId = firstTokenId;\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/gitid/gitid.sol":{"content":"pragma solidity >=0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\n\ncontract GitID is Ownable, ERC721, ERC721Enumerable  {\n\n    // basename '.gitid'\n    string public baseName;\n    string public baseURI;\n\n    // A map of tokenId to name\n    mapping(uint256=>string) public names;\n\n    // A map of addresses that are authorised to register and renew names.\n    mapping(address=>bool) public minters;\n\n\n    event MinterAdded(address indexed minter);\n    event MinterRemoved(address indexed minter);\n    event NameRegistered(uint256 indexed id, address indexed owner);\n\n\n    constructor(string memory _name, string memory _symbol, string memory _baseName) ERC721(_name, _symbol) {\n        baseName = _baseName;\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC721Enumerable) returns (bool) {\n        bool result = super.supportsInterface(interfaceId);\n        if (result) {\n            return true;\n        }\n        if (interfaceId == type(IERC721Enumerable).interfaceId) {\n            return true;\n        }\n        return false;\n    }\n\n    modifier onlyMinter {\n        require(minters[msg.sender]);\n        _;\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId, uint256 batchSize) internal override(ERC721, ERC721Enumerable) {\n        require(balanceOf(to) == 0);\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\n    }\n\n    function addMinter(address minter) external onlyOwner {\n        minters[minter] = true;\n        emit MinterAdded(minter);\n    }\n\n    // Revoke minter permission for an address.\n    function removeMinter(address minter) external onlyOwner {\n        minters[minter] = false;\n        emit MinterRemoved(minter);\n    }\n\n\n    /**\n     * @dev Register a name.\n     * @param id The token ID (keccak256 of the label).\n     * @param owner The address that should own the registration.\n     */\n    function register(uint256 id, string memory name, address owner) external onlyMinter {\n        return _register(id, name, owner);\n    }\n\n\n    function _register(uint256 id, string memory name, address owner) internal {\n        require(!_exists(id), 'Already registered');\n\n        _mint(owner, id);\n        names[id] = name;\n\n        emit NameRegistered(id, owner);\n    }\n\n    function getTokenId(string memory username) public pure returns (uint256) {\n        bytes32 label = keccak256(bytes(username));\n        uint256 tokenId = uint256(label);\n        return tokenId;\n    }\n\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\n        _requireMinted(tokenId);\n        string memory name = getName(tokenId);\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, name)) : \"\";\n    }\n\n    function setBaseURI(string calldata uri) public onlyOwner {\n        baseURI = uri;\n    }\n\n    function getName(uint256 tokenId) public view returns(string memory) {\n        string memory name = names[tokenId];\n        return name;\n    }\n}\n"},"contracts/gitid/IGitIDMinter.sol":{"content":"pragma solidity >=0.8.4;\n\ninterface IGitIDMinter {\n    function register(\n        string calldata username,\n        bytes calldata signature,\n        address\n    ) external payable;\n}\n"},"contracts/gitid/Minter.sol":{"content":"\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport { IGitIDMinter } from \"./IGitIDMinter.sol\";\nimport {GitID} from \"./gitid.sol\";\n\ncontract Minter is Ownable, IGitIDMinter {\n    using ECDSA for bytes32;\n    GitID gitID;\n    address public signer;\n\n    event SignerUpdated(address indexed newSigner);\n\n    event NameRegistered(\n        string name,\n        address indexed owner,\n        uint256 cost\n    );\n\n    constructor(GitID _gitID, address _signer) public {\n        gitID = _gitID;\n        signer = _signer;\n    }\n\n    function register(\n        string calldata username,\n        bytes calldata signature,\n        address owner\n    ) public payable override{\n        uint256 price = msg.value;\n\n        bytes32 messageHash = getMessageHash(username, price);\n        address recoveredSigner = messageHash.toEthSignedMessageHash().recover(signature);\n\n        require(recoveredSigner == signer, \"Invalid signature\");\n\n        uint256 tokenId = gitID.getTokenId(username);\n\n        gitID.register(tokenId, username, owner);\n\n        emit NameRegistered(username, owner, price);\n    }\n\n    function getMessageHash(string memory username, uint256 price) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(username, price));\n    }\n\n    function withdraw() public onlyOwner {\n        payable(msg.sender).transfer(address(this).balance);\n    }\n\n    function updateSigner(address newSigner) external onlyOwner {\n        signer = newSigner;\n        emit SignerUpdated(newSigner);\n    }\n}\n"},"contracts/gitid/UniversalResolver.sol":{"content":"import {GitID} from \"./gitid.sol\";\n\ncontract UniversalResolver {\n\n    GitID gitID;\n\n    constructor(GitID _gitID) public {\n        gitID = _gitID;\n    }\n\n    function resolve(\n        string calldata username\n    ) external view returns (address) {\n        return _resolveSingle(username);\n    }\n\n    function _resolveSingle(\n        string calldata username\n    ) public view returns (address) {\n        uint256 tokenId = gitID.getTokenId(username);\n        return gitID.ownerOf(tokenId);\n    }\n\n    function getGitHubUserName(\n       address userAddress\n    ) external view returns (string memory) {\n        uint256 balance = gitID.balanceOf(userAddress);\n        require(balance > 0, 'USER NO GITID');\n        uint256 tokenId = gitID.tokenOfOwnerByIndex(userAddress, 0);\n        return gitID.getName(tokenId);\n    }\n\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":10000},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/gitid/IGitIDMinter.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/gitid/IGitIDMinter.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/gitid/Minter.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/gitid/Minter.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/gitid/UniversalResolver.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/gitid/UniversalResolver.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/gitid/gitid.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/gitid/gitid.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"3420","formattedMessage":"Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.20;\"\n--> contracts/gitid/Minter.sol\n\n","message":"Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.20;\"","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/gitid/Minter.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"3420","formattedMessage":"Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.20;\"\n--> contracts/gitid/UniversalResolver.sol\n\n","message":"Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.20;\"","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/gitid/UniversalResolver.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"2462","formattedMessage":"Warning: Visibility for constructor is ignored. If you want the contract to be non-deployable, making it \"abstract\" is sufficient.\n  --> contracts/gitid/Minter.sol:20:5:\n   |\n20 |     constructor(GitID _gitID, address _signer) public {\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Visibility for constructor is ignored. If you want the contract to be non-deployable, making it \"abstract\" is sufficient.","severity":"warning","sourceLocation":{"end":592,"file":"contracts/gitid/Minter.sol","start":485},"type":"Warning"},{"component":"general","errorCode":"2462","formattedMessage":"Warning: Visibility for constructor is ignored. If you want the contract to be non-deployable, making it \"abstract\" is sufficient.\n --> contracts/gitid/UniversalResolver.sol:7:5:\n  |\n7 |     constructor(GitID _gitID) public {\n  |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Visibility for constructor is ignored. If you want the contract to be non-deployable, making it \"abstract\" is sufficient.","severity":"warning","sourceLocation":{"end":152,"file":"contracts/gitid/UniversalResolver.sol","start":88},"type":"Warning"}],"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[1937],"Ownable":[112]},"id":113,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":113,"sourceUnit":1938,"src":"127:30:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4,"name":"Context","nameLocations":["683:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":1937,"src":"683:7:0"},"id":5,"nodeType":"InheritanceSpecifier","src":"683:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"159:494:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":112,"linearizedBaseContracts":[112,1937],"name":"Ownable","nameLocation":"672:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":7,"mutability":"mutable","name":"_owner","nameLocation":"713:6:0","nodeType":"VariableDeclaration","scope":112,"src":"697:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6,"name":"address","nodeType":"ElementaryTypeName","src":"697:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":13,"name":"OwnershipTransferred","nameLocation":"732:20:0","nodeType":"EventDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"769:13:0","nodeType":"VariableDeclaration","scope":13,"src":"753:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8,"name":"address","nodeType":"ElementaryTypeName","src":"753:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":11,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"800:8:0","nodeType":"VariableDeclaration","scope":13,"src":"784:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"784:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"752:57:0"},"src":"726:84:0"},{"body":{"id":22,"nodeType":"Block","src":"926:49:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":18,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1927,"src":"955:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":19,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"955:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":17,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"936:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":20,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"936:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":21,"nodeType":"ExpressionStatement","src":"936:32:0"}]},"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"816:91:0","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":23,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"923:2:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"926:0:0"},"scope":112,"src":"912:63:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":30,"nodeType":"Block","src":"1084:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":26,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"1094:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":27,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1094:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":28,"nodeType":"ExpressionStatement","src":"1094:13:0"},{"id":29,"nodeType":"PlaceholderStatement","src":"1117:1:0"}]},"documentation":{"id":24,"nodeType":"StructuredDocumentation","src":"981:77:0","text":" @dev Throws if called by any account other than the owner."},"id":31,"name":"onlyOwner","nameLocation":"1072:9:0","nodeType":"ModifierDefinition","parameters":{"id":25,"nodeType":"ParameterList","parameters":[],"src":"1081:2:0"},"src":"1063:62:0","virtual":false,"visibility":"internal"},{"body":{"id":39,"nodeType":"Block","src":"1256:30:0","statements":[{"expression":{"id":37,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"1273:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":36,"id":38,"nodeType":"Return","src":"1266:13:0"}]},"documentation":{"id":32,"nodeType":"StructuredDocumentation","src":"1131:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":40,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1210:5:0","nodeType":"FunctionDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"1215:2:0"},"returnParameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":35,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":40,"src":"1247:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":34,"name":"address","nodeType":"ElementaryTypeName","src":"1247:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1246:9:0"},"scope":112,"src":"1201:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":53,"nodeType":"Block","src":"1404:85:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":45,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"1422:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1422:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":47,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1927,"src":"1433:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1433:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1422:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":50,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1447:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":44,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1414:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1414:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52,"nodeType":"ExpressionStatement","src":"1414:68:0"}]},"documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"1292:62:0","text":" @dev Throws if the sender is not the owner."},"id":54,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1368:11:0","nodeType":"FunctionDefinition","parameters":{"id":42,"nodeType":"ParameterList","parameters":[],"src":"1379:2:0"},"returnParameters":{"id":43,"nodeType":"ParameterList","parameters":[],"src":"1404:0:0"},"scope":112,"src":"1359:130:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":67,"nodeType":"Block","src":"1878:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":63,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1915:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":62,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1907:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1907:7:0","typeDescriptions":{}}},"id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1907:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":60,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"1888:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1888:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":66,"nodeType":"ExpressionStatement","src":"1888:30:0"}]},"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1495:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":68,"implemented":true,"kind":"function","modifiers":[{"id":58,"kind":"modifierInvocation","modifierName":{"id":57,"name":"onlyOwner","nameLocations":["1868:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1868:9:0"},"nodeType":"ModifierInvocation","src":"1868:9:0"}],"name":"renounceOwnership","nameLocation":"1833:17:0","nodeType":"FunctionDefinition","parameters":{"id":56,"nodeType":"ParameterList","parameters":[],"src":"1850:2:0"},"returnParameters":{"id":59,"nodeType":"ParameterList","parameters":[],"src":"1878:0:0"},"scope":112,"src":"1824:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":90,"nodeType":"Block","src":"2144:128:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":82,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":77,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2162:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":80,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2182:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":79,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2174:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":78,"name":"address","nodeType":"ElementaryTypeName","src":"2174:7:0","typeDescriptions":{}}},"id":81,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2174:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2162:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":83,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2186:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":76,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2154:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":84,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2154:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":85,"nodeType":"ExpressionStatement","src":"2154:73:0"},{"expression":{"arguments":[{"id":87,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2256:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":86,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"2237:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2237:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":89,"nodeType":"ExpressionStatement","src":"2237:28:0"}]},"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"1931:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":91,"implemented":true,"kind":"function","modifiers":[{"id":74,"kind":"modifierInvocation","modifierName":{"id":73,"name":"onlyOwner","nameLocations":["2134:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"2134:9:0"},"nodeType":"ModifierInvocation","src":"2134:9:0"}],"name":"transferOwnership","nameLocation":"2083:17:0","nodeType":"FunctionDefinition","parameters":{"id":72,"nodeType":"ParameterList","parameters":[{"constant":false,"id":71,"mutability":"mutable","name":"newOwner","nameLocation":"2109:8:0","nodeType":"VariableDeclaration","scope":91,"src":"2101:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":70,"name":"address","nodeType":"ElementaryTypeName","src":"2101:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2100:18:0"},"returnParameters":{"id":75,"nodeType":"ParameterList","parameters":[],"src":"2144:0:0"},"scope":112,"src":"2074:198:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":110,"nodeType":"Block","src":"2489:124:0","statements":[{"assignments":[98],"declarations":[{"constant":false,"id":98,"mutability":"mutable","name":"oldOwner","nameLocation":"2507:8:0","nodeType":"VariableDeclaration","scope":110,"src":"2499:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":97,"name":"address","nodeType":"ElementaryTypeName","src":"2499:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":100,"initialValue":{"id":99,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2518:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2499:25:0"},{"expression":{"id":103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":101,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2534:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":102,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2543:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2534:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":104,"nodeType":"ExpressionStatement","src":"2534:17:0"},{"eventCall":{"arguments":[{"id":106,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"2587:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":107,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2597:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":105,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"2566:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2566:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":109,"nodeType":"EmitStatement","src":"2561:45:0"}]},"documentation":{"id":92,"nodeType":"StructuredDocumentation","src":"2278:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":111,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2435:18:0","nodeType":"FunctionDefinition","parameters":{"id":95,"nodeType":"ParameterList","parameters":[{"constant":false,"id":94,"mutability":"mutable","name":"newOwner","nameLocation":"2462:8:0","nodeType":"VariableDeclaration","scope":111,"src":"2454:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":93,"name":"address","nodeType":"ElementaryTypeName","src":"2454:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2453:18:0"},"returnParameters":{"id":96,"nodeType":"ParameterList","parameters":[],"src":"2489:0:0"},"scope":112,"src":"2426:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":113,"src":"654:1961:0","usedErrors":[],"usedEvents":[13]}],"src":"102:2514:0"},"id":0},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","exportedSymbols":{"Address":[1915],"Context":[1937],"ERC165":[2556],"ERC721":[1039],"IERC165":[2568],"IERC721":[1155],"IERC721Metadata":[1585],"IERC721Receiver":[1173],"Math":[3434],"SignedMath":[3539],"Strings":[2166]},"id":1040,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":114,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:1"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"./IERC721.sol","id":115,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1040,"sourceUnit":1156,"src":"132:23:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"./IERC721Receiver.sol","id":116,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1040,"sourceUnit":1174,"src":"156:31:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","file":"./extensions/IERC721Metadata.sol","id":117,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1040,"sourceUnit":1586,"src":"188:42:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../utils/Address.sol","id":118,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1040,"sourceUnit":1916,"src":"231:33:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":119,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1040,"sourceUnit":1938,"src":"265:33:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../../utils/Strings.sol","id":120,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1040,"sourceUnit":2167,"src":"299:33:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":121,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1040,"sourceUnit":2557,"src":"333:46:1","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":123,"name":"Context","nameLocations":["647:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":1937,"src":"647:7:1"},"id":124,"nodeType":"InheritanceSpecifier","src":"647:7:1"},{"baseName":{"id":125,"name":"ERC165","nameLocations":["656:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":2556,"src":"656:6:1"},"id":126,"nodeType":"InheritanceSpecifier","src":"656:6:1"},{"baseName":{"id":127,"name":"IERC721","nameLocations":["664:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":1155,"src":"664:7:1"},"id":128,"nodeType":"InheritanceSpecifier","src":"664:7:1"},{"baseName":{"id":129,"name":"IERC721Metadata","nameLocations":["673:15:1"],"nodeType":"IdentifierPath","referencedDeclaration":1585,"src":"673:15:1"},"id":130,"nodeType":"InheritanceSpecifier","src":"673:15:1"}],"canonicalName":"ERC721","contractDependencies":[],"contractKind":"contract","documentation":{"id":122,"nodeType":"StructuredDocumentation","src":"381:246:1","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."},"fullyImplemented":true,"id":1039,"linearizedBaseContracts":[1039,1585,1155,2556,2568,1937],"name":"ERC721","nameLocation":"637:6:1","nodeType":"ContractDefinition","nodes":[{"global":false,"id":133,"libraryName":{"id":131,"name":"Address","nameLocations":["701:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":1915,"src":"701:7:1"},"nodeType":"UsingForDirective","src":"695:26:1","typeName":{"id":132,"name":"address","nodeType":"ElementaryTypeName","src":"713:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":136,"libraryName":{"id":134,"name":"Strings","nameLocations":["732:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":2166,"src":"732:7:1"},"nodeType":"UsingForDirective","src":"726:26:1","typeName":{"id":135,"name":"uint256","nodeType":"ElementaryTypeName","src":"744:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":138,"mutability":"mutable","name":"_name","nameLocation":"791:5:1","nodeType":"VariableDeclaration","scope":1039,"src":"776:20:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":137,"name":"string","nodeType":"ElementaryTypeName","src":"776:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":140,"mutability":"mutable","name":"_symbol","nameLocation":"838:7:1","nodeType":"VariableDeclaration","scope":1039,"src":"823:22:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":139,"name":"string","nodeType":"ElementaryTypeName","src":"823:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":144,"mutability":"mutable","name":"_owners","nameLocation":"934:7:1","nodeType":"VariableDeclaration","scope":1039,"src":"898:43:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":143,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":141,"name":"uint256","nodeType":"ElementaryTypeName","src":"906:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"898:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":142,"name":"address","nodeType":"ElementaryTypeName","src":"917:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":148,"mutability":"mutable","name":"_balances","nameLocation":"1028:9:1","nodeType":"VariableDeclaration","scope":1039,"src":"992:45:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":147,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":145,"name":"address","nodeType":"ElementaryTypeName","src":"1000:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"992:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":146,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":152,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1129:15:1","nodeType":"VariableDeclaration","scope":1039,"src":"1093:51:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":151,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":149,"name":"uint256","nodeType":"ElementaryTypeName","src":"1101:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1093:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":150,"name":"address","nodeType":"ElementaryTypeName","src":"1112:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":158,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1252:18:1","nodeType":"VariableDeclaration","scope":1039,"src":"1199:71:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":157,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":153,"name":"address","nodeType":"ElementaryTypeName","src":"1207:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1199:44:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":156,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":154,"name":"address","nodeType":"ElementaryTypeName","src":"1226:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1218:24:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":155,"name":"bool","nodeType":"ElementaryTypeName","src":"1237:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":174,"nodeType":"Block","src":"1446:57:1","statements":[{"expression":{"id":168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":166,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"1456:5:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":167,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"1464:5:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1456:13:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":169,"nodeType":"ExpressionStatement","src":"1456:13:1"},{"expression":{"id":172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":170,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":140,"src":"1479:7:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":171,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"1489:7:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1479:17:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":173,"nodeType":"ExpressionStatement","src":"1479:17:1"}]},"documentation":{"id":159,"nodeType":"StructuredDocumentation","src":"1277:108:1","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."},"id":175,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":161,"mutability":"mutable","name":"name_","nameLocation":"1416:5:1","nodeType":"VariableDeclaration","scope":175,"src":"1402:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":160,"name":"string","nodeType":"ElementaryTypeName","src":"1402:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":163,"mutability":"mutable","name":"symbol_","nameLocation":"1437:7:1","nodeType":"VariableDeclaration","scope":175,"src":"1423:21:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":162,"name":"string","nodeType":"ElementaryTypeName","src":"1423:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1401:44:1"},"returnParameters":{"id":165,"nodeType":"ParameterList","parameters":[],"src":"1446:0:1"},"scope":1039,"src":"1390:113:1","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[2555,2567],"body":{"id":205,"nodeType":"Block","src":"1678:192:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":186,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":178,"src":"1707:11:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":188,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1155,"src":"1727:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$1155_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$1155_$","typeString":"type(contract IERC721)"}],"id":187,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1722:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1722:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$1155","typeString":"type(contract IERC721)"}},"id":190,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1736:11:1","memberName":"interfaceId","nodeType":"MemberAccess","src":"1722:25:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1707:40:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":192,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":178,"src":"1763:11:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":194,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1585,"src":"1783:15:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1585_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1585_$","typeString":"type(contract IERC721Metadata)"}],"id":193,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1778:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1778:21:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$1585","typeString":"type(contract IERC721Metadata)"}},"id":196,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1800:11:1","memberName":"interfaceId","nodeType":"MemberAccess","src":"1778:33:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1763:48:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:104:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":201,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":178,"src":"1851:11:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":199,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1827:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721_$1039_$","typeString":"type(contract super ERC721)"}},"id":200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1833:17:1","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":2555,"src":"1827:23:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1827:36:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:156:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":185,"id":204,"nodeType":"Return","src":"1688:175:1"}]},"documentation":{"id":176,"nodeType":"StructuredDocumentation","src":"1509:56:1","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":206,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1579:17:1","nodeType":"FunctionDefinition","overrides":{"id":182,"nodeType":"OverrideSpecifier","overrides":[{"id":180,"name":"ERC165","nameLocations":["1646:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":2556,"src":"1646:6:1"},{"id":181,"name":"IERC165","nameLocations":["1654:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":2568,"src":"1654:7:1"}],"src":"1637:25:1"},"parameters":{"id":179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":178,"mutability":"mutable","name":"interfaceId","nameLocation":"1604:11:1","nodeType":"VariableDeclaration","scope":206,"src":"1597:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":177,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1597:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1596:20:1"},"returnParameters":{"id":185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":184,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":206,"src":"1672:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":183,"name":"bool","nodeType":"ElementaryTypeName","src":"1672:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1671:6:1"},"scope":1039,"src":"1570:300:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1080],"body":{"id":229,"nodeType":"Block","src":"2010:123:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":216,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"2028:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2045:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":218,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2037:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":217,"name":"address","nodeType":"ElementaryTypeName","src":"2037:7:1","typeDescriptions":{}}},"id":220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2037:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2028:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572","id":222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2049:43:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""},"value":"ERC721: address zero is not a valid owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""}],"id":215,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2020:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2020:73:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":224,"nodeType":"ExpressionStatement","src":"2020:73:1"},{"expression":{"baseExpression":{"id":225,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"2110:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":227,"indexExpression":{"id":226,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"2120:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2110:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":214,"id":228,"nodeType":"Return","src":"2103:23:1"}]},"documentation":{"id":207,"nodeType":"StructuredDocumentation","src":"1876:48:1","text":" @dev See {IERC721-balanceOf}."},"functionSelector":"70a08231","id":230,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1938:9:1","nodeType":"FunctionDefinition","overrides":{"id":211,"nodeType":"OverrideSpecifier","overrides":[],"src":"1983:8:1"},"parameters":{"id":210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":209,"mutability":"mutable","name":"owner","nameLocation":"1956:5:1","nodeType":"VariableDeclaration","scope":230,"src":"1948:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":208,"name":"address","nodeType":"ElementaryTypeName","src":"1948:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1947:15:1"},"returnParameters":{"id":214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":213,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":230,"src":"2001:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":212,"name":"uint256","nodeType":"ElementaryTypeName","src":"2001:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2000:9:1"},"scope":1039,"src":"1929:204:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1088],"body":{"id":257,"nodeType":"Block","src":"2271:138:1","statements":[{"assignments":[240],"declarations":[{"constant":false,"id":240,"mutability":"mutable","name":"owner","nameLocation":"2289:5:1","nodeType":"VariableDeclaration","scope":257,"src":"2281:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":239,"name":"address","nodeType":"ElementaryTypeName","src":"2281:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":244,"initialValue":{"arguments":[{"id":242,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"2306:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":241,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":540,"src":"2297:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2297:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2281:33:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":246,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":240,"src":"2332:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2349:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":248,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2341:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":247,"name":"address","nodeType":"ElementaryTypeName","src":"2341:7:1","typeDescriptions":{}}},"id":250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2341:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2332:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2353:26:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":245,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2324:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2324:56:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":254,"nodeType":"ExpressionStatement","src":"2324:56:1"},{"expression":{"id":255,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":240,"src":"2397:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":238,"id":256,"nodeType":"Return","src":"2390:12:1"}]},"documentation":{"id":231,"nodeType":"StructuredDocumentation","src":"2139:46:1","text":" @dev See {IERC721-ownerOf}."},"functionSelector":"6352211e","id":258,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"2199:7:1","nodeType":"FunctionDefinition","overrides":{"id":235,"nodeType":"OverrideSpecifier","overrides":[],"src":"2244:8:1"},"parameters":{"id":234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":233,"mutability":"mutable","name":"tokenId","nameLocation":"2215:7:1","nodeType":"VariableDeclaration","scope":258,"src":"2207:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":232,"name":"uint256","nodeType":"ElementaryTypeName","src":"2207:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2206:17:1"},"returnParameters":{"id":238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":237,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":258,"src":"2262:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":236,"name":"address","nodeType":"ElementaryTypeName","src":"2262:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2261:9:1"},"scope":1039,"src":"2190:219:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1570],"body":{"id":267,"nodeType":"Block","src":"2540:29:1","statements":[{"expression":{"id":265,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"2557:5:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":264,"id":266,"nodeType":"Return","src":"2550:12:1"}]},"documentation":{"id":259,"nodeType":"StructuredDocumentation","src":"2415:51:1","text":" @dev See {IERC721Metadata-name}."},"functionSelector":"06fdde03","id":268,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2480:4:1","nodeType":"FunctionDefinition","overrides":{"id":261,"nodeType":"OverrideSpecifier","overrides":[],"src":"2507:8:1"},"parameters":{"id":260,"nodeType":"ParameterList","parameters":[],"src":"2484:2:1"},"returnParameters":{"id":264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":263,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":268,"src":"2525:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":262,"name":"string","nodeType":"ElementaryTypeName","src":"2525:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2524:15:1"},"scope":1039,"src":"2471:98:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1576],"body":{"id":277,"nodeType":"Block","src":"2704:31:1","statements":[{"expression":{"id":275,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":140,"src":"2721:7:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":274,"id":276,"nodeType":"Return","src":"2714:14:1"}]},"documentation":{"id":269,"nodeType":"StructuredDocumentation","src":"2575:53:1","text":" @dev See {IERC721Metadata-symbol}."},"functionSelector":"95d89b41","id":278,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2642:6:1","nodeType":"FunctionDefinition","overrides":{"id":271,"nodeType":"OverrideSpecifier","overrides":[],"src":"2671:8:1"},"parameters":{"id":270,"nodeType":"ParameterList","parameters":[],"src":"2648:2:1"},"returnParameters":{"id":274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":273,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":278,"src":"2689:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":272,"name":"string","nodeType":"ElementaryTypeName","src":"2689:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2688:15:1"},"scope":1039,"src":"2633:102:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1584],"body":{"id":316,"nodeType":"Block","src":"2889:188:1","statements":[{"expression":{"arguments":[{"id":288,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"2914:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":287,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"2899:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2899:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":290,"nodeType":"ExpressionStatement","src":"2899:23:1"},{"assignments":[292],"declarations":[{"constant":false,"id":292,"mutability":"mutable","name":"baseURI","nameLocation":"2947:7:1","nodeType":"VariableDeclaration","scope":316,"src":"2933:21:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":291,"name":"string","nodeType":"ElementaryTypeName","src":"2933:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":295,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":293,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":326,"src":"2957:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2957:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2933:34:1"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":298,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":292,"src":"2990:7:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":297,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2984:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":296,"name":"bytes","nodeType":"ElementaryTypeName","src":"2984:5:1","typeDescriptions":{}}},"id":299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2984:14:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2999:6:1","memberName":"length","nodeType":"MemberAccess","src":"2984:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3008:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2984:25:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3068:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2984:86:1","trueExpression":{"arguments":[{"arguments":[{"id":307,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":292,"src":"3036:7:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":308,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"3045:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3053:8:1","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1996,"src":"3045:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3045:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":305,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3019:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":306,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3023:12:1","memberName":"encodePacked","nodeType":"MemberAccess","src":"3019:16:1","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3019:45:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":304,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3012:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":303,"name":"string","nodeType":"ElementaryTypeName","src":"3012:6:1","typeDescriptions":{}}},"id":312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3012:53:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":286,"id":315,"nodeType":"Return","src":"2977:93:1"}]},"documentation":{"id":279,"nodeType":"StructuredDocumentation","src":"2741:55:1","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":317,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"2810:8:1","nodeType":"FunctionDefinition","overrides":{"id":283,"nodeType":"OverrideSpecifier","overrides":[],"src":"2856:8:1"},"parameters":{"id":282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":281,"mutability":"mutable","name":"tokenId","nameLocation":"2827:7:1","nodeType":"VariableDeclaration","scope":317,"src":"2819:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":280,"name":"uint256","nodeType":"ElementaryTypeName","src":"2819:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2818:17:1"},"returnParameters":{"id":286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":285,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":317,"src":"2874:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":284,"name":"string","nodeType":"ElementaryTypeName","src":"2874:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2873:15:1"},"scope":1039,"src":"2801:276:1","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":325,"nodeType":"Block","src":"3385:26:1","statements":[{"expression":{"hexValue":"","id":323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3402:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":322,"id":324,"nodeType":"Return","src":"3395:9:1"}]},"documentation":{"id":318,"nodeType":"StructuredDocumentation","src":"3083:231:1","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."},"id":326,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"3328:8:1","nodeType":"FunctionDefinition","parameters":{"id":319,"nodeType":"ParameterList","parameters":[],"src":"3336:2:1"},"returnParameters":{"id":322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":321,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":326,"src":"3370:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":320,"name":"string","nodeType":"ElementaryTypeName","src":"3370:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3369:15:1"},"scope":1039,"src":"3319:92:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[1128],"body":{"id":368,"nodeType":"Block","src":"3538:336:1","statements":[{"assignments":[336],"declarations":[{"constant":false,"id":336,"mutability":"mutable","name":"owner","nameLocation":"3556:5:1","nodeType":"VariableDeclaration","scope":368,"src":"3548:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":335,"name":"address","nodeType":"ElementaryTypeName","src":"3548:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":341,"initialValue":{"arguments":[{"id":339,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"3579:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":337,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"3564:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1039_$","typeString":"type(contract ERC721)"}},"id":338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3571:7:1","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":258,"src":"3564:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3564:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3548:39:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":343,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"3605:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":344,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":336,"src":"3611:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3605:11:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572","id":346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3618:35:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""},"value":"ERC721: approval to current owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""}],"id":342,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3597:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3597:57:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":348,"nodeType":"ExpressionStatement","src":"3597:57:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":350,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1927,"src":"3686:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3686:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":352,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":336,"src":"3702:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3686:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":355,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":336,"src":"3728:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":356,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1927,"src":"3735:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3735:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":354,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":422,"src":"3711:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3711:37:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3686:62:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","id":360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3762:63:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""},"value":"ERC721: approve caller is not token owner or approved for all"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""}],"id":349,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3665:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3665:170:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":362,"nodeType":"ExpressionStatement","src":"3665:170:1"},{"expression":{"arguments":[{"id":364,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"3855:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":365,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"3859:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":363,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"3846:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":366,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3846:21:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":367,"nodeType":"ExpressionStatement","src":"3846:21:1"}]},"documentation":{"id":327,"nodeType":"StructuredDocumentation","src":"3417:46:1","text":" @dev See {IERC721-approve}."},"functionSelector":"095ea7b3","id":369,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3477:7:1","nodeType":"FunctionDefinition","overrides":{"id":333,"nodeType":"OverrideSpecifier","overrides":[],"src":"3529:8:1"},"parameters":{"id":332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":329,"mutability":"mutable","name":"to","nameLocation":"3493:2:1","nodeType":"VariableDeclaration","scope":369,"src":"3485:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":328,"name":"address","nodeType":"ElementaryTypeName","src":"3485:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":331,"mutability":"mutable","name":"tokenId","nameLocation":"3505:7:1","nodeType":"VariableDeclaration","scope":369,"src":"3497:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":330,"name":"uint256","nodeType":"ElementaryTypeName","src":"3497:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3484:29:1"},"returnParameters":{"id":334,"nodeType":"ParameterList","parameters":[],"src":"3538:0:1"},"scope":1039,"src":"3468:406:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1144],"body":{"id":386,"nodeType":"Block","src":"4020:82:1","statements":[{"expression":{"arguments":[{"id":379,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"4045:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":378,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"4030:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4030:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":381,"nodeType":"ExpressionStatement","src":"4030:23:1"},{"expression":{"baseExpression":{"id":382,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":152,"src":"4071:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":384,"indexExpression":{"id":383,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"4087:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4071:24:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":377,"id":385,"nodeType":"Return","src":"4064:31:1"}]},"documentation":{"id":370,"nodeType":"StructuredDocumentation","src":"3880:50:1","text":" @dev See {IERC721-getApproved}."},"functionSelector":"081812fc","id":387,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"3944:11:1","nodeType":"FunctionDefinition","overrides":{"id":374,"nodeType":"OverrideSpecifier","overrides":[],"src":"3993:8:1"},"parameters":{"id":373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":372,"mutability":"mutable","name":"tokenId","nameLocation":"3964:7:1","nodeType":"VariableDeclaration","scope":387,"src":"3956:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":371,"name":"uint256","nodeType":"ElementaryTypeName","src":"3956:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3955:17:1"},"returnParameters":{"id":377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":376,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":387,"src":"4011:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":375,"name":"address","nodeType":"ElementaryTypeName","src":"4011:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4010:9:1"},"scope":1039,"src":"3935:167:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1136],"body":{"id":403,"nodeType":"Block","src":"4253:69:1","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":397,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1927,"src":"4282:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4282:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":399,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"4296:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":400,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":392,"src":"4306:8:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":396,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":921,"src":"4263:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4263:52:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":402,"nodeType":"ExpressionStatement","src":"4263:52:1"}]},"documentation":{"id":388,"nodeType":"StructuredDocumentation","src":"4108:56:1","text":" @dev See {IERC721-setApprovalForAll}."},"functionSelector":"a22cb465","id":404,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4178:17:1","nodeType":"FunctionDefinition","overrides":{"id":394,"nodeType":"OverrideSpecifier","overrides":[],"src":"4244:8:1"},"parameters":{"id":393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":390,"mutability":"mutable","name":"operator","nameLocation":"4204:8:1","nodeType":"VariableDeclaration","scope":404,"src":"4196:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":389,"name":"address","nodeType":"ElementaryTypeName","src":"4196:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":392,"mutability":"mutable","name":"approved","nameLocation":"4219:8:1","nodeType":"VariableDeclaration","scope":404,"src":"4214:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":391,"name":"bool","nodeType":"ElementaryTypeName","src":"4214:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4195:33:1"},"returnParameters":{"id":395,"nodeType":"ParameterList","parameters":[],"src":"4253:0:1"},"scope":1039,"src":"4169:153:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1154],"body":{"id":421,"nodeType":"Block","src":"4491:59:1","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":415,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":158,"src":"4508:18:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":417,"indexExpression":{"id":416,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"4527:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:25:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":419,"indexExpression":{"id":418,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"4534:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:35:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":414,"id":420,"nodeType":"Return","src":"4501:42:1"}]},"documentation":{"id":405,"nodeType":"StructuredDocumentation","src":"4328:55:1","text":" @dev See {IERC721-isApprovedForAll}."},"functionSelector":"e985e9c5","id":422,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4397:16:1","nodeType":"FunctionDefinition","overrides":{"id":411,"nodeType":"OverrideSpecifier","overrides":[],"src":"4467:8:1"},"parameters":{"id":410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":407,"mutability":"mutable","name":"owner","nameLocation":"4422:5:1","nodeType":"VariableDeclaration","scope":422,"src":"4414:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":406,"name":"address","nodeType":"ElementaryTypeName","src":"4414:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":409,"mutability":"mutable","name":"operator","nameLocation":"4437:8:1","nodeType":"VariableDeclaration","scope":422,"src":"4429:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":408,"name":"address","nodeType":"ElementaryTypeName","src":"4429:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4413:33:1"},"returnParameters":{"id":414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":413,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":422,"src":"4485:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":412,"name":"bool","nodeType":"ElementaryTypeName","src":"4485:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4484:6:1"},"scope":1039,"src":"4388:162:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1120],"body":{"id":448,"nodeType":"Block","src":"4701:207:1","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":435,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1927,"src":"4790:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4790:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":437,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":429,"src":"4804:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":434,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"4771:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":438,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4771:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4814:47:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":433,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4763:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":440,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4763:99:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":441,"nodeType":"ExpressionStatement","src":"4763:99:1"},{"expression":{"arguments":[{"id":443,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":425,"src":"4883:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":444,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"4889:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":445,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":429,"src":"4893:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":442,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"4873:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":447,"nodeType":"ExpressionStatement","src":"4873:28:1"}]},"documentation":{"id":423,"nodeType":"StructuredDocumentation","src":"4556:51:1","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":449,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"4621:12:1","nodeType":"FunctionDefinition","overrides":{"id":431,"nodeType":"OverrideSpecifier","overrides":[],"src":"4692:8:1"},"parameters":{"id":430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":425,"mutability":"mutable","name":"from","nameLocation":"4642:4:1","nodeType":"VariableDeclaration","scope":449,"src":"4634:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":424,"name":"address","nodeType":"ElementaryTypeName","src":"4634:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":427,"mutability":"mutable","name":"to","nameLocation":"4656:2:1","nodeType":"VariableDeclaration","scope":449,"src":"4648:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":426,"name":"address","nodeType":"ElementaryTypeName","src":"4648:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":429,"mutability":"mutable","name":"tokenId","nameLocation":"4668:7:1","nodeType":"VariableDeclaration","scope":449,"src":"4660:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":428,"name":"uint256","nodeType":"ElementaryTypeName","src":"4660:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4633:43:1"},"returnParameters":{"id":432,"nodeType":"ParameterList","parameters":[],"src":"4701:0:1"},"scope":1039,"src":"4612:296:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1110],"body":{"id":467,"nodeType":"Block","src":"5067:56:1","statements":[{"expression":{"arguments":[{"id":461,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":452,"src":"5094:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":462,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"5100:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":463,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":456,"src":"5104:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5113:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":460,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[468,498],"referencedDeclaration":498,"src":"5077:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5077:39:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":466,"nodeType":"ExpressionStatement","src":"5077:39:1"}]},"documentation":{"id":450,"nodeType":"StructuredDocumentation","src":"4914:55:1","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"42842e0e","id":468,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4983:16:1","nodeType":"FunctionDefinition","overrides":{"id":458,"nodeType":"OverrideSpecifier","overrides":[],"src":"5058:8:1"},"parameters":{"id":457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":452,"mutability":"mutable","name":"from","nameLocation":"5008:4:1","nodeType":"VariableDeclaration","scope":468,"src":"5000:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":451,"name":"address","nodeType":"ElementaryTypeName","src":"5000:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":454,"mutability":"mutable","name":"to","nameLocation":"5022:2:1","nodeType":"VariableDeclaration","scope":468,"src":"5014:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":453,"name":"address","nodeType":"ElementaryTypeName","src":"5014:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":456,"mutability":"mutable","name":"tokenId","nameLocation":"5034:7:1","nodeType":"VariableDeclaration","scope":468,"src":"5026:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":455,"name":"uint256","nodeType":"ElementaryTypeName","src":"5026:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4999:43:1"},"returnParameters":{"id":459,"nodeType":"ParameterList","parameters":[],"src":"5067:0:1"},"scope":1039,"src":"4974:149:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1100],"body":{"id":497,"nodeType":"Block","src":"5301:164:1","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":483,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1927,"src":"5338:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5338:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":485,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":475,"src":"5352:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":482,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"5319:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5319:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5362:47:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":481,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5311:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5311:99:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":489,"nodeType":"ExpressionStatement","src":"5311:99:1"},{"expression":{"arguments":[{"id":491,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"5434:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":492,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":473,"src":"5440:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":493,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":475,"src":"5444:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":494,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"5453:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":490,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"5420:13:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5420:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":496,"nodeType":"ExpressionStatement","src":"5420:38:1"}]},"documentation":{"id":469,"nodeType":"StructuredDocumentation","src":"5129:55:1","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"b88d4fde","id":498,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5198:16:1","nodeType":"FunctionDefinition","overrides":{"id":479,"nodeType":"OverrideSpecifier","overrides":[],"src":"5292:8:1"},"parameters":{"id":478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":471,"mutability":"mutable","name":"from","nameLocation":"5223:4:1","nodeType":"VariableDeclaration","scope":498,"src":"5215:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":470,"name":"address","nodeType":"ElementaryTypeName","src":"5215:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":473,"mutability":"mutable","name":"to","nameLocation":"5237:2:1","nodeType":"VariableDeclaration","scope":498,"src":"5229:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":472,"name":"address","nodeType":"ElementaryTypeName","src":"5229:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":475,"mutability":"mutable","name":"tokenId","nameLocation":"5249:7:1","nodeType":"VariableDeclaration","scope":498,"src":"5241:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":474,"name":"uint256","nodeType":"ElementaryTypeName","src":"5241:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":477,"mutability":"mutable","name":"data","nameLocation":"5271:4:1","nodeType":"VariableDeclaration","scope":498,"src":"5258:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":476,"name":"bytes","nodeType":"ElementaryTypeName","src":"5258:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5214:62:1"},"returnParameters":{"id":480,"nodeType":"ParameterList","parameters":[],"src":"5301:0:1"},"scope":1039,"src":"5189:276:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":526,"nodeType":"Block","src":"6428:165:1","statements":[{"expression":{"arguments":[{"id":511,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"6448:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":512,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"6454:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":513,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"6458:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":510,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"6438:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6438:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":515,"nodeType":"ExpressionStatement","src":"6438:28:1"},{"expression":{"arguments":[{"arguments":[{"id":518,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"6507:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":519,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"6513:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":520,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"6517:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":521,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":507,"src":"6526:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":517,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"6484:22:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":522,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6484:47:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6533:52:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":516,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6476:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6476:110:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":525,"nodeType":"ExpressionStatement","src":"6476:110:1"}]},"documentation":{"id":499,"nodeType":"StructuredDocumentation","src":"5471:850:1","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":527,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"6335:13:1","nodeType":"FunctionDefinition","parameters":{"id":508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":501,"mutability":"mutable","name":"from","nameLocation":"6357:4:1","nodeType":"VariableDeclaration","scope":527,"src":"6349:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":500,"name":"address","nodeType":"ElementaryTypeName","src":"6349:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":503,"mutability":"mutable","name":"to","nameLocation":"6371:2:1","nodeType":"VariableDeclaration","scope":527,"src":"6363:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":502,"name":"address","nodeType":"ElementaryTypeName","src":"6363:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":505,"mutability":"mutable","name":"tokenId","nameLocation":"6383:7:1","nodeType":"VariableDeclaration","scope":527,"src":"6375:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":504,"name":"uint256","nodeType":"ElementaryTypeName","src":"6375:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":507,"mutability":"mutable","name":"data","nameLocation":"6405:4:1","nodeType":"VariableDeclaration","scope":527,"src":"6392:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":506,"name":"bytes","nodeType":"ElementaryTypeName","src":"6392:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6348:62:1"},"returnParameters":{"id":509,"nodeType":"ParameterList","parameters":[],"src":"6428:0:1"},"scope":1039,"src":"6326:267:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":539,"nodeType":"Block","src":"6777:40:1","statements":[{"expression":{"baseExpression":{"id":535,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":144,"src":"6794:7:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":537,"indexExpression":{"id":536,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"6802:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6794:16:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":534,"id":538,"nodeType":"Return","src":"6787:23:1"}]},"documentation":{"id":528,"nodeType":"StructuredDocumentation","src":"6599:98:1","text":" @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist"},"id":540,"implemented":true,"kind":"function","modifiers":[],"name":"_ownerOf","nameLocation":"6711:8:1","nodeType":"FunctionDefinition","parameters":{"id":531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":530,"mutability":"mutable","name":"tokenId","nameLocation":"6728:7:1","nodeType":"VariableDeclaration","scope":540,"src":"6720:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":529,"name":"uint256","nodeType":"ElementaryTypeName","src":"6720:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6719:17:1"},"returnParameters":{"id":534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":533,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":540,"src":"6768:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":532,"name":"address","nodeType":"ElementaryTypeName","src":"6768:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6767:9:1"},"scope":1039,"src":"6702:115:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":557,"nodeType":"Block","src":"7191:55:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":549,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":543,"src":"7217:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":548,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":540,"src":"7208:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7208:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7237:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":552,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7229:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":551,"name":"address","nodeType":"ElementaryTypeName","src":"7229:7:1","typeDescriptions":{}}},"id":554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7229:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7208:31:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":547,"id":556,"nodeType":"Return","src":"7201:38:1"}]},"documentation":{"id":541,"nodeType":"StructuredDocumentation","src":"6823:292:1","text":" @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),\n and stop existing when they are burned (`_burn`)."},"id":558,"implemented":true,"kind":"function","modifiers":[],"name":"_exists","nameLocation":"7129:7:1","nodeType":"FunctionDefinition","parameters":{"id":544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":543,"mutability":"mutable","name":"tokenId","nameLocation":"7145:7:1","nodeType":"VariableDeclaration","scope":558,"src":"7137:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":542,"name":"uint256","nodeType":"ElementaryTypeName","src":"7137:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7136:17:1"},"returnParameters":{"id":547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":546,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":558,"src":"7185:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":545,"name":"bool","nodeType":"ElementaryTypeName","src":"7185:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7184:6:1"},"scope":1039,"src":"7120:126:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":591,"nodeType":"Block","src":"7503:162:1","statements":[{"assignments":[569],"declarations":[{"constant":false,"id":569,"mutability":"mutable","name":"owner","nameLocation":"7521:5:1","nodeType":"VariableDeclaration","scope":591,"src":"7513:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":568,"name":"address","nodeType":"ElementaryTypeName","src":"7513:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":574,"initialValue":{"arguments":[{"id":572,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"7544:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":570,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"7529:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1039_$","typeString":"type(contract ERC721)"}},"id":571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7536:7:1","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":258,"src":"7529:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7529:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7513:39:1"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":575,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"7570:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":576,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":569,"src":"7581:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7570:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":579,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":569,"src":"7607:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":580,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"7614:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":578,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":422,"src":"7590:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7590:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7570:52:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":584,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"7638:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":583,"name":"getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"7626:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7626:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":586,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"7650:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7626:31:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7570:87:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":589,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7569:89:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":567,"id":590,"nodeType":"Return","src":"7562:96:1"}]},"documentation":{"id":559,"nodeType":"StructuredDocumentation","src":"7252:147:1","text":" @dev Returns whether `spender` is allowed to manage `tokenId`.\n Requirements:\n - `tokenId` must exist."},"id":592,"implemented":true,"kind":"function","modifiers":[],"name":"_isApprovedOrOwner","nameLocation":"7413:18:1","nodeType":"FunctionDefinition","parameters":{"id":564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":561,"mutability":"mutable","name":"spender","nameLocation":"7440:7:1","nodeType":"VariableDeclaration","scope":592,"src":"7432:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":560,"name":"address","nodeType":"ElementaryTypeName","src":"7432:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":563,"mutability":"mutable","name":"tokenId","nameLocation":"7457:7:1","nodeType":"VariableDeclaration","scope":592,"src":"7449:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":562,"name":"uint256","nodeType":"ElementaryTypeName","src":"7449:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7431:34:1"},"returnParameters":{"id":567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":566,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":592,"src":"7497:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":565,"name":"bool","nodeType":"ElementaryTypeName","src":"7497:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7496:6:1"},"scope":1039,"src":"7404:261:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":606,"nodeType":"Block","src":"8060:43:1","statements":[{"expression":{"arguments":[{"id":601,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":595,"src":"8080:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":602,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"8084:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8093:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":600,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[607,636],"referencedDeclaration":636,"src":"8070:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":604,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8070:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":605,"nodeType":"ExpressionStatement","src":"8070:26:1"}]},"documentation":{"id":593,"nodeType":"StructuredDocumentation","src":"7671:319:1","text":" @dev Safely mints `tokenId` and transfers it to `to`.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":607,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8004:9:1","nodeType":"FunctionDefinition","parameters":{"id":598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":595,"mutability":"mutable","name":"to","nameLocation":"8022:2:1","nodeType":"VariableDeclaration","scope":607,"src":"8014:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":594,"name":"address","nodeType":"ElementaryTypeName","src":"8014:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":597,"mutability":"mutable","name":"tokenId","nameLocation":"8034:7:1","nodeType":"VariableDeclaration","scope":607,"src":"8026:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":596,"name":"uint256","nodeType":"ElementaryTypeName","src":"8026:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8013:29:1"},"returnParameters":{"id":599,"nodeType":"ParameterList","parameters":[],"src":"8060:0:1"},"scope":1039,"src":"7995:108:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":635,"nodeType":"Block","src":"8408:195:1","statements":[{"expression":{"arguments":[{"id":618,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"8424:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":619,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"8428:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":617,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"8418:5:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8418:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":621,"nodeType":"ExpressionStatement","src":"8418:18:1"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"30","id":626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8498:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":625,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8490:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":624,"name":"address","nodeType":"ElementaryTypeName","src":"8490:7:1","typeDescriptions":{}}},"id":627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8490:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":628,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"8502:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":629,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"8506:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":630,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":614,"src":"8515:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":623,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"8467:22:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8467:53:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8534:52:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":622,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8446:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8446:150:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":634,"nodeType":"ExpressionStatement","src":"8446:150:1"}]},"documentation":{"id":608,"nodeType":"StructuredDocumentation","src":"8109:210:1","text":" @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":636,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8333:9:1","nodeType":"FunctionDefinition","parameters":{"id":615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":610,"mutability":"mutable","name":"to","nameLocation":"8351:2:1","nodeType":"VariableDeclaration","scope":636,"src":"8343:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":609,"name":"address","nodeType":"ElementaryTypeName","src":"8343:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":612,"mutability":"mutable","name":"tokenId","nameLocation":"8363:7:1","nodeType":"VariableDeclaration","scope":636,"src":"8355:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":611,"name":"uint256","nodeType":"ElementaryTypeName","src":"8355:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":614,"mutability":"mutable","name":"data","nameLocation":"8385:4:1","nodeType":"VariableDeclaration","scope":636,"src":"8372:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":613,"name":"bytes","nodeType":"ElementaryTypeName","src":"8372:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8342:48:1"},"returnParameters":{"id":616,"nodeType":"ParameterList","parameters":[],"src":"8408:0:1"},"scope":1039,"src":"8324:279:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":712,"nodeType":"Block","src":"8986:859:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":645,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"9004:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9018:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":647,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9010:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":646,"name":"address","nodeType":"ElementaryTypeName","src":"9010:7:1","typeDescriptions":{}}},"id":649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9010:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9004:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","id":651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9022:34:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""},"value":"ERC721: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""}],"id":644,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8996:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8996:61:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":653,"nodeType":"ExpressionStatement","src":"8996:61:1"},{"expression":{"arguments":[{"id":658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9075:17:1","subExpression":{"arguments":[{"id":656,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"9084:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":655,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"9076:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9076:16:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9094:30:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":654,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9067:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9067:58:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":661,"nodeType":"ExpressionStatement","src":"9067:58:1"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9165:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":664,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9157:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":663,"name":"address","nodeType":"ElementaryTypeName","src":"9157:7:1","typeDescriptions":{}}},"id":666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9157:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":667,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"9169:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":668,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"9173:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9182:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":662,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"9136:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9136:48:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":671,"nodeType":"ExpressionStatement","src":"9136:48:1"},{"expression":{"arguments":[{"id":676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9279:17:1","subExpression":{"arguments":[{"id":674,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"9288:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":673,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"9280:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":675,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9280:16:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9298:30:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":672,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9271:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9271:58:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":679,"nodeType":"ExpressionStatement","src":"9271:58:1"},{"id":686,"nodeType":"UncheckedBlock","src":"9340:360:1","statements":[{"expression":{"id":684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":680,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"9671:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":682,"indexExpression":{"id":681,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"9681:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9671:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9688:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9671:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":685,"nodeType":"ExpressionStatement","src":"9671:18:1"}]},{"expression":{"id":691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":687,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":144,"src":"9710:7:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":689,"indexExpression":{"id":688,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"9718:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9710:16:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":690,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"9729:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9710:21:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":692,"nodeType":"ExpressionStatement","src":"9710:21:1"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9764:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":695,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9756:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":694,"name":"address","nodeType":"ElementaryTypeName","src":"9756:7:1","typeDescriptions":{}}},"id":697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9756:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":698,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"9768:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":699,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"9772:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":693,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"9747:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9747:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":701,"nodeType":"EmitStatement","src":"9742:38:1"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9819:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":704,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9811:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":703,"name":"address","nodeType":"ElementaryTypeName","src":"9811:7:1","typeDescriptions":{}}},"id":706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9811:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":707,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"9823:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":708,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"9827:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9836:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":702,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1023,"src":"9791:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9791:47:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":711,"nodeType":"ExpressionStatement","src":"9791:47:1"}]},"documentation":{"id":637,"nodeType":"StructuredDocumentation","src":"8609:311:1","text":" @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."},"id":713,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"8934:5:1","nodeType":"FunctionDefinition","parameters":{"id":642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":639,"mutability":"mutable","name":"to","nameLocation":"8948:2:1","nodeType":"VariableDeclaration","scope":713,"src":"8940:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":638,"name":"address","nodeType":"ElementaryTypeName","src":"8940:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":641,"mutability":"mutable","name":"tokenId","nameLocation":"8960:7:1","nodeType":"VariableDeclaration","scope":713,"src":"8952:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":640,"name":"uint256","nodeType":"ElementaryTypeName","src":"8952:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8939:29:1"},"returnParameters":{"id":643,"nodeType":"ParameterList","parameters":[],"src":"8986:0:1"},"scope":1039,"src":"8925:920:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":779,"nodeType":"Block","src":"10220:713:1","statements":[{"assignments":[720],"declarations":[{"constant":false,"id":720,"mutability":"mutable","name":"owner","nameLocation":"10238:5:1","nodeType":"VariableDeclaration","scope":779,"src":"10230:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":719,"name":"address","nodeType":"ElementaryTypeName","src":"10230:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":725,"initialValue":{"arguments":[{"id":723,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"10261:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":721,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"10246:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1039_$","typeString":"type(contract ERC721)"}},"id":722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10253:7:1","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":258,"src":"10246:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10246:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10230:39:1"},{"expression":{"arguments":[{"id":727,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"10301:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10316:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":729,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10308:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":728,"name":"address","nodeType":"ElementaryTypeName","src":"10308:7:1","typeDescriptions":{}}},"id":731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10308:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":732,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"10320:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10329:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":726,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"10280:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10280:51:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":735,"nodeType":"ExpressionStatement","src":"10280:51:1"},{"expression":{"id":741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":736,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"10433:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":739,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"10456:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":737,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"10441:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1039_$","typeString":"type(contract ERC721)"}},"id":738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10448:7:1","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":258,"src":"10441:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10441:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10433:31:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":742,"nodeType":"ExpressionStatement","src":"10433:31:1"},{"expression":{"id":746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10502:31:1","subExpression":{"baseExpression":{"id":743,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":152,"src":"10509:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":745,"indexExpression":{"id":744,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"10525:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10509:24:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":747,"nodeType":"ExpressionStatement","src":"10502:31:1"},{"id":754,"nodeType":"UncheckedBlock","src":"10544:237:1","statements":[{"expression":{"id":752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":748,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"10749:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":750,"indexExpression":{"id":749,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"10759:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10749:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10769:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10749:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":753,"nodeType":"ExpressionStatement","src":"10749:21:1"}]},{"expression":{"id":758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10790:23:1","subExpression":{"baseExpression":{"id":755,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":144,"src":"10797:7:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":757,"indexExpression":{"id":756,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"10805:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10797:16:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":759,"nodeType":"ExpressionStatement","src":"10790:23:1"},{"eventCall":{"arguments":[{"id":761,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"10838:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10853:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":763,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10845:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":762,"name":"address","nodeType":"ElementaryTypeName","src":"10845:7:1","typeDescriptions":{}}},"id":765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10845:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":766,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"10857:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":760,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"10829:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10829:36:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":768,"nodeType":"EmitStatement","src":"10824:41:1"},{"expression":{"arguments":[{"id":770,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"10896:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10911:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":772,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10903:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":771,"name":"address","nodeType":"ElementaryTypeName","src":"10903:7:1","typeDescriptions":{}}},"id":774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10903:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":775,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"10915:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10924:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":769,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1023,"src":"10876:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10876:50:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":778,"nodeType":"ExpressionStatement","src":"10876:50:1"}]},"documentation":{"id":714,"nodeType":"StructuredDocumentation","src":"9851:315:1","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":780,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"10180:5:1","nodeType":"FunctionDefinition","parameters":{"id":717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":716,"mutability":"mutable","name":"tokenId","nameLocation":"10194:7:1","nodeType":"VariableDeclaration","scope":780,"src":"10186:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":715,"name":"uint256","nodeType":"ElementaryTypeName","src":"10186:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10185:17:1"},"returnParameters":{"id":718,"nodeType":"ParameterList","parameters":[],"src":"10220:0:1"},"scope":1039,"src":"10171:762:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":864,"nodeType":"Block","src":"11336:1124:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":793,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"11369:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":791,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"11354:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1039_$","typeString":"type(contract ERC721)"}},"id":792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11361:7:1","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":258,"src":"11354:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11354:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":795,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"11381:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11354:31:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11387:39:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":790,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11346:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11346:81:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":799,"nodeType":"ExpressionStatement","src":"11346:81:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":801,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"11445:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11459:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":803,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11451:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":802,"name":"address","nodeType":"ElementaryTypeName","src":"11451:7:1","typeDescriptions":{}}},"id":805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11451:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11445:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f2061646472657373","id":807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11463:38:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""},"value":"ERC721: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""}],"id":800,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11437:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11437:65:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":809,"nodeType":"ExpressionStatement","src":"11437:65:1"},{"expression":{"arguments":[{"id":811,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"11534:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":812,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"11540:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":813,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"11544:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11553:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":810,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"11513:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11513:42:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":816,"nodeType":"ExpressionStatement","src":"11513:42:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":820,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"11670:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":818,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"11655:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1039_$","typeString":"type(contract ERC721)"}},"id":819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11662:7:1","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":258,"src":"11655:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11655:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":822,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"11682:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11655:31:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11688:39:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":817,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11647:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11647:81:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":826,"nodeType":"ExpressionStatement","src":"11647:81:1"},{"expression":{"id":830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"11790:31:1","subExpression":{"baseExpression":{"id":827,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":152,"src":"11797:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":829,"indexExpression":{"id":828,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"11813:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11797:24:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":831,"nodeType":"ExpressionStatement","src":"11790:31:1"},{"id":844,"nodeType":"UncheckedBlock","src":"11832:496:1","statements":[{"expression":{"id":836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":832,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"12265:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":834,"indexExpression":{"id":833,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"12275:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12265:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12284:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12265:20:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":837,"nodeType":"ExpressionStatement","src":"12265:20:1"},{"expression":{"id":842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":838,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"12299:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":840,"indexExpression":{"id":839,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"12309:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12299:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12316:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12299:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":843,"nodeType":"ExpressionStatement","src":"12299:18:1"}]},{"expression":{"id":849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":845,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":144,"src":"12337:7:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":847,"indexExpression":{"id":846,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"12345:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12337:16:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":848,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"12356:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12337:21:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":850,"nodeType":"ExpressionStatement","src":"12337:21:1"},{"eventCall":{"arguments":[{"id":852,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"12383:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":853,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"12389:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":854,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"12393:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":851,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"12374:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":855,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12374:27:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":856,"nodeType":"EmitStatement","src":"12369:32:1"},{"expression":{"arguments":[{"id":858,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"12432:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":859,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"12438:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":860,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"12442:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12451:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":857,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1023,"src":"12412:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12412:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":863,"nodeType":"ExpressionStatement","src":"12412:41:1"}]},"documentation":{"id":781,"nodeType":"StructuredDocumentation","src":"10939:313:1","text":" @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."},"id":865,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"11266:9:1","nodeType":"FunctionDefinition","parameters":{"id":788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":783,"mutability":"mutable","name":"from","nameLocation":"11284:4:1","nodeType":"VariableDeclaration","scope":865,"src":"11276:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":782,"name":"address","nodeType":"ElementaryTypeName","src":"11276:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":785,"mutability":"mutable","name":"to","nameLocation":"11298:2:1","nodeType":"VariableDeclaration","scope":865,"src":"11290:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":784,"name":"address","nodeType":"ElementaryTypeName","src":"11290:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":787,"mutability":"mutable","name":"tokenId","nameLocation":"11310:7:1","nodeType":"VariableDeclaration","scope":865,"src":"11302:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":786,"name":"uint256","nodeType":"ElementaryTypeName","src":"11302:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11275:43:1"},"returnParameters":{"id":789,"nodeType":"ParameterList","parameters":[],"src":"11336:0:1"},"scope":1039,"src":"11257:1203:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":888,"nodeType":"Block","src":"12636:107:1","statements":[{"expression":{"id":877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":873,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":152,"src":"12646:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":875,"indexExpression":{"id":874,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"12662:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12646:24:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":876,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"12673:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12646:29:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":878,"nodeType":"ExpressionStatement","src":"12646:29:1"},{"eventCall":{"arguments":[{"arguments":[{"id":882,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"12714:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":880,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"12699:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1039_$","typeString":"type(contract ERC721)"}},"id":881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12706:7:1","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":258,"src":"12699:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12699:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":884,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"12724:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":885,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"12728:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":879,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1063,"src":"12690:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":886,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12690:46:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":887,"nodeType":"EmitStatement","src":"12685:51:1"}]},"documentation":{"id":866,"nodeType":"StructuredDocumentation","src":"12466:101:1","text":" @dev Approve `to` to operate on `tokenId`\n Emits an {Approval} event."},"id":889,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"12581:8:1","nodeType":"FunctionDefinition","parameters":{"id":871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":868,"mutability":"mutable","name":"to","nameLocation":"12598:2:1","nodeType":"VariableDeclaration","scope":889,"src":"12590:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":867,"name":"address","nodeType":"ElementaryTypeName","src":"12590:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":870,"mutability":"mutable","name":"tokenId","nameLocation":"12610:7:1","nodeType":"VariableDeclaration","scope":889,"src":"12602:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":869,"name":"uint256","nodeType":"ElementaryTypeName","src":"12602:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12589:29:1"},"returnParameters":{"id":872,"nodeType":"ParameterList","parameters":[],"src":"12636:0:1"},"scope":1039,"src":"12572:171:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":920,"nodeType":"Block","src":"12972:184:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":900,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":892,"src":"12990:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":901,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"12999:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12990:17:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","id":903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13009:27:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""},"value":"ERC721: approve to caller"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""}],"id":899,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12982:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12982:55:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":905,"nodeType":"ExpressionStatement","src":"12982:55:1"},{"expression":{"id":912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":906,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":158,"src":"13047:18:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":909,"indexExpression":{"id":907,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":892,"src":"13066:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13047:25:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":910,"indexExpression":{"id":908,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"13073:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13047:35:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":911,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":896,"src":"13085:8:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13047:46:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":913,"nodeType":"ExpressionStatement","src":"13047:46:1"},{"eventCall":{"arguments":[{"id":915,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":892,"src":"13123:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":916,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"13130:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":917,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":896,"src":"13140:8:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":914,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1072,"src":"13108:14:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13108:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":919,"nodeType":"EmitStatement","src":"13103:46:1"}]},"documentation":{"id":890,"nodeType":"StructuredDocumentation","src":"12749:125:1","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event."},"id":921,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"12888:18:1","nodeType":"FunctionDefinition","parameters":{"id":897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":892,"mutability":"mutable","name":"owner","nameLocation":"12915:5:1","nodeType":"VariableDeclaration","scope":921,"src":"12907:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":891,"name":"address","nodeType":"ElementaryTypeName","src":"12907:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":894,"mutability":"mutable","name":"operator","nameLocation":"12930:8:1","nodeType":"VariableDeclaration","scope":921,"src":"12922:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":893,"name":"address","nodeType":"ElementaryTypeName","src":"12922:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":896,"mutability":"mutable","name":"approved","nameLocation":"12945:8:1","nodeType":"VariableDeclaration","scope":921,"src":"12940:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":895,"name":"bool","nodeType":"ElementaryTypeName","src":"12940:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12906:48:1"},"returnParameters":{"id":898,"nodeType":"ParameterList","parameters":[],"src":"12972:0:1"},"scope":1039,"src":"12879:277:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":934,"nodeType":"Block","src":"13303:70:1","statements":[{"expression":{"arguments":[{"arguments":[{"id":929,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":924,"src":"13329:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":928,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"13321:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13321:16:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":931,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13339:26:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":927,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13313:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13313:53:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":933,"nodeType":"ExpressionStatement","src":"13313:53:1"}]},"documentation":{"id":922,"nodeType":"StructuredDocumentation","src":"13162:73:1","text":" @dev Reverts if the `tokenId` has not been minted yet."},"id":935,"implemented":true,"kind":"function","modifiers":[],"name":"_requireMinted","nameLocation":"13249:14:1","nodeType":"FunctionDefinition","parameters":{"id":925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":924,"mutability":"mutable","name":"tokenId","nameLocation":"13272:7:1","nodeType":"VariableDeclaration","scope":935,"src":"13264:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":923,"name":"uint256","nodeType":"ElementaryTypeName","src":"13264:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13263:17:1"},"returnParameters":{"id":926,"nodeType":"ParameterList","parameters":[],"src":"13303:0:1"},"scope":1039,"src":"13240:133:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":996,"nodeType":"Block","src":"14080:676:1","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":949,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"14094:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14097:10:1","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1603,"src":"14094:13:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14094:15:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":994,"nodeType":"Block","src":"14714:36:1","statements":[{"expression":{"hexValue":"74727565","id":992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14735:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":948,"id":993,"nodeType":"Return","src":"14728:11:1"}]},"id":995,"nodeType":"IfStatement","src":"14090:660:1","trueBody":{"id":991,"nodeType":"Block","src":"14111:597:1","statements":[{"clauses":[{"block":{"id":971,"nodeType":"Block","src":"14225:91:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":965,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":963,"src":"14250:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":966,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1173,"src":"14260:15:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1173_$","typeString":"type(contract IERC721Receiver)"}},"id":967,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14276:16:1","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1172,"src":"14260:32:1","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":968,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14293:8:1","memberName":"selector","nodeType":"MemberAccess","src":"14260:41:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"14250:51:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":948,"id":970,"nodeType":"Return","src":"14243:58:1"}]},"errorName":"","id":972,"nodeType":"TryCatchClause","parameters":{"id":964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":963,"mutability":"mutable","name":"retval","nameLocation":"14217:6:1","nodeType":"VariableDeclaration","scope":972,"src":"14210:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":962,"name":"bytes4","nodeType":"ElementaryTypeName","src":"14210:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"14209:15:1"},"src":"14201:115:1"},{"block":{"id":988,"nodeType":"Block","src":"14345:353:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":976,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"14367:6:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14374:6:1","memberName":"length","nodeType":"MemberAccess","src":"14367:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14384:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14367:18:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":986,"nodeType":"Block","src":"14494:190:1","statements":[{"AST":{"nodeType":"YulBlock","src":"14580:86:1","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14617:2:1","type":"","value":"32"},{"name":"reason","nodeType":"YulIdentifier","src":"14621:6:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14613:3:1"},"nodeType":"YulFunctionCall","src":"14613:15:1"},{"arguments":[{"name":"reason","nodeType":"YulIdentifier","src":"14636:6:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14630:5:1"},"nodeType":"YulFunctionCall","src":"14630:13:1"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14606:6:1"},"nodeType":"YulFunctionCall","src":"14606:38:1"},"nodeType":"YulExpressionStatement","src":"14606:38:1"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":974,"isOffset":false,"isSlot":false,"src":"14621:6:1","valueSize":1},{"declaration":974,"isOffset":false,"isSlot":false,"src":"14636:6:1","valueSize":1}],"id":985,"nodeType":"InlineAssembly","src":"14571:95:1"}]},"id":987,"nodeType":"IfStatement","src":"14363:321:1","trueBody":{"id":984,"nodeType":"Block","src":"14387:101:1","statements":[{"expression":{"arguments":[{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":981,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14416:52:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":980,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"14409:6:1","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14409:60:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":983,"nodeType":"ExpressionStatement","src":"14409:60:1"}]}}]},"errorName":"","id":989,"nodeType":"TryCatchClause","parameters":{"id":975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":974,"mutability":"mutable","name":"reason","nameLocation":"14337:6:1","nodeType":"VariableDeclaration","scope":989,"src":"14324:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":973,"name":"bytes","nodeType":"ElementaryTypeName","src":"14324:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14323:21:1"},"src":"14317:381:1"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":956,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1927,"src":"14166:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":957,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14166:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":958,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"14180:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":959,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":942,"src":"14186:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":960,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"14195:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":953,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"14145:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":952,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1173,"src":"14129:15:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1173_$","typeString":"type(contract IERC721Receiver)"}},"id":954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14129:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$1173","typeString":"contract IERC721Receiver"}},"id":955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14149:16:1","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1172,"src":"14129:36:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14129:71:1","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":990,"nodeType":"TryStatement","src":"14125:573:1"}]}}]},"documentation":{"id":936,"nodeType":"StructuredDocumentation","src":"13379:541:1","text":" @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"},"id":997,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOnERC721Received","nameLocation":"13934:22:1","nodeType":"FunctionDefinition","parameters":{"id":945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":938,"mutability":"mutable","name":"from","nameLocation":"13974:4:1","nodeType":"VariableDeclaration","scope":997,"src":"13966:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":937,"name":"address","nodeType":"ElementaryTypeName","src":"13966:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":940,"mutability":"mutable","name":"to","nameLocation":"13996:2:1","nodeType":"VariableDeclaration","scope":997,"src":"13988:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":939,"name":"address","nodeType":"ElementaryTypeName","src":"13988:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":942,"mutability":"mutable","name":"tokenId","nameLocation":"14016:7:1","nodeType":"VariableDeclaration","scope":997,"src":"14008:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":941,"name":"uint256","nodeType":"ElementaryTypeName","src":"14008:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":944,"mutability":"mutable","name":"data","nameLocation":"14046:4:1","nodeType":"VariableDeclaration","scope":997,"src":"14033:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":943,"name":"bytes","nodeType":"ElementaryTypeName","src":"14033:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"13956:100:1"},"returnParameters":{"id":948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":947,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":997,"src":"14074:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":946,"name":"bool","nodeType":"ElementaryTypeName","src":"14074:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14073:6:1"},"scope":1039,"src":"13925:831:1","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1009,"nodeType":"Block","src":"15586:2:1","statements":[]},"documentation":{"id":998,"nodeType":"StructuredDocumentation","src":"14762:705:1","text":" @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n - When `from` is zero, the tokens will be minted for `to`.\n - When `to` is zero, ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1010,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"15481:20:1","nodeType":"FunctionDefinition","parameters":{"id":1007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1000,"mutability":"mutable","name":"from","nameLocation":"15510:4:1","nodeType":"VariableDeclaration","scope":1010,"src":"15502:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":999,"name":"address","nodeType":"ElementaryTypeName","src":"15502:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1002,"mutability":"mutable","name":"to","nameLocation":"15524:2:1","nodeType":"VariableDeclaration","scope":1010,"src":"15516:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1001,"name":"address","nodeType":"ElementaryTypeName","src":"15516:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1004,"mutability":"mutable","name":"firstTokenId","nameLocation":"15536:12:1","nodeType":"VariableDeclaration","scope":1010,"src":"15528:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1003,"name":"uint256","nodeType":"ElementaryTypeName","src":"15528:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1006,"mutability":"mutable","name":"batchSize","nameLocation":"15558:9:1","nodeType":"VariableDeclaration","scope":1010,"src":"15550:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1005,"name":"uint256","nodeType":"ElementaryTypeName","src":"15550:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15501:67:1"},"returnParameters":{"id":1008,"nodeType":"ParameterList","parameters":[],"src":"15586:0:1"},"scope":1039,"src":"15472:116:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1022,"nodeType":"Block","src":"16407:2:1","statements":[]},"documentation":{"id":1011,"nodeType":"StructuredDocumentation","src":"15594:695:1","text":" @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n - When `from` is zero, the tokens were minted for `to`.\n - When `to` is zero, ``from``'s tokens were burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1023,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"16303:19:1","nodeType":"FunctionDefinition","parameters":{"id":1020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1013,"mutability":"mutable","name":"from","nameLocation":"16331:4:1","nodeType":"VariableDeclaration","scope":1023,"src":"16323:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1012,"name":"address","nodeType":"ElementaryTypeName","src":"16323:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1015,"mutability":"mutable","name":"to","nameLocation":"16345:2:1","nodeType":"VariableDeclaration","scope":1023,"src":"16337:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1014,"name":"address","nodeType":"ElementaryTypeName","src":"16337:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1017,"mutability":"mutable","name":"firstTokenId","nameLocation":"16357:12:1","nodeType":"VariableDeclaration","scope":1023,"src":"16349:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1016,"name":"uint256","nodeType":"ElementaryTypeName","src":"16349:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1019,"mutability":"mutable","name":"batchSize","nameLocation":"16379:9:1","nodeType":"VariableDeclaration","scope":1023,"src":"16371:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1018,"name":"uint256","nodeType":"ElementaryTypeName","src":"16371:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16322:67:1"},"returnParameters":{"id":1021,"nodeType":"ParameterList","parameters":[],"src":"16407:0:1"},"scope":1039,"src":"16294:115:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1037,"nodeType":"Block","src":"16958:45:1","statements":[{"expression":{"id":1035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1031,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"16968:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1033,"indexExpression":{"id":1032,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1026,"src":"16978:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16968:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1034,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1028,"src":"16990:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16968:28:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1036,"nodeType":"ExpressionStatement","src":"16968:28:1"}]},"documentation":{"id":1024,"nodeType":"StructuredDocumentation","src":"16415:409:1","text":" @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n that `ownerOf(tokenId)` is `a`."},"id":1038,"implemented":true,"kind":"function","modifiers":[],"name":"__unsafe_increaseBalance","nameLocation":"16891:24:1","nodeType":"FunctionDefinition","parameters":{"id":1029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1026,"mutability":"mutable","name":"account","nameLocation":"16924:7:1","nodeType":"VariableDeclaration","scope":1038,"src":"16916:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1025,"name":"address","nodeType":"ElementaryTypeName","src":"16916:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1028,"mutability":"mutable","name":"amount","nameLocation":"16941:6:1","nodeType":"VariableDeclaration","scope":1038,"src":"16933:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1027,"name":"uint256","nodeType":"ElementaryTypeName","src":"16933:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16915:33:1"},"returnParameters":{"id":1030,"nodeType":"ParameterList","parameters":[],"src":"16958:0:1"},"scope":1039,"src":"16882:121:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1040,"src":"628:16377:1","usedErrors":[],"usedEvents":[1054,1063,1072]}],"src":"107:16899:1"},"id":1},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[2568],"IERC721":[1155]},"id":1156,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1041,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:2"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":1042,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1156,"sourceUnit":2569,"src":"133:47:2","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1044,"name":"IERC165","nameLocations":["271:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":2568,"src":"271:7:2"},"id":1045,"nodeType":"InheritanceSpecifier","src":"271:7:2"}],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":1043,"nodeType":"StructuredDocumentation","src":"182:67:2","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":1155,"linearizedBaseContracts":[1155,2568],"name":"IERC721","nameLocation":"260:7:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1046,"nodeType":"StructuredDocumentation","src":"285:88:2","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1054,"name":"Transfer","nameLocation":"384:8:2","nodeType":"EventDefinition","parameters":{"id":1053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1048,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"409:4:2","nodeType":"VariableDeclaration","scope":1054,"src":"393:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1047,"name":"address","nodeType":"ElementaryTypeName","src":"393:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1050,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"431:2:2","nodeType":"VariableDeclaration","scope":1054,"src":"415:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1049,"name":"address","nodeType":"ElementaryTypeName","src":"415:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1052,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"451:7:2","nodeType":"VariableDeclaration","scope":1054,"src":"435:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1051,"name":"uint256","nodeType":"ElementaryTypeName","src":"435:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"392:67:2"},"src":"378:82:2"},{"anonymous":false,"documentation":{"id":1055,"nodeType":"StructuredDocumentation","src":"466:94:2","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1063,"name":"Approval","nameLocation":"571:8:2","nodeType":"EventDefinition","parameters":{"id":1062,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1057,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"596:5:2","nodeType":"VariableDeclaration","scope":1063,"src":"580:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1056,"name":"address","nodeType":"ElementaryTypeName","src":"580:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1059,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"619:8:2","nodeType":"VariableDeclaration","scope":1063,"src":"603:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1058,"name":"address","nodeType":"ElementaryTypeName","src":"603:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1061,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"645:7:2","nodeType":"VariableDeclaration","scope":1063,"src":"629:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1060,"name":"uint256","nodeType":"ElementaryTypeName","src":"629:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"579:74:2"},"src":"565:89:2"},{"anonymous":false,"documentation":{"id":1064,"nodeType":"StructuredDocumentation","src":"660:117:2","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":1072,"name":"ApprovalForAll","nameLocation":"788:14:2","nodeType":"EventDefinition","parameters":{"id":1071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1066,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"819:5:2","nodeType":"VariableDeclaration","scope":1072,"src":"803:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1065,"name":"address","nodeType":"ElementaryTypeName","src":"803:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1068,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"842:8:2","nodeType":"VariableDeclaration","scope":1072,"src":"826:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1067,"name":"address","nodeType":"ElementaryTypeName","src":"826:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1070,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"857:8:2","nodeType":"VariableDeclaration","scope":1072,"src":"852:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1069,"name":"bool","nodeType":"ElementaryTypeName","src":"852:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"802:64:2"},"src":"782:85:2"},{"documentation":{"id":1073,"nodeType":"StructuredDocumentation","src":"873:76:2","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":1080,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"963:9:2","nodeType":"FunctionDefinition","parameters":{"id":1076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1075,"mutability":"mutable","name":"owner","nameLocation":"981:5:2","nodeType":"VariableDeclaration","scope":1080,"src":"973:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1074,"name":"address","nodeType":"ElementaryTypeName","src":"973:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"972:15:2"},"returnParameters":{"id":1079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1078,"mutability":"mutable","name":"balance","nameLocation":"1019:7:2","nodeType":"VariableDeclaration","scope":1080,"src":"1011:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1077,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1010:17:2"},"scope":1155,"src":"954:74:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1081,"nodeType":"StructuredDocumentation","src":"1034:131:2","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":1088,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1179:7:2","nodeType":"FunctionDefinition","parameters":{"id":1084,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1083,"mutability":"mutable","name":"tokenId","nameLocation":"1195:7:2","nodeType":"VariableDeclaration","scope":1088,"src":"1187:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1082,"name":"uint256","nodeType":"ElementaryTypeName","src":"1187:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1186:17:2"},"returnParameters":{"id":1087,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1086,"mutability":"mutable","name":"owner","nameLocation":"1235:5:2","nodeType":"VariableDeclaration","scope":1088,"src":"1227:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1085,"name":"address","nodeType":"ElementaryTypeName","src":"1227:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1226:15:2"},"scope":1155,"src":"1170:72:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1089,"nodeType":"StructuredDocumentation","src":"1248:556:2","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":1100,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1818:16:2","nodeType":"FunctionDefinition","parameters":{"id":1098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1091,"mutability":"mutable","name":"from","nameLocation":"1843:4:2","nodeType":"VariableDeclaration","scope":1100,"src":"1835:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1090,"name":"address","nodeType":"ElementaryTypeName","src":"1835:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1093,"mutability":"mutable","name":"to","nameLocation":"1857:2:2","nodeType":"VariableDeclaration","scope":1100,"src":"1849:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1092,"name":"address","nodeType":"ElementaryTypeName","src":"1849:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1095,"mutability":"mutable","name":"tokenId","nameLocation":"1869:7:2","nodeType":"VariableDeclaration","scope":1100,"src":"1861:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1094,"name":"uint256","nodeType":"ElementaryTypeName","src":"1861:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1097,"mutability":"mutable","name":"data","nameLocation":"1893:4:2","nodeType":"VariableDeclaration","scope":1100,"src":"1878:19:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1096,"name":"bytes","nodeType":"ElementaryTypeName","src":"1878:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1834:64:2"},"returnParameters":{"id":1099,"nodeType":"ParameterList","parameters":[],"src":"1907:0:2"},"scope":1155,"src":"1809:99:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1101,"nodeType":"StructuredDocumentation","src":"1914:687:2","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":1110,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2615:16:2","nodeType":"FunctionDefinition","parameters":{"id":1108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1103,"mutability":"mutable","name":"from","nameLocation":"2640:4:2","nodeType":"VariableDeclaration","scope":1110,"src":"2632:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1102,"name":"address","nodeType":"ElementaryTypeName","src":"2632:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1105,"mutability":"mutable","name":"to","nameLocation":"2654:2:2","nodeType":"VariableDeclaration","scope":1110,"src":"2646:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1104,"name":"address","nodeType":"ElementaryTypeName","src":"2646:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1107,"mutability":"mutable","name":"tokenId","nameLocation":"2666:7:2","nodeType":"VariableDeclaration","scope":1110,"src":"2658:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1106,"name":"uint256","nodeType":"ElementaryTypeName","src":"2658:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2631:43:2"},"returnParameters":{"id":1109,"nodeType":"ParameterList","parameters":[],"src":"2683:0:2"},"scope":1155,"src":"2606:78:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1111,"nodeType":"StructuredDocumentation","src":"2690:732:2","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1120,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3436:12:2","nodeType":"FunctionDefinition","parameters":{"id":1118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1113,"mutability":"mutable","name":"from","nameLocation":"3457:4:2","nodeType":"VariableDeclaration","scope":1120,"src":"3449:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1112,"name":"address","nodeType":"ElementaryTypeName","src":"3449:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1115,"mutability":"mutable","name":"to","nameLocation":"3471:2:2","nodeType":"VariableDeclaration","scope":1120,"src":"3463:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1114,"name":"address","nodeType":"ElementaryTypeName","src":"3463:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1117,"mutability":"mutable","name":"tokenId","nameLocation":"3483:7:2","nodeType":"VariableDeclaration","scope":1120,"src":"3475:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1116,"name":"uint256","nodeType":"ElementaryTypeName","src":"3475:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3448:43:2"},"returnParameters":{"id":1119,"nodeType":"ParameterList","parameters":[],"src":"3500:0:2"},"scope":1155,"src":"3427:74:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1121,"nodeType":"StructuredDocumentation","src":"3507:452:2","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1128,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3973:7:2","nodeType":"FunctionDefinition","parameters":{"id":1126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1123,"mutability":"mutable","name":"to","nameLocation":"3989:2:2","nodeType":"VariableDeclaration","scope":1128,"src":"3981:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1122,"name":"address","nodeType":"ElementaryTypeName","src":"3981:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1125,"mutability":"mutable","name":"tokenId","nameLocation":"4001:7:2","nodeType":"VariableDeclaration","scope":1128,"src":"3993:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1124,"name":"uint256","nodeType":"ElementaryTypeName","src":"3993:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3980:29:2"},"returnParameters":{"id":1127,"nodeType":"ParameterList","parameters":[],"src":"4018:0:2"},"scope":1155,"src":"3964:55:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1129,"nodeType":"StructuredDocumentation","src":"4025:309:2","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":1136,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4348:17:2","nodeType":"FunctionDefinition","parameters":{"id":1134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1131,"mutability":"mutable","name":"operator","nameLocation":"4374:8:2","nodeType":"VariableDeclaration","scope":1136,"src":"4366:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1130,"name":"address","nodeType":"ElementaryTypeName","src":"4366:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1133,"mutability":"mutable","name":"approved","nameLocation":"4389:8:2","nodeType":"VariableDeclaration","scope":1136,"src":"4384:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1132,"name":"bool","nodeType":"ElementaryTypeName","src":"4384:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4365:33:2"},"returnParameters":{"id":1135,"nodeType":"ParameterList","parameters":[],"src":"4407:0:2"},"scope":1155,"src":"4339:69:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1137,"nodeType":"StructuredDocumentation","src":"4414:139:2","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":1144,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4567:11:2","nodeType":"FunctionDefinition","parameters":{"id":1140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1139,"mutability":"mutable","name":"tokenId","nameLocation":"4587:7:2","nodeType":"VariableDeclaration","scope":1144,"src":"4579:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1138,"name":"uint256","nodeType":"ElementaryTypeName","src":"4579:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4578:17:2"},"returnParameters":{"id":1143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1142,"mutability":"mutable","name":"operator","nameLocation":"4627:8:2","nodeType":"VariableDeclaration","scope":1144,"src":"4619:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1141,"name":"address","nodeType":"ElementaryTypeName","src":"4619:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4618:18:2"},"scope":1155,"src":"4558:79:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1145,"nodeType":"StructuredDocumentation","src":"4643:138:2","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":1154,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4795:16:2","nodeType":"FunctionDefinition","parameters":{"id":1150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1147,"mutability":"mutable","name":"owner","nameLocation":"4820:5:2","nodeType":"VariableDeclaration","scope":1154,"src":"4812:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1146,"name":"address","nodeType":"ElementaryTypeName","src":"4812:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1149,"mutability":"mutable","name":"operator","nameLocation":"4835:8:2","nodeType":"VariableDeclaration","scope":1154,"src":"4827:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1148,"name":"address","nodeType":"ElementaryTypeName","src":"4827:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4811:33:2"},"returnParameters":{"id":1153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1152,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1154,"src":"4868:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1151,"name":"bool","nodeType":"ElementaryTypeName","src":"4868:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4867:6:2"},"scope":1155,"src":"4786:88:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1156,"src":"250:4626:2","usedErrors":[],"usedEvents":[1054,1063,1072]}],"src":"108:4769:2"},"id":2},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[1173]},"id":1174,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1157,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"116:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":1158,"nodeType":"StructuredDocumentation","src":"141:152:3","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":1173,"linearizedBaseContracts":[1173],"name":"IERC721Receiver","nameLocation":"304:15:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1159,"nodeType":"StructuredDocumentation","src":"326:493:3","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":1172,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"833:16:3","nodeType":"FunctionDefinition","parameters":{"id":1168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1161,"mutability":"mutable","name":"operator","nameLocation":"867:8:3","nodeType":"VariableDeclaration","scope":1172,"src":"859:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1160,"name":"address","nodeType":"ElementaryTypeName","src":"859:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1163,"mutability":"mutable","name":"from","nameLocation":"893:4:3","nodeType":"VariableDeclaration","scope":1172,"src":"885:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1162,"name":"address","nodeType":"ElementaryTypeName","src":"885:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1165,"mutability":"mutable","name":"tokenId","nameLocation":"915:7:3","nodeType":"VariableDeclaration","scope":1172,"src":"907:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1164,"name":"uint256","nodeType":"ElementaryTypeName","src":"907:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1167,"mutability":"mutable","name":"data","nameLocation":"947:4:3","nodeType":"VariableDeclaration","scope":1172,"src":"932:19:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1166,"name":"bytes","nodeType":"ElementaryTypeName","src":"932:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"849:108:3"},"returnParameters":{"id":1171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1170,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1172,"src":"976:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1169,"name":"bytes4","nodeType":"ElementaryTypeName","src":"976:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"975:8:3"},"scope":1173,"src":"824:160:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1174,"src":"294:692:3","usedErrors":[],"usedEvents":[]}],"src":"116:871:3"},"id":3},"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol","exportedSymbols":{"Address":[1915],"Context":[1937],"ERC165":[2556],"ERC721":[1039],"ERC721Enumerable":[1527],"IERC165":[2568],"IERC721":[1155],"IERC721Enumerable":[1558],"IERC721Metadata":[1585],"IERC721Receiver":[1173],"Math":[3434],"SignedMath":[3539],"Strings":[2166]},"id":1528,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1175,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"128:23:4"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"../ERC721.sol","id":1176,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1528,"sourceUnit":1040,"src":"153:23:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol","file":"./IERC721Enumerable.sol","id":1177,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1528,"sourceUnit":1559,"src":"177:33:4","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1179,"name":"ERC721","nameLocations":["450:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":1039,"src":"450:6:4"},"id":1180,"nodeType":"InheritanceSpecifier","src":"450:6:4"},{"baseName":{"id":1181,"name":"IERC721Enumerable","nameLocations":["458:17:4"],"nodeType":"IdentifierPath","referencedDeclaration":1558,"src":"458:17:4"},"id":1182,"nodeType":"InheritanceSpecifier","src":"458:17:4"}],"canonicalName":"ERC721Enumerable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1178,"nodeType":"StructuredDocumentation","src":"212:199:4","text":" @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n enumerability of all the token ids in the contract as well as all token ids owned by each\n account."},"fullyImplemented":true,"id":1527,"linearizedBaseContracts":[1527,1558,1039,1585,1155,2556,2568,1937],"name":"ERC721Enumerable","nameLocation":"430:16:4","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":1188,"mutability":"mutable","name":"_ownedTokens","nameLocation":"591:12:4","nodeType":"VariableDeclaration","scope":1527,"src":"535:68:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"},"typeName":{"id":1187,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1183,"name":"address","nodeType":"ElementaryTypeName","src":"543:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"535:47:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1186,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1184,"name":"uint256","nodeType":"ElementaryTypeName","src":"562:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"554:27:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1185,"name":"uint256","nodeType":"ElementaryTypeName","src":"573:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":1192,"mutability":"mutable","name":"_ownedTokensIndex","nameLocation":"709:17:4","nodeType":"VariableDeclaration","scope":1527,"src":"673:53:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":1191,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1189,"name":"uint256","nodeType":"ElementaryTypeName","src":"681:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"673:27:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1190,"name":"uint256","nodeType":"ElementaryTypeName","src":"692:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":1195,"mutability":"mutable","name":"_allTokens","nameLocation":"805:10:4","nodeType":"VariableDeclaration","scope":1527,"src":"787:28:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[]"},"typeName":{"baseType":{"id":1193,"name":"uint256","nodeType":"ElementaryTypeName","src":"787:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1194,"nodeType":"ArrayTypeName","src":"787:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"private"},{"constant":false,"id":1199,"mutability":"mutable","name":"_allTokensIndex","nameLocation":"922:15:4","nodeType":"VariableDeclaration","scope":1527,"src":"886:51:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":1198,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1196,"name":"uint256","nodeType":"ElementaryTypeName","src":"894:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"886:27:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1197,"name":"uint256","nodeType":"ElementaryTypeName","src":"905:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"baseFunctions":[206,2567],"body":{"id":1222,"nodeType":"Block","src":"1113:114:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1210,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1202,"src":"1130:11:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1212,"name":"IERC721Enumerable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1558,"src":"1150:17:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Enumerable_$1558_$","typeString":"type(contract IERC721Enumerable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Enumerable_$1558_$","typeString":"type(contract IERC721Enumerable)"}],"id":1211,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1145:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1145:23:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Enumerable_$1558","typeString":"type(contract IERC721Enumerable)"}},"id":1214,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1169:11:4","memberName":"interfaceId","nodeType":"MemberAccess","src":"1145:35:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1130:50:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1218,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1202,"src":"1208:11:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":1216,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1184:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721Enumerable_$1527_$","typeString":"type(contract super ERC721Enumerable)"}},"id":1217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1190:17:4","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":206,"src":"1184:23:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":1219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1184:36:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1130:90:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1209,"id":1221,"nodeType":"Return","src":"1123:97:4"}]},"documentation":{"id":1200,"nodeType":"StructuredDocumentation","src":"944:56:4","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1223,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1014:17:4","nodeType":"FunctionDefinition","overrides":{"id":1206,"nodeType":"OverrideSpecifier","overrides":[{"id":1204,"name":"IERC165","nameLocations":["1081:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":2568,"src":"1081:7:4"},{"id":1205,"name":"ERC721","nameLocations":["1090:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":1039,"src":"1090:6:4"}],"src":"1072:25:4"},"parameters":{"id":1203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1202,"mutability":"mutable","name":"interfaceId","nameLocation":"1039:11:4","nodeType":"VariableDeclaration","scope":1223,"src":"1032:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1201,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1032:6:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1031:20:4"},"returnParameters":{"id":1209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1208,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1223,"src":"1107:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1207,"name":"bool","nodeType":"ElementaryTypeName","src":"1107:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1106:6:4"},"scope":1527,"src":"1005:222:4","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1549],"body":{"id":1250,"nodeType":"Block","src":"1412:147:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1235,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1228,"src":"1430:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"arguments":[{"id":1238,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"1455:5:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1236,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"1438:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1039_$","typeString":"type(contract ERC721)"}},"id":1237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1445:9:4","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":230,"src":"1438:16:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":1239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1438:23:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1430:31:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243373231456e756d657261626c653a206f776e657220696e646578206f7574206f6620626f756e6473","id":1241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1463:45:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c","typeString":"literal_string \"ERC721Enumerable: owner index out of bounds\""},"value":"ERC721Enumerable: owner index out of bounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c","typeString":"literal_string \"ERC721Enumerable: owner index out of bounds\""}],"id":1234,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1422:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1422:87:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1243,"nodeType":"ExpressionStatement","src":"1422:87:4"},{"expression":{"baseExpression":{"baseExpression":{"id":1244,"name":"_ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1188,"src":"1526:12:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":1246,"indexExpression":{"id":1245,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"1539:5:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1526:19:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1248,"indexExpression":{"id":1247,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1228,"src":"1546:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1526:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1233,"id":1249,"nodeType":"Return","src":"1519:33:4"}]},"documentation":{"id":1224,"nodeType":"StructuredDocumentation","src":"1233:68:4","text":" @dev See {IERC721Enumerable-tokenOfOwnerByIndex}."},"functionSelector":"2f745c59","id":1251,"implemented":true,"kind":"function","modifiers":[],"name":"tokenOfOwnerByIndex","nameLocation":"1315:19:4","nodeType":"FunctionDefinition","overrides":{"id":1230,"nodeType":"OverrideSpecifier","overrides":[],"src":"1385:8:4"},"parameters":{"id":1229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1226,"mutability":"mutable","name":"owner","nameLocation":"1343:5:4","nodeType":"VariableDeclaration","scope":1251,"src":"1335:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1225,"name":"address","nodeType":"ElementaryTypeName","src":"1335:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1228,"mutability":"mutable","name":"index","nameLocation":"1358:5:4","nodeType":"VariableDeclaration","scope":1251,"src":"1350:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1227,"name":"uint256","nodeType":"ElementaryTypeName","src":"1350:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1334:30:4"},"returnParameters":{"id":1233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1232,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1251,"src":"1403:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1231,"name":"uint256","nodeType":"ElementaryTypeName","src":"1403:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1402:9:4"},"scope":1527,"src":"1306:253:4","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1539],"body":{"id":1261,"nodeType":"Block","src":"1700:41:4","statements":[{"expression":{"expression":{"id":1258,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"1717:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":1259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1728:6:4","memberName":"length","nodeType":"MemberAccess","src":"1717:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1257,"id":1260,"nodeType":"Return","src":"1710:24:4"}]},"documentation":{"id":1252,"nodeType":"StructuredDocumentation","src":"1565:60:4","text":" @dev See {IERC721Enumerable-totalSupply}."},"functionSelector":"18160ddd","id":1262,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"1639:11:4","nodeType":"FunctionDefinition","overrides":{"id":1254,"nodeType":"OverrideSpecifier","overrides":[],"src":"1673:8:4"},"parameters":{"id":1253,"nodeType":"ParameterList","parameters":[],"src":"1650:2:4"},"returnParameters":{"id":1257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1256,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1262,"src":"1691:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1255,"name":"uint256","nodeType":"ElementaryTypeName","src":"1691:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1690:9:4"},"scope":1527,"src":"1630:111:4","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1557],"body":{"id":1284,"nodeType":"Block","src":"1897:146:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1272,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1265,"src":"1915:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1273,"name":"ERC721Enumerable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1527,"src":"1923:16:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Enumerable_$1527_$","typeString":"type(contract ERC721Enumerable)"}},"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1940:11:4","memberName":"totalSupply","nodeType":"MemberAccess","referencedDeclaration":1262,"src":"1923:28:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1923:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1915:38:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243373231456e756d657261626c653a20676c6f62616c20696e646578206f7574206f6620626f756e6473","id":1277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1955:46:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc","typeString":"literal_string \"ERC721Enumerable: global index out of bounds\""},"value":"ERC721Enumerable: global index out of bounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc","typeString":"literal_string \"ERC721Enumerable: global index out of bounds\""}],"id":1271,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1907:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1907:95:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1279,"nodeType":"ExpressionStatement","src":"1907:95:4"},{"expression":{"baseExpression":{"id":1280,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"2019:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":1282,"indexExpression":{"id":1281,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1265,"src":"2030:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2019:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1270,"id":1283,"nodeType":"Return","src":"2012:24:4"}]},"documentation":{"id":1263,"nodeType":"StructuredDocumentation","src":"1747:61:4","text":" @dev See {IERC721Enumerable-tokenByIndex}."},"functionSelector":"4f6ccce7","id":1285,"implemented":true,"kind":"function","modifiers":[],"name":"tokenByIndex","nameLocation":"1822:12:4","nodeType":"FunctionDefinition","overrides":{"id":1267,"nodeType":"OverrideSpecifier","overrides":[],"src":"1870:8:4"},"parameters":{"id":1266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1265,"mutability":"mutable","name":"index","nameLocation":"1843:5:4","nodeType":"VariableDeclaration","scope":1285,"src":"1835:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1264,"name":"uint256","nodeType":"ElementaryTypeName","src":"1835:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1834:15:4"},"returnParameters":{"id":1270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1269,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1285,"src":"1888:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1268,"name":"uint256","nodeType":"ElementaryTypeName","src":"1888:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1887:9:4"},"scope":1527,"src":"1813:230:4","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1010],"body":{"id":1364,"nodeType":"Block","src":"2273:729:4","statements":[{"expression":{"arguments":[{"id":1301,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1288,"src":"2310:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1302,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"2316:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1303,"name":"firstTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1292,"src":"2320:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1304,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1294,"src":"2334:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1298,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2283:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721Enumerable_$1527_$","typeString":"type(contract super ERC721Enumerable)"}},"id":1300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2289:20:4","memberName":"_beforeTokenTransfer","nodeType":"MemberAccess","referencedDeclaration":1010,"src":"2283:26:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":1305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2283:61:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1306,"nodeType":"ExpressionStatement","src":"2283:61:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1307,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1294,"src":"2359:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2371:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2359:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1315,"nodeType":"IfStatement","src":"2355:219:4","trueBody":{"id":1314,"nodeType":"Block","src":"2374:200:4","statements":[{"expression":{"arguments":[{"hexValue":"455243373231456e756d657261626c653a20636f6e7365637574697665207472616e7366657273206e6f7420737570706f72746564","id":1311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2507:55:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314","typeString":"literal_string \"ERC721Enumerable: consecutive transfers not supported\""},"value":"ERC721Enumerable: consecutive transfers not supported"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314","typeString":"literal_string \"ERC721Enumerable: consecutive transfers not supported\""}],"id":1310,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"2500:6:4","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2500:63:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1313,"nodeType":"ExpressionStatement","src":"2500:63:4"}]}},{"assignments":[1317],"declarations":[{"constant":false,"id":1317,"mutability":"mutable","name":"tokenId","nameLocation":"2592:7:4","nodeType":"VariableDeclaration","scope":1364,"src":"2584:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1316,"name":"uint256","nodeType":"ElementaryTypeName","src":"2584:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1319,"initialValue":{"id":1318,"name":"firstTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1292,"src":"2602:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2584:30:4"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1320,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1288,"src":"2629:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2645:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1322,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2637:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1321,"name":"address","nodeType":"ElementaryTypeName","src":"2637:7:4","typeDescriptions":{}}},"id":1324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2637:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2629:18:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1331,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1288,"src":"2724:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1332,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"2732:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2724:10:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1340,"nodeType":"IfStatement","src":"2720:88:4","trueBody":{"id":1339,"nodeType":"Block","src":"2736:72:4","statements":[{"expression":{"arguments":[{"id":1335,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1288,"src":"2783:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1336,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1317,"src":"2789:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1334,"name":"_removeTokenFromOwnerEnumeration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"2750:32:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2750:47:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1338,"nodeType":"ExpressionStatement","src":"2750:47:4"}]}},"id":1341,"nodeType":"IfStatement","src":"2625:183:4","trueBody":{"id":1330,"nodeType":"Block","src":"2649:65:4","statements":[{"expression":{"arguments":[{"id":1327,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1317,"src":"2695:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1326,"name":"_addTokenToAllTokensEnumeration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1415,"src":"2663:31:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":1328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2663:40:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1329,"nodeType":"ExpressionStatement","src":"2663:40:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1342,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"2821:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2835:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1344,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2827:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1343,"name":"address","nodeType":"ElementaryTypeName","src":"2827:7:4","typeDescriptions":{}}},"id":1346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2827:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2821:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1353,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"2919:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1354,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1288,"src":"2925:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2919:10:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1362,"nodeType":"IfStatement","src":"2915:81:4","trueBody":{"id":1361,"nodeType":"Block","src":"2931:65:4","statements":[{"expression":{"arguments":[{"id":1357,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"2973:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1358,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1317,"src":"2977:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1356,"name":"_addTokenToOwnerEnumeration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1395,"src":"2945:27:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2945:40:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1360,"nodeType":"ExpressionStatement","src":"2945:40:4"}]}},"id":1363,"nodeType":"IfStatement","src":"2817:179:4","trueBody":{"id":1352,"nodeType":"Block","src":"2839:70:4","statements":[{"expression":{"arguments":[{"id":1349,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1317,"src":"2890:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1348,"name":"_removeTokenFromAllTokensEnumeration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1526,"src":"2853:36:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":1350,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2853:45:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1351,"nodeType":"ExpressionStatement","src":"2853:45:4"}]}}]},"documentation":{"id":1286,"nodeType":"StructuredDocumentation","src":"2049:58:4","text":" @dev See {ERC721-_beforeTokenTransfer}."},"id":1365,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"2121:20:4","nodeType":"FunctionDefinition","overrides":{"id":1296,"nodeType":"OverrideSpecifier","overrides":[],"src":"2264:8:4"},"parameters":{"id":1295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1288,"mutability":"mutable","name":"from","nameLocation":"2159:4:4","nodeType":"VariableDeclaration","scope":1365,"src":"2151:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1287,"name":"address","nodeType":"ElementaryTypeName","src":"2151:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1290,"mutability":"mutable","name":"to","nameLocation":"2181:2:4","nodeType":"VariableDeclaration","scope":1365,"src":"2173:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1289,"name":"address","nodeType":"ElementaryTypeName","src":"2173:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1292,"mutability":"mutable","name":"firstTokenId","nameLocation":"2201:12:4","nodeType":"VariableDeclaration","scope":1365,"src":"2193:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1291,"name":"uint256","nodeType":"ElementaryTypeName","src":"2193:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1294,"mutability":"mutable","name":"batchSize","nameLocation":"2231:9:4","nodeType":"VariableDeclaration","scope":1365,"src":"2223:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1293,"name":"uint256","nodeType":"ElementaryTypeName","src":"2223:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2141:105:4"},"returnParameters":{"id":1297,"nodeType":"ParameterList","parameters":[],"src":"2273:0:4"},"scope":1527,"src":"2112:890:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1394,"nodeType":"Block","src":"3370:143:4","statements":[{"assignments":[1374],"declarations":[{"constant":false,"id":1374,"mutability":"mutable","name":"length","nameLocation":"3388:6:4","nodeType":"VariableDeclaration","scope":1394,"src":"3380:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1373,"name":"uint256","nodeType":"ElementaryTypeName","src":"3380:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1379,"initialValue":{"arguments":[{"id":1377,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1368,"src":"3414:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1375,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"3397:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1039_$","typeString":"type(contract ERC721)"}},"id":1376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3404:9:4","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":230,"src":"3397:16:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":1378,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3397:20:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3380:37:4"},{"expression":{"id":1386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1380,"name":"_ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1188,"src":"3427:12:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":1383,"indexExpression":{"id":1381,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1368,"src":"3440:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3427:16:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1384,"indexExpression":{"id":1382,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1374,"src":"3444:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3427:24:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1385,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"3454:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3427:34:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1387,"nodeType":"ExpressionStatement","src":"3427:34:4"},{"expression":{"id":1392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1388,"name":"_ownedTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1192,"src":"3471:17:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1390,"indexExpression":{"id":1389,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"3489:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3471:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1391,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1374,"src":"3500:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3471:35:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1393,"nodeType":"ExpressionStatement","src":"3471:35:4"}]},"documentation":{"id":1366,"nodeType":"StructuredDocumentation","src":"3008:283:4","text":" @dev Private function to add a token to this extension's ownership-tracking data structures.\n @param to address representing the new owner of the given token ID\n @param tokenId uint256 ID of the token to be added to the tokens list of the given address"},"id":1395,"implemented":true,"kind":"function","modifiers":[],"name":"_addTokenToOwnerEnumeration","nameLocation":"3305:27:4","nodeType":"FunctionDefinition","parameters":{"id":1371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1368,"mutability":"mutable","name":"to","nameLocation":"3341:2:4","nodeType":"VariableDeclaration","scope":1395,"src":"3333:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1367,"name":"address","nodeType":"ElementaryTypeName","src":"3333:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1370,"mutability":"mutable","name":"tokenId","nameLocation":"3353:7:4","nodeType":"VariableDeclaration","scope":1395,"src":"3345:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1369,"name":"uint256","nodeType":"ElementaryTypeName","src":"3345:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3332:29:4"},"returnParameters":{"id":1372,"nodeType":"ParameterList","parameters":[],"src":"3370:0:4"},"scope":1527,"src":"3296:217:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1414,"nodeType":"Block","src":"3774:95:4","statements":[{"expression":{"id":1406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1401,"name":"_allTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1199,"src":"3784:15:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1403,"indexExpression":{"id":1402,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1398,"src":"3800:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3784:24:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":1404,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"3811:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":1405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3822:6:4","memberName":"length","nodeType":"MemberAccess","src":"3811:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3784:44:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1407,"nodeType":"ExpressionStatement","src":"3784:44:4"},{"expression":{"arguments":[{"id":1411,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1398,"src":"3854:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1408,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"3838:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":1410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3849:4:4","memberName":"push","nodeType":"MemberAccess","src":"3838:15:4","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":1412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3838:24:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1413,"nodeType":"ExpressionStatement","src":"3838:24:4"}]},"documentation":{"id":1396,"nodeType":"StructuredDocumentation","src":"3519:184:4","text":" @dev Private function to add a token to this extension's token tracking data structures.\n @param tokenId uint256 ID of the token to be added to the tokens list"},"id":1415,"implemented":true,"kind":"function","modifiers":[],"name":"_addTokenToAllTokensEnumeration","nameLocation":"3717:31:4","nodeType":"FunctionDefinition","parameters":{"id":1399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1398,"mutability":"mutable","name":"tokenId","nameLocation":"3757:7:4","nodeType":"VariableDeclaration","scope":1415,"src":"3749:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1397,"name":"uint256","nodeType":"ElementaryTypeName","src":"3749:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3748:17:4"},"returnParameters":{"id":1400,"nodeType":"ParameterList","parameters":[],"src":"3774:0:4"},"scope":1527,"src":"3708:161:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1477,"nodeType":"Block","src":"4567:889:4","statements":[{"assignments":[1424],"declarations":[{"constant":false,"id":1424,"mutability":"mutable","name":"lastTokenIndex","nameLocation":"4756:14:4","nodeType":"VariableDeclaration","scope":1477,"src":"4748:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1423,"name":"uint256","nodeType":"ElementaryTypeName","src":"4748:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1431,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1427,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"4790:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1425,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"4773:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1039_$","typeString":"type(contract ERC721)"}},"id":1426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4780:9:4","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":230,"src":"4773:16:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":1428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4773:22:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4798:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4773:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4748:51:4"},{"assignments":[1433],"declarations":[{"constant":false,"id":1433,"mutability":"mutable","name":"tokenIndex","nameLocation":"4817:10:4","nodeType":"VariableDeclaration","scope":1477,"src":"4809:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1432,"name":"uint256","nodeType":"ElementaryTypeName","src":"4809:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1437,"initialValue":{"baseExpression":{"id":1434,"name":"_ownedTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1192,"src":"4830:17:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1436,"indexExpression":{"id":1435,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"4848:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4830:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4809:47:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1438,"name":"tokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1433,"src":"4960:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1439,"name":"lastTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1424,"src":"4974:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4960:28:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1464,"nodeType":"IfStatement","src":"4956:323:4","trueBody":{"id":1463,"nodeType":"Block","src":"4990:289:4","statements":[{"assignments":[1442],"declarations":[{"constant":false,"id":1442,"mutability":"mutable","name":"lastTokenId","nameLocation":"5012:11:4","nodeType":"VariableDeclaration","scope":1463,"src":"5004:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1441,"name":"uint256","nodeType":"ElementaryTypeName","src":"5004:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1448,"initialValue":{"baseExpression":{"baseExpression":{"id":1443,"name":"_ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1188,"src":"5026:12:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":1445,"indexExpression":{"id":1444,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"5039:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5026:18:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1447,"indexExpression":{"id":1446,"name":"lastTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1424,"src":"5045:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5026:34:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5004:56:4"},{"expression":{"id":1455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1449,"name":"_ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1188,"src":"5075:12:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":1452,"indexExpression":{"id":1450,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"5088:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5075:18:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1453,"indexExpression":{"id":1451,"name":"tokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1433,"src":"5094:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5075:30:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1454,"name":"lastTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1442,"src":"5108:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5075:44:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1456,"nodeType":"ExpressionStatement","src":"5075:44:4"},{"expression":{"id":1461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1457,"name":"_ownedTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1192,"src":"5191:17:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1459,"indexExpression":{"id":1458,"name":"lastTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1442,"src":"5209:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5191:30:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1460,"name":"tokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1433,"src":"5224:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5191:43:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1462,"nodeType":"ExpressionStatement","src":"5191:43:4"}]}},{"expression":{"id":1468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"5365:33:4","subExpression":{"baseExpression":{"id":1465,"name":"_ownedTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1192,"src":"5372:17:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1467,"indexExpression":{"id":1466,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"5390:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5372:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1469,"nodeType":"ExpressionStatement","src":"5365:33:4"},{"expression":{"id":1475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"5408:41:4","subExpression":{"baseExpression":{"baseExpression":{"id":1470,"name":"_ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1188,"src":"5415:12:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":1472,"indexExpression":{"id":1471,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"5428:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5415:18:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1474,"indexExpression":{"id":1473,"name":"lastTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1424,"src":"5434:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5415:34:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1476,"nodeType":"ExpressionStatement","src":"5408:41:4"}]},"documentation":{"id":1416,"nodeType":"StructuredDocumentation","src":"3875:606:4","text":" @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n This has O(1) time complexity, but alters the order of the _ownedTokens array.\n @param from address representing the previous owner of the given token ID\n @param tokenId uint256 ID of the token to be removed from the tokens list of the given address"},"id":1478,"implemented":true,"kind":"function","modifiers":[],"name":"_removeTokenFromOwnerEnumeration","nameLocation":"4495:32:4","nodeType":"FunctionDefinition","parameters":{"id":1421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1418,"mutability":"mutable","name":"from","nameLocation":"4536:4:4","nodeType":"VariableDeclaration","scope":1478,"src":"4528:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1417,"name":"address","nodeType":"ElementaryTypeName","src":"4528:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1420,"mutability":"mutable","name":"tokenId","nameLocation":"4550:7:4","nodeType":"VariableDeclaration","scope":1478,"src":"4542:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1419,"name":"uint256","nodeType":"ElementaryTypeName","src":"4542:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4527:31:4"},"returnParameters":{"id":1422,"nodeType":"ParameterList","parameters":[],"src":"4567:0:4"},"scope":1527,"src":"4486:970:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1525,"nodeType":"Block","src":"5815:990:4","statements":[{"assignments":[1485],"declarations":[{"constant":false,"id":1485,"mutability":"mutable","name":"lastTokenIndex","nameLocation":"6001:14:4","nodeType":"VariableDeclaration","scope":1525,"src":"5993:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1484,"name":"uint256","nodeType":"ElementaryTypeName","src":"5993:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1490,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1486,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"6018:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":1487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6029:6:4","memberName":"length","nodeType":"MemberAccess","src":"6018:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6038:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6018:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5993:46:4"},{"assignments":[1492],"declarations":[{"constant":false,"id":1492,"mutability":"mutable","name":"tokenIndex","nameLocation":"6057:10:4","nodeType":"VariableDeclaration","scope":1525,"src":"6049:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1491,"name":"uint256","nodeType":"ElementaryTypeName","src":"6049:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1496,"initialValue":{"baseExpression":{"id":1493,"name":"_allTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1199,"src":"6070:15:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1495,"indexExpression":{"id":1494,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1481,"src":"6086:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6070:24:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6049:45:4"},{"assignments":[1498],"declarations":[{"constant":false,"id":1498,"mutability":"mutable","name":"lastTokenId","nameLocation":"6424:11:4","nodeType":"VariableDeclaration","scope":1525,"src":"6416:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1497,"name":"uint256","nodeType":"ElementaryTypeName","src":"6416:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1502,"initialValue":{"baseExpression":{"id":1499,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"6438:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":1501,"indexExpression":{"id":1500,"name":"lastTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"6449:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6438:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6416:48:4"},{"expression":{"id":1507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1503,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"6475:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":1505,"indexExpression":{"id":1504,"name":"tokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"6486:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6475:22:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1506,"name":"lastTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"6500:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6475:36:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1508,"nodeType":"ExpressionStatement","src":"6475:36:4"},{"expression":{"id":1513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1509,"name":"_allTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1199,"src":"6579:15:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1511,"indexExpression":{"id":1510,"name":"lastTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"6595:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6579:28:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1512,"name":"tokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"6610:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6579:41:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1514,"nodeType":"ExpressionStatement","src":"6579:41:4"},{"expression":{"id":1518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"6741:31:4","subExpression":{"baseExpression":{"id":1515,"name":"_allTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1199,"src":"6748:15:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1517,"indexExpression":{"id":1516,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1481,"src":"6764:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6748:24:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1519,"nodeType":"ExpressionStatement","src":"6741:31:4"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1520,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"6782:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":1522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6793:3:4","memberName":"pop","nodeType":"MemberAccess","src":"6782:14:4","typeDescriptions":{"typeIdentifier":"t_function_arraypop_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$returns$__$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer)"}},"id":1523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6782:16:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1524,"nodeType":"ExpressionStatement","src":"6782:16:4"}]},"documentation":{"id":1479,"nodeType":"StructuredDocumentation","src":"5462:277:4","text":" @dev Private function to remove a token from this extension's token tracking data structures.\n This has O(1) time complexity, but alters the order of the _allTokens array.\n @param tokenId uint256 ID of the token to be removed from the tokens list"},"id":1526,"implemented":true,"kind":"function","modifiers":[],"name":"_removeTokenFromAllTokensEnumeration","nameLocation":"5753:36:4","nodeType":"FunctionDefinition","parameters":{"id":1482,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1481,"mutability":"mutable","name":"tokenId","nameLocation":"5798:7:4","nodeType":"VariableDeclaration","scope":1526,"src":"5790:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1480,"name":"uint256","nodeType":"ElementaryTypeName","src":"5790:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5789:17:4"},"returnParameters":{"id":1483,"nodeType":"ParameterList","parameters":[],"src":"5815:0:4"},"scope":1527,"src":"5744:1061:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":1528,"src":"412:6395:4","usedErrors":[],"usedEvents":[1054,1063,1072]}],"src":"128:6680:4"},"id":4},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol","exportedSymbols":{"IERC165":[2568],"IERC721":[1155],"IERC721Enumerable":[1558]},"id":1559,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1529,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"129:23:5"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":1530,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1559,"sourceUnit":1156,"src":"154:24:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1532,"name":"IERC721","nameLocations":["348:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":1155,"src":"348:7:5"},"id":1533,"nodeType":"InheritanceSpecifier","src":"348:7:5"}],"canonicalName":"IERC721Enumerable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1531,"nodeType":"StructuredDocumentation","src":"180:136:5","text":" @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":1558,"linearizedBaseContracts":[1558,1155,2568],"name":"IERC721Enumerable","nameLocation":"327:17:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1534,"nodeType":"StructuredDocumentation","src":"362:82:5","text":" @dev Returns the total amount of tokens stored by the contract."},"functionSelector":"18160ddd","id":1539,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"458:11:5","nodeType":"FunctionDefinition","parameters":{"id":1535,"nodeType":"ParameterList","parameters":[],"src":"469:2:5"},"returnParameters":{"id":1538,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1537,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1539,"src":"495:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1536,"name":"uint256","nodeType":"ElementaryTypeName","src":"495:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"494:9:5"},"scope":1558,"src":"449:55:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1540,"nodeType":"StructuredDocumentation","src":"510:171:5","text":" @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n Use along with {balanceOf} to enumerate all of ``owner``'s tokens."},"functionSelector":"2f745c59","id":1549,"implemented":false,"kind":"function","modifiers":[],"name":"tokenOfOwnerByIndex","nameLocation":"695:19:5","nodeType":"FunctionDefinition","parameters":{"id":1545,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1542,"mutability":"mutable","name":"owner","nameLocation":"723:5:5","nodeType":"VariableDeclaration","scope":1549,"src":"715:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1541,"name":"address","nodeType":"ElementaryTypeName","src":"715:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1544,"mutability":"mutable","name":"index","nameLocation":"738:5:5","nodeType":"VariableDeclaration","scope":1549,"src":"730:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1543,"name":"uint256","nodeType":"ElementaryTypeName","src":"730:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"714:30:5"},"returnParameters":{"id":1548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1547,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1549,"src":"768:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1546,"name":"uint256","nodeType":"ElementaryTypeName","src":"768:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"767:9:5"},"scope":1558,"src":"686:91:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1550,"nodeType":"StructuredDocumentation","src":"783:164:5","text":" @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n Use along with {totalSupply} to enumerate all tokens."},"functionSelector":"4f6ccce7","id":1557,"implemented":false,"kind":"function","modifiers":[],"name":"tokenByIndex","nameLocation":"961:12:5","nodeType":"FunctionDefinition","parameters":{"id":1553,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1552,"mutability":"mutable","name":"index","nameLocation":"982:5:5","nodeType":"VariableDeclaration","scope":1557,"src":"974:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1551,"name":"uint256","nodeType":"ElementaryTypeName","src":"974:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"973:15:5"},"returnParameters":{"id":1556,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1555,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1557,"src":"1012:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1554,"name":"uint256","nodeType":"ElementaryTypeName","src":"1012:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1011:9:5"},"scope":1558,"src":"952:69:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1559,"src":"317:706:5","usedErrors":[],"usedEvents":[1054,1063,1072]}],"src":"129:895:5"},"id":5},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","exportedSymbols":{"IERC165":[2568],"IERC721":[1155],"IERC721Metadata":[1585]},"id":1586,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1560,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:6"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":1561,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1586,"sourceUnit":1156,"src":"137:24:6","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1563,"name":"IERC721","nameLocations":["326:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":1155,"src":"326:7:6"},"id":1564,"nodeType":"InheritanceSpecifier","src":"326:7:6"}],"canonicalName":"IERC721Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":1562,"nodeType":"StructuredDocumentation","src":"163:133:6","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":1585,"linearizedBaseContracts":[1585,1155,2568],"name":"IERC721Metadata","nameLocation":"307:15:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1565,"nodeType":"StructuredDocumentation","src":"340:58:6","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":1570,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"412:4:6","nodeType":"FunctionDefinition","parameters":{"id":1566,"nodeType":"ParameterList","parameters":[],"src":"416:2:6"},"returnParameters":{"id":1569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1568,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1570,"src":"442:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1567,"name":"string","nodeType":"ElementaryTypeName","src":"442:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"441:15:6"},"scope":1585,"src":"403:54:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1571,"nodeType":"StructuredDocumentation","src":"463:60:6","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":1576,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"537:6:6","nodeType":"FunctionDefinition","parameters":{"id":1572,"nodeType":"ParameterList","parameters":[],"src":"543:2:6"},"returnParameters":{"id":1575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1574,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1576,"src":"569:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1573,"name":"string","nodeType":"ElementaryTypeName","src":"569:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"568:15:6"},"scope":1585,"src":"528:56:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1577,"nodeType":"StructuredDocumentation","src":"590:90:6","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":1584,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"694:8:6","nodeType":"FunctionDefinition","parameters":{"id":1580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1579,"mutability":"mutable","name":"tokenId","nameLocation":"711:7:6","nodeType":"VariableDeclaration","scope":1584,"src":"703:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1578,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"702:17:6"},"returnParameters":{"id":1583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1582,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1584,"src":"743:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1581,"name":"string","nodeType":"ElementaryTypeName","src":"743:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"742:15:6"},"scope":1585,"src":"685:73:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1586,"src":"297:463:6","usedErrors":[],"usedEvents":[1054,1063,1072]}],"src":"112:649:6"},"id":6},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[1915]},"id":1916,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1587,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:7"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":1588,"nodeType":"StructuredDocumentation","src":"126:67:7","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1915,"linearizedBaseContracts":[1915],"name":"Address","nameLocation":"202:7:7","nodeType":"ContractDefinition","nodes":[{"body":{"id":1602,"nodeType":"Block","src":"1478:254:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1596,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1591,"src":"1702:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1710:4:7","memberName":"code","nodeType":"MemberAccess","src":"1702:12:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1715:6:7","memberName":"length","nodeType":"MemberAccess","src":"1702:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1724:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1702:23:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1595,"id":1601,"nodeType":"Return","src":"1695:30:7"}]},"documentation":{"id":1589,"nodeType":"StructuredDocumentation","src":"216:1191:7","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1603,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1421:10:7","nodeType":"FunctionDefinition","parameters":{"id":1592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1591,"mutability":"mutable","name":"account","nameLocation":"1440:7:7","nodeType":"VariableDeclaration","scope":1603,"src":"1432:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1590,"name":"address","nodeType":"ElementaryTypeName","src":"1432:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1431:17:7"},"returnParameters":{"id":1595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1594,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1603,"src":"1472:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1593,"name":"bool","nodeType":"ElementaryTypeName","src":"1472:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1471:6:7"},"scope":1915,"src":"1412:320:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1636,"nodeType":"Block","src":"2718:241:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1614,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2744:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1915","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1915","typeString":"library Address"}],"id":1613,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2736:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1612,"name":"address","nodeType":"ElementaryTypeName","src":"2736:7:7","typeDescriptions":{}}},"id":1615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2736:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2750:7:7","memberName":"balance","nodeType":"MemberAccess","src":"2736:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1617,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1608,"src":"2761:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2736:31:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2769:31:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1611,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2728:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:73:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1621,"nodeType":"ExpressionStatement","src":"2728:73:7"},{"assignments":[1623,null],"declarations":[{"constant":false,"id":1623,"mutability":"mutable","name":"success","nameLocation":"2818:7:7","nodeType":"VariableDeclaration","scope":1636,"src":"2813:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1622,"name":"bool","nodeType":"ElementaryTypeName","src":"2813:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1630,"initialValue":{"arguments":[{"hexValue":"","id":1628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2861:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1624,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"2831:9:7","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2841:4:7","memberName":"call","nodeType":"MemberAccess","src":"2831:14:7","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1626,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1608,"src":"2853:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2831:29:7","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2831:33:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2812:52:7"},{"expression":{"arguments":[{"id":1632,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1623,"src":"2882:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2891:60:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1631,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2874:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1634,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2874:78:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1635,"nodeType":"ExpressionStatement","src":"2874:78:7"}]},"documentation":{"id":1604,"nodeType":"StructuredDocumentation","src":"1738:904:7","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1637,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2656:9:7","nodeType":"FunctionDefinition","parameters":{"id":1609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1606,"mutability":"mutable","name":"recipient","nameLocation":"2682:9:7","nodeType":"VariableDeclaration","scope":1637,"src":"2666:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1605,"name":"address","nodeType":"ElementaryTypeName","src":"2666:15:7","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1608,"mutability":"mutable","name":"amount","nameLocation":"2701:6:7","nodeType":"VariableDeclaration","scope":1637,"src":"2693:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1607,"name":"uint256","nodeType":"ElementaryTypeName","src":"2693:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:43:7"},"returnParameters":{"id":1610,"nodeType":"ParameterList","parameters":[],"src":"2718:0:7"},"scope":1915,"src":"2647:312:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1654,"nodeType":"Block","src":"3790:96:7","statements":[{"expression":{"arguments":[{"id":1648,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1640,"src":"3829:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1649,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1642,"src":"3837:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3843:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3846:32:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1647,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1695,1739],"referencedDeclaration":1739,"src":"3807:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3807:72:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1646,"id":1653,"nodeType":"Return","src":"3800:79:7"}]},"documentation":{"id":1638,"nodeType":"StructuredDocumentation","src":"2965:731:7","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1655,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3710:12:7","nodeType":"FunctionDefinition","parameters":{"id":1643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1640,"mutability":"mutable","name":"target","nameLocation":"3731:6:7","nodeType":"VariableDeclaration","scope":1655,"src":"3723:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1639,"name":"address","nodeType":"ElementaryTypeName","src":"3723:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1642,"mutability":"mutable","name":"data","nameLocation":"3752:4:7","nodeType":"VariableDeclaration","scope":1655,"src":"3739:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1641,"name":"bytes","nodeType":"ElementaryTypeName","src":"3739:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3722:35:7"},"returnParameters":{"id":1646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1645,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1655,"src":"3776:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1644,"name":"bytes","nodeType":"ElementaryTypeName","src":"3776:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:14:7"},"scope":1915,"src":"3701:185:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1674,"nodeType":"Block","src":"4255:76:7","statements":[{"expression":{"arguments":[{"id":1668,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1658,"src":"4294:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1669,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1660,"src":"4302:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4308:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1671,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1662,"src":"4311:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1667,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1695,1739],"referencedDeclaration":1739,"src":"4272:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:52:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1666,"id":1673,"nodeType":"Return","src":"4265:59:7"}]},"documentation":{"id":1656,"nodeType":"StructuredDocumentation","src":"3892:211:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1675,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4117:12:7","nodeType":"FunctionDefinition","parameters":{"id":1663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1658,"mutability":"mutable","name":"target","nameLocation":"4147:6:7","nodeType":"VariableDeclaration","scope":1675,"src":"4139:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1657,"name":"address","nodeType":"ElementaryTypeName","src":"4139:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1660,"mutability":"mutable","name":"data","nameLocation":"4176:4:7","nodeType":"VariableDeclaration","scope":1675,"src":"4163:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1659,"name":"bytes","nodeType":"ElementaryTypeName","src":"4163:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1662,"mutability":"mutable","name":"errorMessage","nameLocation":"4204:12:7","nodeType":"VariableDeclaration","scope":1675,"src":"4190:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1661,"name":"string","nodeType":"ElementaryTypeName","src":"4190:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4129:93:7"},"returnParameters":{"id":1666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1665,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1675,"src":"4241:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1664,"name":"bytes","nodeType":"ElementaryTypeName","src":"4241:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4240:14:7"},"scope":1915,"src":"4108:223:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1694,"nodeType":"Block","src":"4806:111:7","statements":[{"expression":{"arguments":[{"id":1688,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"4845:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1689,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1680,"src":"4853:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1690,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"4859:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4866:43:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1687,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1695,1739],"referencedDeclaration":1739,"src":"4823:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4823:87:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1686,"id":1693,"nodeType":"Return","src":"4816:94:7"}]},"documentation":{"id":1676,"nodeType":"StructuredDocumentation","src":"4337:351:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1695,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4702:21:7","nodeType":"FunctionDefinition","parameters":{"id":1683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1678,"mutability":"mutable","name":"target","nameLocation":"4732:6:7","nodeType":"VariableDeclaration","scope":1695,"src":"4724:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1677,"name":"address","nodeType":"ElementaryTypeName","src":"4724:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1680,"mutability":"mutable","name":"data","nameLocation":"4753:4:7","nodeType":"VariableDeclaration","scope":1695,"src":"4740:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1679,"name":"bytes","nodeType":"ElementaryTypeName","src":"4740:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1682,"mutability":"mutable","name":"value","nameLocation":"4767:5:7","nodeType":"VariableDeclaration","scope":1695,"src":"4759:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1681,"name":"uint256","nodeType":"ElementaryTypeName","src":"4759:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4723:50:7"},"returnParameters":{"id":1686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1685,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1695,"src":"4792:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1684,"name":"bytes","nodeType":"ElementaryTypeName","src":"4792:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4791:14:7"},"scope":1915,"src":"4693:224:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1738,"nodeType":"Block","src":"5344:267:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1712,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5370:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1915","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1915","typeString":"library Address"}],"id":1711,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5362:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1710,"name":"address","nodeType":"ElementaryTypeName","src":"5362:7:7","typeDescriptions":{}}},"id":1713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5362:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5376:7:7","memberName":"balance","nodeType":"MemberAccess","src":"5362:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1715,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1702,"src":"5387:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5362:30:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5394:40:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1709,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5354:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1718,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5354:81:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1719,"nodeType":"ExpressionStatement","src":"5354:81:7"},{"assignments":[1721,1723],"declarations":[{"constant":false,"id":1721,"mutability":"mutable","name":"success","nameLocation":"5451:7:7","nodeType":"VariableDeclaration","scope":1738,"src":"5446:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1720,"name":"bool","nodeType":"ElementaryTypeName","src":"5446:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1723,"mutability":"mutable","name":"returndata","nameLocation":"5473:10:7","nodeType":"VariableDeclaration","scope":1738,"src":"5460:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1722,"name":"bytes","nodeType":"ElementaryTypeName","src":"5460:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1730,"initialValue":{"arguments":[{"id":1728,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"5513:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1724,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1698,"src":"5487:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5494:4:7","memberName":"call","nodeType":"MemberAccess","src":"5487:11:7","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1726,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1702,"src":"5506:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5487:25:7","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5487:31:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5445:73:7"},{"expression":{"arguments":[{"id":1732,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1698,"src":"5562:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1733,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1721,"src":"5570:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1734,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1723,"src":"5579:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1735,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1704,"src":"5591:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1731,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1870,"src":"5535:26:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1736,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5535:69:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1708,"id":1737,"nodeType":"Return","src":"5528:76:7"}]},"documentation":{"id":1696,"nodeType":"StructuredDocumentation","src":"4923:237:7","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1739,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5174:21:7","nodeType":"FunctionDefinition","parameters":{"id":1705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1698,"mutability":"mutable","name":"target","nameLocation":"5213:6:7","nodeType":"VariableDeclaration","scope":1739,"src":"5205:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1697,"name":"address","nodeType":"ElementaryTypeName","src":"5205:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1700,"mutability":"mutable","name":"data","nameLocation":"5242:4:7","nodeType":"VariableDeclaration","scope":1739,"src":"5229:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1699,"name":"bytes","nodeType":"ElementaryTypeName","src":"5229:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1702,"mutability":"mutable","name":"value","nameLocation":"5264:5:7","nodeType":"VariableDeclaration","scope":1739,"src":"5256:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1701,"name":"uint256","nodeType":"ElementaryTypeName","src":"5256:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1704,"mutability":"mutable","name":"errorMessage","nameLocation":"5293:12:7","nodeType":"VariableDeclaration","scope":1739,"src":"5279:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1703,"name":"string","nodeType":"ElementaryTypeName","src":"5279:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5195:116:7"},"returnParameters":{"id":1708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1707,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1739,"src":"5330:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1706,"name":"bytes","nodeType":"ElementaryTypeName","src":"5330:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5329:14:7"},"scope":1915,"src":"5165:446:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1755,"nodeType":"Block","src":"5888:97:7","statements":[{"expression":{"arguments":[{"id":1750,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1742,"src":"5924:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1751,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1744,"src":"5932:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5938:39:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1749,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1756,1785],"referencedDeclaration":1785,"src":"5905:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5905:73:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1748,"id":1754,"nodeType":"Return","src":"5898:80:7"}]},"documentation":{"id":1740,"nodeType":"StructuredDocumentation","src":"5617:166:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1756,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5797:18:7","nodeType":"FunctionDefinition","parameters":{"id":1745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1742,"mutability":"mutable","name":"target","nameLocation":"5824:6:7","nodeType":"VariableDeclaration","scope":1756,"src":"5816:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1741,"name":"address","nodeType":"ElementaryTypeName","src":"5816:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1744,"mutability":"mutable","name":"data","nameLocation":"5845:4:7","nodeType":"VariableDeclaration","scope":1756,"src":"5832:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1743,"name":"bytes","nodeType":"ElementaryTypeName","src":"5832:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5815:35:7"},"returnParameters":{"id":1748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1747,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1756,"src":"5874:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1746,"name":"bytes","nodeType":"ElementaryTypeName","src":"5874:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5873:14:7"},"scope":1915,"src":"5788:197:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1784,"nodeType":"Block","src":"6327:168:7","statements":[{"assignments":[1769,1771],"declarations":[{"constant":false,"id":1769,"mutability":"mutable","name":"success","nameLocation":"6343:7:7","nodeType":"VariableDeclaration","scope":1784,"src":"6338:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1768,"name":"bool","nodeType":"ElementaryTypeName","src":"6338:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1771,"mutability":"mutable","name":"returndata","nameLocation":"6365:10:7","nodeType":"VariableDeclaration","scope":1784,"src":"6352:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1770,"name":"bytes","nodeType":"ElementaryTypeName","src":"6352:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1776,"initialValue":{"arguments":[{"id":1774,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1761,"src":"6397:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1772,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1759,"src":"6379:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6386:10:7","memberName":"staticcall","nodeType":"MemberAccess","src":"6379:17:7","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1775,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6379:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6337:65:7"},{"expression":{"arguments":[{"id":1778,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1759,"src":"6446:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1779,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1769,"src":"6454:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1780,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1771,"src":"6463:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1781,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"6475:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1777,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1870,"src":"6419:26:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1782,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6419:69:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1767,"id":1783,"nodeType":"Return","src":"6412:76:7"}]},"documentation":{"id":1757,"nodeType":"StructuredDocumentation","src":"5991:173:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1785,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6178:18:7","nodeType":"FunctionDefinition","parameters":{"id":1764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1759,"mutability":"mutable","name":"target","nameLocation":"6214:6:7","nodeType":"VariableDeclaration","scope":1785,"src":"6206:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1758,"name":"address","nodeType":"ElementaryTypeName","src":"6206:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1761,"mutability":"mutable","name":"data","nameLocation":"6243:4:7","nodeType":"VariableDeclaration","scope":1785,"src":"6230:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1760,"name":"bytes","nodeType":"ElementaryTypeName","src":"6230:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1763,"mutability":"mutable","name":"errorMessage","nameLocation":"6271:12:7","nodeType":"VariableDeclaration","scope":1785,"src":"6257:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1762,"name":"string","nodeType":"ElementaryTypeName","src":"6257:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6196:93:7"},"returnParameters":{"id":1767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1766,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1785,"src":"6313:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1765,"name":"bytes","nodeType":"ElementaryTypeName","src":"6313:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6312:14:7"},"scope":1915,"src":"6169:326:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1801,"nodeType":"Block","src":"6771:101:7","statements":[{"expression":{"arguments":[{"id":1796,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1788,"src":"6809:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1797,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"6817:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6823:41:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1795,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1802,1831],"referencedDeclaration":1831,"src":"6788:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6788:77:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1794,"id":1800,"nodeType":"Return","src":"6781:84:7"}]},"documentation":{"id":1786,"nodeType":"StructuredDocumentation","src":"6501:168:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1802,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6683:20:7","nodeType":"FunctionDefinition","parameters":{"id":1791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1788,"mutability":"mutable","name":"target","nameLocation":"6712:6:7","nodeType":"VariableDeclaration","scope":1802,"src":"6704:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1787,"name":"address","nodeType":"ElementaryTypeName","src":"6704:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1790,"mutability":"mutable","name":"data","nameLocation":"6733:4:7","nodeType":"VariableDeclaration","scope":1802,"src":"6720:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1789,"name":"bytes","nodeType":"ElementaryTypeName","src":"6720:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6703:35:7"},"returnParameters":{"id":1794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1793,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1802,"src":"6757:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1792,"name":"bytes","nodeType":"ElementaryTypeName","src":"6757:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6756:14:7"},"scope":1915,"src":"6674:198:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1830,"nodeType":"Block","src":"7213:170:7","statements":[{"assignments":[1815,1817],"declarations":[{"constant":false,"id":1815,"mutability":"mutable","name":"success","nameLocation":"7229:7:7","nodeType":"VariableDeclaration","scope":1830,"src":"7224:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1814,"name":"bool","nodeType":"ElementaryTypeName","src":"7224:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1817,"mutability":"mutable","name":"returndata","nameLocation":"7251:10:7","nodeType":"VariableDeclaration","scope":1830,"src":"7238:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1816,"name":"bytes","nodeType":"ElementaryTypeName","src":"7238:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1822,"initialValue":{"arguments":[{"id":1820,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1807,"src":"7285:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1818,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1805,"src":"7265:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7272:12:7","memberName":"delegatecall","nodeType":"MemberAccess","src":"7265:19:7","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7265:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7223:67:7"},{"expression":{"arguments":[{"id":1824,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1805,"src":"7334:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1825,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1815,"src":"7342:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1826,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1817,"src":"7351:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1827,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1809,"src":"7363:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1823,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1870,"src":"7307:26:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1828,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7307:69:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1813,"id":1829,"nodeType":"Return","src":"7300:76:7"}]},"documentation":{"id":1803,"nodeType":"StructuredDocumentation","src":"6878:175:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1831,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7067:20:7","nodeType":"FunctionDefinition","parameters":{"id":1810,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1805,"mutability":"mutable","name":"target","nameLocation":"7105:6:7","nodeType":"VariableDeclaration","scope":1831,"src":"7097:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1804,"name":"address","nodeType":"ElementaryTypeName","src":"7097:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1807,"mutability":"mutable","name":"data","nameLocation":"7134:4:7","nodeType":"VariableDeclaration","scope":1831,"src":"7121:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1806,"name":"bytes","nodeType":"ElementaryTypeName","src":"7121:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1809,"mutability":"mutable","name":"errorMessage","nameLocation":"7162:12:7","nodeType":"VariableDeclaration","scope":1831,"src":"7148:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1808,"name":"string","nodeType":"ElementaryTypeName","src":"7148:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7087:93:7"},"returnParameters":{"id":1813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1812,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1831,"src":"7199:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1811,"name":"bytes","nodeType":"ElementaryTypeName","src":"7199:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7198:14:7"},"scope":1915,"src":"7058:325:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1869,"nodeType":"Block","src":"7865:434:7","statements":[{"condition":{"id":1845,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1836,"src":"7879:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1867,"nodeType":"Block","src":"8235:58:7","statements":[{"expression":{"arguments":[{"id":1863,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1838,"src":"8257:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1864,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1840,"src":"8269:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1862,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1914,"src":"8249:7:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1865,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8249:33:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1866,"nodeType":"ExpressionStatement","src":"8249:33:7"}]},"id":1868,"nodeType":"IfStatement","src":"7875:418:7","trueBody":{"id":1861,"nodeType":"Block","src":"7888:341:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1846,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1838,"src":"7906:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7917:6:7","memberName":"length","nodeType":"MemberAccess","src":"7906:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1848,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7927:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7906:22:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1858,"nodeType":"IfStatement","src":"7902:286:7","trueBody":{"id":1857,"nodeType":"Block","src":"7930:258:7","statements":[{"expression":{"arguments":[{"arguments":[{"id":1852,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1834,"src":"8132:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1851,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1603,"src":"8121:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8121:18:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1854,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8141:31:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1850,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8113:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1855,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8113:60:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1856,"nodeType":"ExpressionStatement","src":"8113:60:7"}]}},{"expression":{"id":1859,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1838,"src":"8208:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1844,"id":1860,"nodeType":"Return","src":"8201:17:7"}]}}]},"documentation":{"id":1832,"nodeType":"StructuredDocumentation","src":"7389:277:7","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1870,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7680:26:7","nodeType":"FunctionDefinition","parameters":{"id":1841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1834,"mutability":"mutable","name":"target","nameLocation":"7724:6:7","nodeType":"VariableDeclaration","scope":1870,"src":"7716:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1833,"name":"address","nodeType":"ElementaryTypeName","src":"7716:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1836,"mutability":"mutable","name":"success","nameLocation":"7745:7:7","nodeType":"VariableDeclaration","scope":1870,"src":"7740:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1835,"name":"bool","nodeType":"ElementaryTypeName","src":"7740:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1838,"mutability":"mutable","name":"returndata","nameLocation":"7775:10:7","nodeType":"VariableDeclaration","scope":1870,"src":"7762:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1837,"name":"bytes","nodeType":"ElementaryTypeName","src":"7762:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1840,"mutability":"mutable","name":"errorMessage","nameLocation":"7809:12:7","nodeType":"VariableDeclaration","scope":1870,"src":"7795:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1839,"name":"string","nodeType":"ElementaryTypeName","src":"7795:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7706:121:7"},"returnParameters":{"id":1844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1843,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1870,"src":"7851:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1842,"name":"bytes","nodeType":"ElementaryTypeName","src":"7851:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7850:14:7"},"scope":1915,"src":"7671:628:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1893,"nodeType":"Block","src":"8680:135:7","statements":[{"condition":{"id":1882,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1873,"src":"8694:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1891,"nodeType":"Block","src":"8751:58:7","statements":[{"expression":{"arguments":[{"id":1887,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1875,"src":"8773:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1888,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1877,"src":"8785:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1886,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1914,"src":"8765:7:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1889,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8765:33:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1890,"nodeType":"ExpressionStatement","src":"8765:33:7"}]},"id":1892,"nodeType":"IfStatement","src":"8690:119:7","trueBody":{"id":1885,"nodeType":"Block","src":"8703:42:7","statements":[{"expression":{"id":1883,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1875,"src":"8724:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1881,"id":1884,"nodeType":"Return","src":"8717:17:7"}]}}]},"documentation":{"id":1871,"nodeType":"StructuredDocumentation","src":"8305:210:7","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1894,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8529:16:7","nodeType":"FunctionDefinition","parameters":{"id":1878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1873,"mutability":"mutable","name":"success","nameLocation":"8560:7:7","nodeType":"VariableDeclaration","scope":1894,"src":"8555:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1872,"name":"bool","nodeType":"ElementaryTypeName","src":"8555:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1875,"mutability":"mutable","name":"returndata","nameLocation":"8590:10:7","nodeType":"VariableDeclaration","scope":1894,"src":"8577:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1874,"name":"bytes","nodeType":"ElementaryTypeName","src":"8577:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1877,"mutability":"mutable","name":"errorMessage","nameLocation":"8624:12:7","nodeType":"VariableDeclaration","scope":1894,"src":"8610:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1876,"name":"string","nodeType":"ElementaryTypeName","src":"8610:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8545:97:7"},"returnParameters":{"id":1881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1880,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1894,"src":"8666:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1879,"name":"bytes","nodeType":"ElementaryTypeName","src":"8666:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8665:14:7"},"scope":1915,"src":"8520:295:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1913,"nodeType":"Block","src":"8904:457:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1901,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1896,"src":"8980:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8991:6:7","memberName":"length","nodeType":"MemberAccess","src":"8980:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9000:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8980:21:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1911,"nodeType":"Block","src":"9310:45:7","statements":[{"expression":{"arguments":[{"id":1908,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1898,"src":"9331:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1907,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9324:6:7","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9324:20:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1910,"nodeType":"ExpressionStatement","src":"9324:20:7"}]},"id":1912,"nodeType":"IfStatement","src":"8976:379:7","trueBody":{"id":1906,"nodeType":"Block","src":"9003:301:7","statements":[{"AST":{"nodeType":"YulBlock","src":"9161:133:7","statements":[{"nodeType":"YulVariableDeclaration","src":"9179:40:7","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9208:10:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9202:5:7"},"nodeType":"YulFunctionCall","src":"9202:17:7"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9183:15:7","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9247:2:7","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9251:10:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9243:3:7"},"nodeType":"YulFunctionCall","src":"9243:19:7"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9264:15:7"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9236:6:7"},"nodeType":"YulFunctionCall","src":"9236:44:7"},"nodeType":"YulExpressionStatement","src":"9236:44:7"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1896,"isOffset":false,"isSlot":false,"src":"9208:10:7","valueSize":1},{"declaration":1896,"isOffset":false,"isSlot":false,"src":"9251:10:7","valueSize":1}],"id":1905,"nodeType":"InlineAssembly","src":"9152:142:7"}]}}]},"id":1914,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8830:7:7","nodeType":"FunctionDefinition","parameters":{"id":1899,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1896,"mutability":"mutable","name":"returndata","nameLocation":"8851:10:7","nodeType":"VariableDeclaration","scope":1914,"src":"8838:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1895,"name":"bytes","nodeType":"ElementaryTypeName","src":"8838:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1898,"mutability":"mutable","name":"errorMessage","nameLocation":"8877:12:7","nodeType":"VariableDeclaration","scope":1914,"src":"8863:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1897,"name":"string","nodeType":"ElementaryTypeName","src":"8863:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8837:53:7"},"returnParameters":{"id":1900,"nodeType":"ParameterList","parameters":[],"src":"8904:0:7"},"scope":1915,"src":"8821:540:7","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1916,"src":"194:9169:7","usedErrors":[],"usedEvents":[]}],"src":"101:9263:7"},"id":7},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1937]},"id":1938,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1917,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:8"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1918,"nodeType":"StructuredDocumentation","src":"111:496:8","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1937,"linearizedBaseContracts":[1937],"name":"Context","nameLocation":"626:7:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":1926,"nodeType":"Block","src":"702:34:8","statements":[{"expression":{"expression":{"id":1923,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:8","memberName":"sender","nodeType":"MemberAccess","src":"719:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1922,"id":1925,"nodeType":"Return","src":"712:17:8"}]},"id":1927,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:8","nodeType":"FunctionDefinition","parameters":{"id":1919,"nodeType":"ParameterList","parameters":[],"src":"659:2:8"},"returnParameters":{"id":1922,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1921,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1927,"src":"693:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1920,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:8"},"scope":1937,"src":"640:96:8","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1935,"nodeType":"Block","src":"809:32:8","statements":[{"expression":{"expression":{"id":1932,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:8","memberName":"data","nodeType":"MemberAccess","src":"826:8:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1931,"id":1934,"nodeType":"Return","src":"819:15:8"}]},"id":1936,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:8","nodeType":"FunctionDefinition","parameters":{"id":1928,"nodeType":"ParameterList","parameters":[],"src":"759:2:8"},"returnParameters":{"id":1931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1930,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1936,"src":"793:14:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1929,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:8"},"scope":1937,"src":"742:99:8","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1938,"src":"608:235:8","usedErrors":[],"usedEvents":[]}],"src":"86:758:8"},"id":8},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[3434],"SignedMath":[3539],"Strings":[2166]},"id":2167,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1939,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:9"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":1940,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2167,"sourceUnit":3435,"src":"126:25:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":1941,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2167,"sourceUnit":3540,"src":"152:31:9","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":1942,"nodeType":"StructuredDocumentation","src":"185:34:9","text":" @dev String operations."},"fullyImplemented":true,"id":2166,"linearizedBaseContracts":[2166],"name":"Strings","nameLocation":"228:7:9","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1945,"mutability":"constant","name":"_SYMBOLS","nameLocation":"267:8:9","nodeType":"VariableDeclaration","scope":2166,"src":"242:54:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1943,"name":"bytes16","nodeType":"ElementaryTypeName","src":"242:7:9","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"278:18:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1948,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"325:15:9","nodeType":"VariableDeclaration","scope":2166,"src":"302:43:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1946,"name":"uint8","nodeType":"ElementaryTypeName","src":"302:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"343:2:9","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":1995,"nodeType":"Block","src":"518:625:9","statements":[{"id":1994,"nodeType":"UncheckedBlock","src":"528:609:9","statements":[{"assignments":[1957],"declarations":[{"constant":false,"id":1957,"mutability":"mutable","name":"length","nameLocation":"560:6:9","nodeType":"VariableDeclaration","scope":1994,"src":"552:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1956,"name":"uint256","nodeType":"ElementaryTypeName","src":"552:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1964,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1960,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1951,"src":"580:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1958,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3434,"src":"569:4:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3434_$","typeString":"type(library Math)"}},"id":1959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"574:5:9","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":3271,"src":"569:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"569:17:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"589:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"569:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"552:38:9"},{"assignments":[1966],"declarations":[{"constant":false,"id":1966,"mutability":"mutable","name":"buffer","nameLocation":"618:6:9","nodeType":"VariableDeclaration","scope":1994,"src":"604:20:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1965,"name":"string","nodeType":"ElementaryTypeName","src":"604:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1971,"initialValue":{"arguments":[{"id":1969,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"638:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1968,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"627:10:9","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1967,"name":"string","nodeType":"ElementaryTypeName","src":"631:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1970,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"627:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"604:41:9"},{"assignments":[1973],"declarations":[{"constant":false,"id":1973,"mutability":"mutable","name":"ptr","nameLocation":"667:3:9","nodeType":"VariableDeclaration","scope":1994,"src":"659:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1972,"name":"uint256","nodeType":"ElementaryTypeName","src":"659:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1974,"nodeType":"VariableDeclarationStatement","src":"659:11:9"},{"AST":{"nodeType":"YulBlock","src":"740:67:9","statements":[{"nodeType":"YulAssignment","src":"758:35:9","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"769:6:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"781:2:9","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"785:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"777:3:9"},"nodeType":"YulFunctionCall","src":"777:15:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"765:3:9"},"nodeType":"YulFunctionCall","src":"765:28:9"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"758:3:9"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1966,"isOffset":false,"isSlot":false,"src":"769:6:9","valueSize":1},{"declaration":1957,"isOffset":false,"isSlot":false,"src":"785:6:9","valueSize":1},{"declaration":1973,"isOffset":false,"isSlot":false,"src":"758:3:9","valueSize":1}],"id":1975,"nodeType":"InlineAssembly","src":"731:76:9"},{"body":{"id":1990,"nodeType":"Block","src":"833:267:9","statements":[{"expression":{"id":1978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"851:5:9","subExpression":{"id":1977,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1973,"src":"851:3:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1979,"nodeType":"ExpressionStatement","src":"851:5:9"},{"AST":{"nodeType":"YulBlock","src":"934:84:9","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"964:3:9"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"978:5:9"},{"kind":"number","nodeType":"YulLiteral","src":"985:2:9","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"974:3:9"},"nodeType":"YulFunctionCall","src":"974:14:9"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"990:8:9"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"969:4:9"},"nodeType":"YulFunctionCall","src":"969:30:9"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"956:7:9"},"nodeType":"YulFunctionCall","src":"956:44:9"},"nodeType":"YulExpressionStatement","src":"956:44:9"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1945,"isOffset":false,"isSlot":false,"src":"990:8:9","valueSize":1},{"declaration":1973,"isOffset":false,"isSlot":false,"src":"964:3:9","valueSize":1},{"declaration":1951,"isOffset":false,"isSlot":false,"src":"978:5:9","valueSize":1}],"id":1980,"nodeType":"InlineAssembly","src":"925:93:9"},{"expression":{"id":1983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1981,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1951,"src":"1035:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1982,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1035:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1984,"nodeType":"ExpressionStatement","src":"1035:11:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1985,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1951,"src":"1068:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1077:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1068:10:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1989,"nodeType":"IfStatement","src":"1064:21:9","trueBody":{"id":1988,"nodeType":"Break","src":"1080:5:9"}}]},"condition":{"hexValue":"74727565","id":1976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"827:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1991,"nodeType":"WhileStatement","src":"820:280:9"},{"expression":{"id":1992,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"1120:6:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1955,"id":1993,"nodeType":"Return","src":"1113:13:9"}]}]},"documentation":{"id":1949,"nodeType":"StructuredDocumentation","src":"352:90:9","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1996,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"456:8:9","nodeType":"FunctionDefinition","parameters":{"id":1952,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1951,"mutability":"mutable","name":"value","nameLocation":"473:5:9","nodeType":"VariableDeclaration","scope":1996,"src":"465:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1950,"name":"uint256","nodeType":"ElementaryTypeName","src":"465:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"464:15:9"},"returnParameters":{"id":1955,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1954,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1996,"src":"503:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1953,"name":"string","nodeType":"ElementaryTypeName","src":"503:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"502:15:9"},"scope":2166,"src":"447:696:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2023,"nodeType":"Block","src":"1313:103:9","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2008,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"1354:5:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":2009,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1362:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1354:9:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":2012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1372:2:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":2013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1354:20:9","trueExpression":{"hexValue":"2d","id":2011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1366:3:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":2017,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"1400:5:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":2015,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3539,"src":"1385:10:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$3539_$","typeString":"type(library SignedMath)"}},"id":2016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1396:3:9","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":3538,"src":"1385:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":2018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1385:21:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2014,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[1996,2024],"referencedDeclaration":1996,"src":"1376:8:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":2019,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1376:31:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":2006,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1337:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2007,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1341:12:9","memberName":"encodePacked","nodeType":"MemberAccess","src":"1337:16:9","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1337:71:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2005,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1330:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2004,"name":"string","nodeType":"ElementaryTypeName","src":"1330:6:9","typeDescriptions":{}}},"id":2021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1330:79:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2003,"id":2022,"nodeType":"Return","src":"1323:86:9"}]},"documentation":{"id":1997,"nodeType":"StructuredDocumentation","src":"1149:89:9","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":2024,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1252:8:9","nodeType":"FunctionDefinition","parameters":{"id":2000,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1999,"mutability":"mutable","name":"value","nameLocation":"1268:5:9","nodeType":"VariableDeclaration","scope":2024,"src":"1261:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1998,"name":"int256","nodeType":"ElementaryTypeName","src":"1261:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1260:14:9"},"returnParameters":{"id":2003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2002,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2024,"src":"1298:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2001,"name":"string","nodeType":"ElementaryTypeName","src":"1298:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1297:15:9"},"scope":2166,"src":"1243:173:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2043,"nodeType":"Block","src":"1595:100:9","statements":[{"id":2042,"nodeType":"UncheckedBlock","src":"1605:84:9","statements":[{"expression":{"arguments":[{"id":2033,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"1648:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2036,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"1667:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2034,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3434,"src":"1655:4:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3434_$","typeString":"type(library Math)"}},"id":2035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1660:6:9","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":3394,"src":"1655:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1655:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1676:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1655:22:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2032,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2044,2120,2140],"referencedDeclaration":2120,"src":"1636:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2040,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1636:42:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2031,"id":2041,"nodeType":"Return","src":"1629:49:9"}]}]},"documentation":{"id":2025,"nodeType":"StructuredDocumentation","src":"1422:94:9","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":2044,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1530:11:9","nodeType":"FunctionDefinition","parameters":{"id":2028,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2027,"mutability":"mutable","name":"value","nameLocation":"1550:5:9","nodeType":"VariableDeclaration","scope":2044,"src":"1542:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2026,"name":"uint256","nodeType":"ElementaryTypeName","src":"1542:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1541:15:9"},"returnParameters":{"id":2031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2030,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2044,"src":"1580:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2029,"name":"string","nodeType":"ElementaryTypeName","src":"1580:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1579:15:9"},"scope":2166,"src":"1521:174:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2119,"nodeType":"Block","src":"1908:347:9","statements":[{"assignments":[2055],"declarations":[{"constant":false,"id":2055,"mutability":"mutable","name":"buffer","nameLocation":"1931:6:9","nodeType":"VariableDeclaration","scope":2119,"src":"1918:19:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2054,"name":"bytes","nodeType":"ElementaryTypeName","src":"1918:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2064,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1950:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2059,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2049,"src":"1954:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1950:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":2061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1963:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1950:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2057,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1940:9:9","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":2056,"name":"bytes","nodeType":"ElementaryTypeName","src":"1944:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":2063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1940:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1918:47:9"},{"expression":{"id":2069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2065,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2055,"src":"1975:6:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2067,"indexExpression":{"hexValue":"30","id":2066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1982:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1975:9:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1987:3:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1975:15:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2070,"nodeType":"ExpressionStatement","src":"1975:15:9"},{"expression":{"id":2075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2071,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2055,"src":"2000:6:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2073,"indexExpression":{"hexValue":"31","id":2072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2007:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2000:9:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":2074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2012:3:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2000:15:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2076,"nodeType":"ExpressionStatement","src":"2000:15:9"},{"body":{"id":2105,"nodeType":"Block","src":"2070:83:9","statements":[{"expression":{"id":2099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2091,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2055,"src":"2084:6:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2093,"indexExpression":{"id":2092,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"2091:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2084:9:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2094,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1945,"src":"2096:8:9","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":2098,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2095,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2047,"src":"2105:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":2096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2113:3:9","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2105:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2096:21:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2084:33:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2100,"nodeType":"ExpressionStatement","src":"2084:33:9"},{"expression":{"id":2103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2101,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2047,"src":"2131:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2141:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2131:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2104,"nodeType":"ExpressionStatement","src":"2131:11:9"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2085,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"2058:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":2086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2062:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2058:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2106,"initializationExpression":{"assignments":[2078],"declarations":[{"constant":false,"id":2078,"mutability":"mutable","name":"i","nameLocation":"2038:1:9","nodeType":"VariableDeclaration","scope":2106,"src":"2030:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2077,"name":"uint256","nodeType":"ElementaryTypeName","src":"2030:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2084,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2042:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2080,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2049,"src":"2046:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2042:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2055:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2042:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2030:26:9"},"loopExpression":{"expression":{"id":2089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2065:3:9","subExpression":{"id":2088,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"2067:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2090,"nodeType":"ExpressionStatement","src":"2065:3:9"},"nodeType":"ForStatement","src":"2025:128:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2108,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2047,"src":"2170:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2170:10:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":2111,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2182:34:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":2107,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2162:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2162:55:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2113,"nodeType":"ExpressionStatement","src":"2162:55:9"},{"expression":{"arguments":[{"id":2116,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2055,"src":"2241:6:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2115,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2234:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2114,"name":"string","nodeType":"ElementaryTypeName","src":"2234:6:9","typeDescriptions":{}}},"id":2117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2234:14:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2053,"id":2118,"nodeType":"Return","src":"2227:21:9"}]},"documentation":{"id":2045,"nodeType":"StructuredDocumentation","src":"1701:112:9","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":2120,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1827:11:9","nodeType":"FunctionDefinition","parameters":{"id":2050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2047,"mutability":"mutable","name":"value","nameLocation":"1847:5:9","nodeType":"VariableDeclaration","scope":2120,"src":"1839:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2046,"name":"uint256","nodeType":"ElementaryTypeName","src":"1839:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2049,"mutability":"mutable","name":"length","nameLocation":"1862:6:9","nodeType":"VariableDeclaration","scope":2120,"src":"1854:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2048,"name":"uint256","nodeType":"ElementaryTypeName","src":"1854:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:31:9"},"returnParameters":{"id":2053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2052,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2120,"src":"1893:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2051,"name":"string","nodeType":"ElementaryTypeName","src":"1893:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1892:15:9"},"scope":2166,"src":"1818:437:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2139,"nodeType":"Block","src":"2480:76:9","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":2133,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2123,"src":"2525:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2132,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2517:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2131,"name":"uint160","nodeType":"ElementaryTypeName","src":"2517:7:9","typeDescriptions":{}}},"id":2134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2517:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2130,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2129,"name":"uint256","nodeType":"ElementaryTypeName","src":"2509:7:9","typeDescriptions":{}}},"id":2135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:22:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2136,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"2533:15:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2128,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2044,2120,2140],"referencedDeclaration":2120,"src":"2497:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2497:52:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2127,"id":2138,"nodeType":"Return","src":"2490:59:9"}]},"documentation":{"id":2121,"nodeType":"StructuredDocumentation","src":"2261:141:9","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":2140,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2416:11:9","nodeType":"FunctionDefinition","parameters":{"id":2124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2123,"mutability":"mutable","name":"addr","nameLocation":"2436:4:9","nodeType":"VariableDeclaration","scope":2140,"src":"2428:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2122,"name":"address","nodeType":"ElementaryTypeName","src":"2428:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2427:14:9"},"returnParameters":{"id":2127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2126,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2140,"src":"2465:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2125,"name":"string","nodeType":"ElementaryTypeName","src":"2465:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2464:15:9"},"scope":2166,"src":"2407:149:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2164,"nodeType":"Block","src":"2711:66:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":2153,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2143,"src":"2744:1:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2152,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2738:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2151,"name":"bytes","nodeType":"ElementaryTypeName","src":"2738:5:9","typeDescriptions":{}}},"id":2154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2738:8:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2150,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2728:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2155,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":2159,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2145,"src":"2767:1:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2158,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2761:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2157,"name":"bytes","nodeType":"ElementaryTypeName","src":"2761:5:9","typeDescriptions":{}}},"id":2160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2761:8:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2156,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2751:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2161,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2751:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2728:42:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2149,"id":2163,"nodeType":"Return","src":"2721:49:9"}]},"documentation":{"id":2141,"nodeType":"StructuredDocumentation","src":"2562:66:9","text":" @dev Returns true if the two strings are equal."},"id":2165,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2642:5:9","nodeType":"FunctionDefinition","parameters":{"id":2146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2143,"mutability":"mutable","name":"a","nameLocation":"2662:1:9","nodeType":"VariableDeclaration","scope":2165,"src":"2648:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2142,"name":"string","nodeType":"ElementaryTypeName","src":"2648:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2145,"mutability":"mutable","name":"b","nameLocation":"2679:1:9","nodeType":"VariableDeclaration","scope":2165,"src":"2665:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2144,"name":"string","nodeType":"ElementaryTypeName","src":"2665:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2647:34:9"},"returnParameters":{"id":2149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2148,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2165,"src":"2705:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2147,"name":"bool","nodeType":"ElementaryTypeName","src":"2705:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2704:6:9"},"scope":2166,"src":"2633:144:9","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2167,"src":"220:2559:9","usedErrors":[],"usedEvents":[]}],"src":"101:2679:9"},"id":9},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","exportedSymbols":{"ECDSA":[2532],"Math":[3434],"SignedMath":[3539],"Strings":[2166]},"id":2533,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2168,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:10"},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../Strings.sol","id":2169,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2533,"sourceUnit":2167,"src":"137:24:10","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSA","contractDependencies":[],"contractKind":"library","documentation":{"id":2170,"nodeType":"StructuredDocumentation","src":"163:205:10","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":2532,"linearizedBaseContracts":[2532],"name":"ECDSA","nameLocation":"377:5:10","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSA.RecoverError","id":2176,"members":[{"id":2171,"name":"NoError","nameLocation":"417:7:10","nodeType":"EnumValue","src":"417:7:10"},{"id":2172,"name":"InvalidSignature","nameLocation":"434:16:10","nodeType":"EnumValue","src":"434:16:10"},{"id":2173,"name":"InvalidSignatureLength","nameLocation":"460:22:10","nodeType":"EnumValue","src":"460:22:10"},{"id":2174,"name":"InvalidSignatureS","nameLocation":"492:17:10","nodeType":"EnumValue","src":"492:17:10"},{"id":2175,"name":"InvalidSignatureV","nameLocation":"519:17:10","nodeType":"EnumValue","src":"519:17:10"}],"name":"RecoverError","nameLocation":"394:12:10","nodeType":"EnumDefinition","src":"389:175:10"},{"body":{"id":2219,"nodeType":"Block","src":"624:457:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"},"id":2185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2182,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2179,"src":"638:5:10","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2183,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2176,"src":"647:12:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2176_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2184,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"660:7:10","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":2171,"src":"647:20:10","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"}},"src":"638:29:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"},"id":2191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2188,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2179,"src":"734:5:10","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2189,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2176,"src":"743:12:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2176_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2190,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"756:16:10","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":2172,"src":"743:29:10","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"}},"src":"734:38:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"},"id":2200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2197,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2179,"src":"843:5:10","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2198,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2176,"src":"852:12:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2176_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2199,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"865:22:10","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":2173,"src":"852:35:10","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"}},"src":"843:44:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"},"id":2209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2206,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2179,"src":"965:5:10","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2207,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2176,"src":"974:12:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2176_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2208,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"987:17:10","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":2174,"src":"974:30:10","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"}},"src":"965:39:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2215,"nodeType":"IfStatement","src":"961:114:10","trueBody":{"id":2214,"nodeType":"Block","src":"1006:69:10","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":2211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1027:36:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":2210,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1020:6:10","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1020:44:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2213,"nodeType":"ExpressionStatement","src":"1020:44:10"}]}},"id":2216,"nodeType":"IfStatement","src":"839:236:10","trueBody":{"id":2205,"nodeType":"Block","src":"889:66:10","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":2202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"910:33:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":2201,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"903:6:10","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"903:41:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2204,"nodeType":"ExpressionStatement","src":"903:41:10"}]}},"id":2217,"nodeType":"IfStatement","src":"730:345:10","trueBody":{"id":2196,"nodeType":"Block","src":"774:59:10","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":2193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"795:26:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":2192,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"788:6:10","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"788:34:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2195,"nodeType":"ExpressionStatement","src":"788:34:10"}]}},"id":2218,"nodeType":"IfStatement","src":"634:441:10","trueBody":{"id":2187,"nodeType":"Block","src":"669:55:10","statements":[{"functionReturnParameters":2181,"id":2186,"nodeType":"Return","src":"683:7:10"}]}}]},"id":2220,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"579:11:10","nodeType":"FunctionDefinition","parameters":{"id":2180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2179,"mutability":"mutable","name":"error","nameLocation":"604:5:10","nodeType":"VariableDeclaration","scope":2220,"src":"591:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2178,"nodeType":"UserDefinedTypeName","pathNode":{"id":2177,"name":"RecoverError","nameLocations":["591:12:10"],"nodeType":"IdentifierPath","referencedDeclaration":2176,"src":"591:12:10"},"referencedDeclaration":2176,"src":"591:12:10","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"590:20:10"},"returnParameters":{"id":2181,"nodeType":"ParameterList","parameters":[],"src":"624:0:10"},"scope":2532,"src":"570:511:10","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":2265,"nodeType":"Block","src":"2249:626:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2233,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2225,"src":"2263:9:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2273:6:10","memberName":"length","nodeType":"MemberAccess","src":"2263:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":2235,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2283:2:10","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2263:22:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2263,"nodeType":"Block","src":"2788:81:10","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":2257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2818:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2256,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2810:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2255,"name":"address","nodeType":"ElementaryTypeName","src":"2810:7:10","typeDescriptions":{}}},"id":2258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2810:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2259,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2176,"src":"2822:12:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2176_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2260,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2835:22:10","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":2173,"src":"2822:35:10","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"}}],"id":2261,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2809:49:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2176_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":2232,"id":2262,"nodeType":"Return","src":"2802:56:10"}]},"id":2264,"nodeType":"IfStatement","src":"2259:610:10","trueBody":{"id":2254,"nodeType":"Block","src":"2287:495:10","statements":[{"assignments":[2238],"declarations":[{"constant":false,"id":2238,"mutability":"mutable","name":"r","nameLocation":"2309:1:10","nodeType":"VariableDeclaration","scope":2254,"src":"2301:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2237,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2301:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2239,"nodeType":"VariableDeclarationStatement","src":"2301:9:10"},{"assignments":[2241],"declarations":[{"constant":false,"id":2241,"mutability":"mutable","name":"s","nameLocation":"2332:1:10","nodeType":"VariableDeclaration","scope":2254,"src":"2324:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2240,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2324:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2242,"nodeType":"VariableDeclarationStatement","src":"2324:9:10"},{"assignments":[2244],"declarations":[{"constant":false,"id":2244,"mutability":"mutable","name":"v","nameLocation":"2353:1:10","nodeType":"VariableDeclaration","scope":2254,"src":"2347:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2243,"name":"uint8","nodeType":"ElementaryTypeName","src":"2347:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":2245,"nodeType":"VariableDeclarationStatement","src":"2347:7:10"},{"AST":{"nodeType":"YulBlock","src":"2555:171:10","statements":[{"nodeType":"YulAssignment","src":"2573:32:10","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2588:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"2599:4:10","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2584:3:10"},"nodeType":"YulFunctionCall","src":"2584:20:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2578:5:10"},"nodeType":"YulFunctionCall","src":"2578:27:10"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2573:1:10"}]},{"nodeType":"YulAssignment","src":"2622:32:10","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2637:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"2648:4:10","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2633:3:10"},"nodeType":"YulFunctionCall","src":"2633:20:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2627:5:10"},"nodeType":"YulFunctionCall","src":"2627:27:10"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"2622:1:10"}]},{"nodeType":"YulAssignment","src":"2671:41:10","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2681:1:10","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2694:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"2705:4:10","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2690:3:10"},"nodeType":"YulFunctionCall","src":"2690:20:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2684:5:10"},"nodeType":"YulFunctionCall","src":"2684:27:10"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"2676:4:10"},"nodeType":"YulFunctionCall","src":"2676:36:10"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"2671:1:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2238,"isOffset":false,"isSlot":false,"src":"2573:1:10","valueSize":1},{"declaration":2241,"isOffset":false,"isSlot":false,"src":"2622:1:10","valueSize":1},{"declaration":2225,"isOffset":false,"isSlot":false,"src":"2588:9:10","valueSize":1},{"declaration":2225,"isOffset":false,"isSlot":false,"src":"2637:9:10","valueSize":1},{"declaration":2225,"isOffset":false,"isSlot":false,"src":"2694:9:10","valueSize":1},{"declaration":2244,"isOffset":false,"isSlot":false,"src":"2671:1:10","valueSize":1}],"id":2246,"nodeType":"InlineAssembly","src":"2546:180:10"},{"expression":{"arguments":[{"id":2248,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"2757:4:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2249,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2244,"src":"2763:1:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2250,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"2766:1:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2251,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2241,"src":"2769:1:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2247,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2266,2340,2434],"referencedDeclaration":2434,"src":"2746:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2176_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":2252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2746:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2176_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":2232,"id":2253,"nodeType":"Return","src":"2739:32:10"}]}}]},"documentation":{"id":2221,"nodeType":"StructuredDocumentation","src":"1087:1053:10","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"},"id":2266,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2154:10:10","nodeType":"FunctionDefinition","parameters":{"id":2226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2223,"mutability":"mutable","name":"hash","nameLocation":"2173:4:10","nodeType":"VariableDeclaration","scope":2266,"src":"2165:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2222,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2165:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2225,"mutability":"mutable","name":"signature","nameLocation":"2192:9:10","nodeType":"VariableDeclaration","scope":2266,"src":"2179:22:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2224,"name":"bytes","nodeType":"ElementaryTypeName","src":"2179:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2164:38:10"},"returnParameters":{"id":2232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2228,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2266,"src":"2226:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2227,"name":"address","nodeType":"ElementaryTypeName","src":"2226:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2231,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2266,"src":"2235:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2230,"nodeType":"UserDefinedTypeName","pathNode":{"id":2229,"name":"RecoverError","nameLocations":["2235:12:10"],"nodeType":"IdentifierPath","referencedDeclaration":2176,"src":"2235:12:10"},"referencedDeclaration":2176,"src":"2235:12:10","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"2225:23:10"},"scope":2532,"src":"2145:730:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2292,"nodeType":"Block","src":"3748:140:10","statements":[{"assignments":[2277,2280],"declarations":[{"constant":false,"id":2277,"mutability":"mutable","name":"recovered","nameLocation":"3767:9:10","nodeType":"VariableDeclaration","scope":2292,"src":"3759:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2276,"name":"address","nodeType":"ElementaryTypeName","src":"3759:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2280,"mutability":"mutable","name":"error","nameLocation":"3791:5:10","nodeType":"VariableDeclaration","scope":2292,"src":"3778:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2279,"nodeType":"UserDefinedTypeName","pathNode":{"id":2278,"name":"RecoverError","nameLocations":["3778:12:10"],"nodeType":"IdentifierPath","referencedDeclaration":2176,"src":"3778:12:10"},"referencedDeclaration":2176,"src":"3778:12:10","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":2285,"initialValue":{"arguments":[{"id":2282,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2269,"src":"3811:4:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2283,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2271,"src":"3817:9:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2281,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2266,2340,2434],"referencedDeclaration":2266,"src":"3800:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$2176_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError)"}},"id":2284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3800:27:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2176_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"3758:69:10"},{"expression":{"arguments":[{"id":2287,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"3849:5:10","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"}],"id":2286,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2220,"src":"3837:11:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$2176_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":2288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3837:18:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2289,"nodeType":"ExpressionStatement","src":"3837:18:10"},{"expression":{"id":2290,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2277,"src":"3872:9:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2275,"id":2291,"nodeType":"Return","src":"3865:16:10"}]},"documentation":{"id":2267,"nodeType":"StructuredDocumentation","src":"2881:775:10","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."},"id":2293,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3670:7:10","nodeType":"FunctionDefinition","parameters":{"id":2272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2269,"mutability":"mutable","name":"hash","nameLocation":"3686:4:10","nodeType":"VariableDeclaration","scope":2293,"src":"3678:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2268,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3678:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2271,"mutability":"mutable","name":"signature","nameLocation":"3705:9:10","nodeType":"VariableDeclaration","scope":2293,"src":"3692:22:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2270,"name":"bytes","nodeType":"ElementaryTypeName","src":"3692:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3677:38:10"},"returnParameters":{"id":2275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2274,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2293,"src":"3739:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2273,"name":"address","nodeType":"ElementaryTypeName","src":"3739:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3738:9:10"},"scope":2532,"src":"3661:227:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2339,"nodeType":"Block","src":"4245:203:10","statements":[{"assignments":[2309],"declarations":[{"constant":false,"id":2309,"mutability":"mutable","name":"s","nameLocation":"4263:1:10","nodeType":"VariableDeclaration","scope":2339,"src":"4255:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2308,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4255:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2316,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2310,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2300,"src":"4267:2:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":2313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4280:66:10","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":2312,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4272:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2311,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4272:7:10","typeDescriptions":{}}},"id":2314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:75:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4267:80:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4255:92:10"},{"assignments":[2318],"declarations":[{"constant":false,"id":2318,"mutability":"mutable","name":"v","nameLocation":"4363:1:10","nodeType":"VariableDeclaration","scope":2339,"src":"4357:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2317,"name":"uint8","nodeType":"ElementaryTypeName","src":"4357:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":2331,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2323,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2300,"src":"4382:2:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2322,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4374:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2321,"name":"uint256","nodeType":"ElementaryTypeName","src":"4374:7:10","typeDescriptions":{}}},"id":2324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4374:11:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":2325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4389:3:10","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4374:18:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2327,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4373:20:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":2328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4396:2:10","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4373:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2320,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4367:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2319,"name":"uint8","nodeType":"ElementaryTypeName","src":"4367:5:10","typeDescriptions":{}}},"id":2330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4367:32:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4357:42:10"},{"expression":{"arguments":[{"id":2333,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2296,"src":"4427:4:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2334,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2318,"src":"4433:1:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2335,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2298,"src":"4436:1:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2336,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2309,"src":"4439:1:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2332,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2266,2340,2434],"referencedDeclaration":2434,"src":"4416:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2176_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":2337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4416:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2176_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":2307,"id":2338,"nodeType":"Return","src":"4409:32:10"}]},"documentation":{"id":2294,"nodeType":"StructuredDocumentation","src":"3894:243:10","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"},"id":2340,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4151:10:10","nodeType":"FunctionDefinition","parameters":{"id":2301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2296,"mutability":"mutable","name":"hash","nameLocation":"4170:4:10","nodeType":"VariableDeclaration","scope":2340,"src":"4162:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2295,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4162:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2298,"mutability":"mutable","name":"r","nameLocation":"4184:1:10","nodeType":"VariableDeclaration","scope":2340,"src":"4176:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2297,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4176:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2300,"mutability":"mutable","name":"vs","nameLocation":"4195:2:10","nodeType":"VariableDeclaration","scope":2340,"src":"4187:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2299,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4187:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4161:37:10"},"returnParameters":{"id":2307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2303,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2340,"src":"4222:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2302,"name":"address","nodeType":"ElementaryTypeName","src":"4222:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2306,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2340,"src":"4231:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2305,"nodeType":"UserDefinedTypeName","pathNode":{"id":2304,"name":"RecoverError","nameLocations":["4231:12:10"],"nodeType":"IdentifierPath","referencedDeclaration":2176,"src":"4231:12:10"},"referencedDeclaration":2176,"src":"4231:12:10","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"4221:23:10"},"scope":2532,"src":"4142:306:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2369,"nodeType":"Block","src":"4699:136:10","statements":[{"assignments":[2353,2356],"declarations":[{"constant":false,"id":2353,"mutability":"mutable","name":"recovered","nameLocation":"4718:9:10","nodeType":"VariableDeclaration","scope":2369,"src":"4710:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2352,"name":"address","nodeType":"ElementaryTypeName","src":"4710:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2356,"mutability":"mutable","name":"error","nameLocation":"4742:5:10","nodeType":"VariableDeclaration","scope":2369,"src":"4729:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2355,"nodeType":"UserDefinedTypeName","pathNode":{"id":2354,"name":"RecoverError","nameLocations":["4729:12:10"],"nodeType":"IdentifierPath","referencedDeclaration":2176,"src":"4729:12:10"},"referencedDeclaration":2176,"src":"4729:12:10","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":2362,"initialValue":{"arguments":[{"id":2358,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2343,"src":"4762:4:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2359,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2345,"src":"4768:1:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2360,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2347,"src":"4771:2:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2357,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2266,2340,2434],"referencedDeclaration":2340,"src":"4751:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2176_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":2361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4751:23:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2176_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"4709:65:10"},{"expression":{"arguments":[{"id":2364,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2356,"src":"4796:5:10","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"}],"id":2363,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2220,"src":"4784:11:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$2176_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":2365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4784:18:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2366,"nodeType":"ExpressionStatement","src":"4784:18:10"},{"expression":{"id":2367,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2353,"src":"4819:9:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2351,"id":2368,"nodeType":"Return","src":"4812:16:10"}]},"documentation":{"id":2341,"nodeType":"StructuredDocumentation","src":"4454:154:10","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"},"id":2370,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4622:7:10","nodeType":"FunctionDefinition","parameters":{"id":2348,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2343,"mutability":"mutable","name":"hash","nameLocation":"4638:4:10","nodeType":"VariableDeclaration","scope":2370,"src":"4630:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2342,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4630:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2345,"mutability":"mutable","name":"r","nameLocation":"4652:1:10","nodeType":"VariableDeclaration","scope":2370,"src":"4644:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2344,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4644:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2347,"mutability":"mutable","name":"vs","nameLocation":"4663:2:10","nodeType":"VariableDeclaration","scope":2370,"src":"4655:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2346,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4655:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4629:37:10"},"returnParameters":{"id":2351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2350,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2370,"src":"4690:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2349,"name":"address","nodeType":"ElementaryTypeName","src":"4690:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4689:9:10"},"scope":2532,"src":"4613:222:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2433,"nodeType":"Block","src":"5120:1345:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2389,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"6016:1:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2388,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6008:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2387,"name":"uint256","nodeType":"ElementaryTypeName","src":"6008:7:10","typeDescriptions":{}}},"id":2390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6008:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":2391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6021:66:10","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6008:79:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2402,"nodeType":"IfStatement","src":"6004:161:10","trueBody":{"id":2401,"nodeType":"Block","src":"6089:76:10","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":2395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6119:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2394,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6111:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2393,"name":"address","nodeType":"ElementaryTypeName","src":"6111:7:10","typeDescriptions":{}}},"id":2396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6111:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2397,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2176,"src":"6123:12:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2176_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2398,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6136:17:10","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":2174,"src":"6123:30:10","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"}}],"id":2399,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6110:44:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2176_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":2386,"id":2400,"nodeType":"Return","src":"6103:51:10"}]}},{"assignments":[2404],"declarations":[{"constant":false,"id":2404,"mutability":"mutable","name":"signer","nameLocation":"6267:6:10","nodeType":"VariableDeclaration","scope":2433,"src":"6259:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2403,"name":"address","nodeType":"ElementaryTypeName","src":"6259:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2411,"initialValue":{"arguments":[{"id":2406,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2373,"src":"6286:4:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2407,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2375,"src":"6292:1:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2408,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2377,"src":"6295:1:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2409,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"6298:1:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2405,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6276:9:10","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":2410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6276:24:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6259:41:10"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2412,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2404,"src":"6314:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6332:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2414,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6324:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2413,"name":"address","nodeType":"ElementaryTypeName","src":"6324:7:10","typeDescriptions":{}}},"id":2416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6324:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6314:20:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2427,"nodeType":"IfStatement","src":"6310:101:10","trueBody":{"id":2426,"nodeType":"Block","src":"6336:75:10","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":2420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6366:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2419,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6358:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2418,"name":"address","nodeType":"ElementaryTypeName","src":"6358:7:10","typeDescriptions":{}}},"id":2421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6358:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2422,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2176,"src":"6370:12:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2176_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2423,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6383:16:10","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":2172,"src":"6370:29:10","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"}}],"id":2424,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6357:43:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2176_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":2386,"id":2425,"nodeType":"Return","src":"6350:50:10"}]}},{"expression":{"components":[{"id":2428,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2404,"src":"6429:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2429,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2176,"src":"6437:12:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2176_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2430,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6450:7:10","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":2171,"src":"6437:20:10","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"}}],"id":2431,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6428:30:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2176_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":2386,"id":2432,"nodeType":"Return","src":"6421:37:10"}]},"documentation":{"id":2371,"nodeType":"StructuredDocumentation","src":"4841:163:10","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"},"id":2434,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5018:10:10","nodeType":"FunctionDefinition","parameters":{"id":2380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2373,"mutability":"mutable","name":"hash","nameLocation":"5037:4:10","nodeType":"VariableDeclaration","scope":2434,"src":"5029:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2372,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5029:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2375,"mutability":"mutable","name":"v","nameLocation":"5049:1:10","nodeType":"VariableDeclaration","scope":2434,"src":"5043:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2374,"name":"uint8","nodeType":"ElementaryTypeName","src":"5043:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2377,"mutability":"mutable","name":"r","nameLocation":"5060:1:10","nodeType":"VariableDeclaration","scope":2434,"src":"5052:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2376,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5052:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2379,"mutability":"mutable","name":"s","nameLocation":"5071:1:10","nodeType":"VariableDeclaration","scope":2434,"src":"5063:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2378,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5063:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5028:45:10"},"returnParameters":{"id":2386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2382,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2434,"src":"5097:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2381,"name":"address","nodeType":"ElementaryTypeName","src":"5097:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2385,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2434,"src":"5106:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2384,"nodeType":"UserDefinedTypeName","pathNode":{"id":2383,"name":"RecoverError","nameLocations":["5106:12:10"],"nodeType":"IdentifierPath","referencedDeclaration":2176,"src":"5106:12:10"},"referencedDeclaration":2176,"src":"5106:12:10","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"5096:23:10"},"scope":2532,"src":"5009:1456:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2466,"nodeType":"Block","src":"6692:138:10","statements":[{"assignments":[2449,2452],"declarations":[{"constant":false,"id":2449,"mutability":"mutable","name":"recovered","nameLocation":"6711:9:10","nodeType":"VariableDeclaration","scope":2466,"src":"6703:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2448,"name":"address","nodeType":"ElementaryTypeName","src":"6703:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2452,"mutability":"mutable","name":"error","nameLocation":"6735:5:10","nodeType":"VariableDeclaration","scope":2466,"src":"6722:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2451,"nodeType":"UserDefinedTypeName","pathNode":{"id":2450,"name":"RecoverError","nameLocations":["6722:12:10"],"nodeType":"IdentifierPath","referencedDeclaration":2176,"src":"6722:12:10"},"referencedDeclaration":2176,"src":"6722:12:10","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":2459,"initialValue":{"arguments":[{"id":2454,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"6755:4:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2455,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"6761:1:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2456,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"6764:1:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2457,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2443,"src":"6767:1:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2453,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2266,2340,2434],"referencedDeclaration":2434,"src":"6744:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2176_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":2458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6744:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2176_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"6702:67:10"},{"expression":{"arguments":[{"id":2461,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2452,"src":"6791:5:10","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$2176","typeString":"enum ECDSA.RecoverError"}],"id":2460,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2220,"src":"6779:11:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$2176_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":2462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6779:18:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2463,"nodeType":"ExpressionStatement","src":"6779:18:10"},{"expression":{"id":2464,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2449,"src":"6814:9:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2447,"id":2465,"nodeType":"Return","src":"6807:16:10"}]},"documentation":{"id":2435,"nodeType":"StructuredDocumentation","src":"6471:122:10","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":2467,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6607:7:10","nodeType":"FunctionDefinition","parameters":{"id":2444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2437,"mutability":"mutable","name":"hash","nameLocation":"6623:4:10","nodeType":"VariableDeclaration","scope":2467,"src":"6615:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2436,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6615:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2439,"mutability":"mutable","name":"v","nameLocation":"6635:1:10","nodeType":"VariableDeclaration","scope":2467,"src":"6629:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2438,"name":"uint8","nodeType":"ElementaryTypeName","src":"6629:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2441,"mutability":"mutable","name":"r","nameLocation":"6646:1:10","nodeType":"VariableDeclaration","scope":2467,"src":"6638:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2440,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6638:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2443,"mutability":"mutable","name":"s","nameLocation":"6657:1:10","nodeType":"VariableDeclaration","scope":2467,"src":"6649:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2442,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6649:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6614:45:10"},"returnParameters":{"id":2447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2446,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2467,"src":"6683:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2445,"name":"address","nodeType":"ElementaryTypeName","src":"6683:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6682:9:10"},"scope":2532,"src":"6598:232:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2476,"nodeType":"Block","src":"7206:310:10","statements":[{"AST":{"nodeType":"YulBlock","src":"7362:148:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7383:4:10","type":"","value":"0x00"},{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","kind":"string","nodeType":"YulLiteral","src":"7389:34:10","type":"","value":"\u0019Ethereum Signed Message:\n32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7376:6:10"},"nodeType":"YulFunctionCall","src":"7376:48:10"},"nodeType":"YulExpressionStatement","src":"7376:48:10"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7444:4:10","type":"","value":"0x1c"},{"name":"hash","nodeType":"YulIdentifier","src":"7450:4:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7437:6:10"},"nodeType":"YulFunctionCall","src":"7437:18:10"},"nodeType":"YulExpressionStatement","src":"7437:18:10"},{"nodeType":"YulAssignment","src":"7468:32:10","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7489:4:10","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"7495:4:10","type":"","value":"0x3c"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"7479:9:10"},"nodeType":"YulFunctionCall","src":"7479:21:10"},"variableNames":[{"name":"message","nodeType":"YulIdentifier","src":"7468:7:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2470,"isOffset":false,"isSlot":false,"src":"7450:4:10","valueSize":1},{"declaration":2473,"isOffset":false,"isSlot":false,"src":"7468:7:10","valueSize":1}],"id":2475,"nodeType":"InlineAssembly","src":"7353:157:10"}]},"documentation":{"id":2468,"nodeType":"StructuredDocumentation","src":"6836:279:10","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":2477,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7129:22:10","nodeType":"FunctionDefinition","parameters":{"id":2471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2470,"mutability":"mutable","name":"hash","nameLocation":"7160:4:10","nodeType":"VariableDeclaration","scope":2477,"src":"7152:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2469,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7152:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7151:14:10"},"returnParameters":{"id":2474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2473,"mutability":"mutable","name":"message","nameLocation":"7197:7:10","nodeType":"VariableDeclaration","scope":2477,"src":"7189:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2472,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7189:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7188:17:10"},"scope":2532,"src":"7120:396:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2498,"nodeType":"Block","src":"7881:116:10","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":2488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7925:32:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"expression":{"id":2491,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2480,"src":"7976:1:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7978:6:10","memberName":"length","nodeType":"MemberAccess","src":"7976:8:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2489,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"7959:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$2166_$","typeString":"type(library Strings)"}},"id":2490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7967:8:10","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1996,"src":"7959:16:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":2493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7959:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2494,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2480,"src":"7987:1:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2486,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7908:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2487,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7912:12:10","memberName":"encodePacked","nodeType":"MemberAccess","src":"7908:16:10","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7908:81:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2485,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7898:9:10","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7898:92:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2484,"id":2497,"nodeType":"Return","src":"7891:99:10"}]},"documentation":{"id":2478,"nodeType":"StructuredDocumentation","src":"7522:274:10","text":" @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":2499,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7810:22:10","nodeType":"FunctionDefinition","parameters":{"id":2481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2480,"mutability":"mutable","name":"s","nameLocation":"7846:1:10","nodeType":"VariableDeclaration","scope":2499,"src":"7833:14:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2479,"name":"bytes","nodeType":"ElementaryTypeName","src":"7833:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7832:16:10"},"returnParameters":{"id":2484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2483,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2499,"src":"7872:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2482,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7872:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7871:9:10"},"scope":2532,"src":"7801:196:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2510,"nodeType":"Block","src":"8443:290:10","statements":[{"AST":{"nodeType":"YulBlock","src":"8505:222:10","statements":[{"nodeType":"YulVariableDeclaration","src":"8519:22:10","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8536:4:10","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8530:5:10"},"nodeType":"YulFunctionCall","src":"8530:11:10"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"8523:3:10","type":""}]},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8561:3:10"},{"hexValue":"1901","kind":"string","nodeType":"YulLiteral","src":"8566:10:10","type":"","value":"\u0019\u0001"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8554:6:10"},"nodeType":"YulFunctionCall","src":"8554:23:10"},"nodeType":"YulExpressionStatement","src":"8554:23:10"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8601:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"8606:4:10","type":"","value":"0x02"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8597:3:10"},"nodeType":"YulFunctionCall","src":"8597:14:10"},{"name":"domainSeparator","nodeType":"YulIdentifier","src":"8613:15:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8590:6:10"},"nodeType":"YulFunctionCall","src":"8590:39:10"},"nodeType":"YulExpressionStatement","src":"8590:39:10"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8653:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"8658:4:10","type":"","value":"0x22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8649:3:10"},"nodeType":"YulFunctionCall","src":"8649:14:10"},{"name":"structHash","nodeType":"YulIdentifier","src":"8665:10:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8642:6:10"},"nodeType":"YulFunctionCall","src":"8642:34:10"},"nodeType":"YulExpressionStatement","src":"8642:34:10"},{"nodeType":"YulAssignment","src":"8689:28:10","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8707:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"8712:4:10","type":"","value":"0x42"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"8697:9:10"},"nodeType":"YulFunctionCall","src":"8697:20:10"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"8689:4:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2507,"isOffset":false,"isSlot":false,"src":"8689:4:10","valueSize":1},{"declaration":2502,"isOffset":false,"isSlot":false,"src":"8613:15:10","valueSize":1},{"declaration":2504,"isOffset":false,"isSlot":false,"src":"8665:10:10","valueSize":1}],"id":2509,"nodeType":"InlineAssembly","src":"8496:231:10"}]},"documentation":{"id":2500,"nodeType":"StructuredDocumentation","src":"8003:328:10","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"id":2511,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"8345:15:10","nodeType":"FunctionDefinition","parameters":{"id":2505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2502,"mutability":"mutable","name":"domainSeparator","nameLocation":"8369:15:10","nodeType":"VariableDeclaration","scope":2511,"src":"8361:23:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2501,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8361:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2504,"mutability":"mutable","name":"structHash","nameLocation":"8394:10:10","nodeType":"VariableDeclaration","scope":2511,"src":"8386:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2503,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8386:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8360:45:10"},"returnParameters":{"id":2508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2507,"mutability":"mutable","name":"data","nameLocation":"8437:4:10","nodeType":"VariableDeclaration","scope":2511,"src":"8429:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2506,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8429:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8428:14:10"},"scope":2532,"src":"8336:397:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2530,"nodeType":"Block","src":"9048:80:10","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1900","id":2524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9092:10:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},"value":"\u0019\u0000"},{"id":2525,"name":"validator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2514,"src":"9104:9:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2526,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2516,"src":"9115:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2522,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9075:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2523,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9079:12:10","memberName":"encodePacked","nodeType":"MemberAccess","src":"9075:16:10","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9075:45:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2521,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9065:9:10","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9065:56:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2520,"id":2529,"nodeType":"Return","src":"9058:63:10"}]},"documentation":{"id":2512,"nodeType":"StructuredDocumentation","src":"8739:193:10","text":" @dev Returns an Ethereum Signed Data with intended validator, created from a\n `validator` and `data` according to the version 0 of EIP-191.\n See {recover}."},"id":2531,"implemented":true,"kind":"function","modifiers":[],"name":"toDataWithIntendedValidatorHash","nameLocation":"8946:31:10","nodeType":"FunctionDefinition","parameters":{"id":2517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2514,"mutability":"mutable","name":"validator","nameLocation":"8986:9:10","nodeType":"VariableDeclaration","scope":2531,"src":"8978:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2513,"name":"address","nodeType":"ElementaryTypeName","src":"8978:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2516,"mutability":"mutable","name":"data","nameLocation":"9010:4:10","nodeType":"VariableDeclaration","scope":2531,"src":"8997:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2515,"name":"bytes","nodeType":"ElementaryTypeName","src":"8997:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8977:38:10"},"returnParameters":{"id":2520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2519,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2531,"src":"9039:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2518,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9039:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9038:9:10"},"scope":2532,"src":"8937:191:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2533,"src":"369:8761:10","usedErrors":[],"usedEvents":[]}],"src":"112:9019:10"},"id":10},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[2556],"IERC165":[2568]},"id":2557,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2534,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:11"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":2535,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2557,"sourceUnit":2569,"src":"124:23:11","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2537,"name":"IERC165","nameLocations":["754:7:11"],"nodeType":"IdentifierPath","referencedDeclaration":2568,"src":"754:7:11"},"id":2538,"nodeType":"InheritanceSpecifier","src":"754:7:11"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":2536,"nodeType":"StructuredDocumentation","src":"149:576:11","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":2556,"linearizedBaseContracts":[2556,2568],"name":"ERC165","nameLocation":"744:6:11","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[2567],"body":{"id":2554,"nodeType":"Block","src":"920:64:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2547,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2541,"src":"937:11:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2549,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"957:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$2568_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$2568_$","typeString":"type(contract IERC165)"}],"id":2548,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"952:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"952:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$2568","typeString":"type(contract IERC165)"}},"id":2551,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"966:11:11","memberName":"interfaceId","nodeType":"MemberAccess","src":"952:25:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"937:40:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2546,"id":2553,"nodeType":"Return","src":"930:47:11"}]},"documentation":{"id":2539,"nodeType":"StructuredDocumentation","src":"768:56:11","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":2555,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"838:17:11","nodeType":"FunctionDefinition","overrides":{"id":2543,"nodeType":"OverrideSpecifier","overrides":[],"src":"896:8:11"},"parameters":{"id":2542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2541,"mutability":"mutable","name":"interfaceId","nameLocation":"863:11:11","nodeType":"VariableDeclaration","scope":2555,"src":"856:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2540,"name":"bytes4","nodeType":"ElementaryTypeName","src":"856:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"855:20:11"},"returnParameters":{"id":2546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2545,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2555,"src":"914:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2544,"name":"bool","nodeType":"ElementaryTypeName","src":"914:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"913:6:11"},"scope":2556,"src":"829:155:11","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":2557,"src":"726:260:11","usedErrors":[],"usedEvents":[]}],"src":"99:888:11"},"id":11},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[2568]},"id":2569,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2558,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:12"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":2559,"nodeType":"StructuredDocumentation","src":"125:279:12","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":2568,"linearizedBaseContracts":[2568],"name":"IERC165","nameLocation":"415:7:12","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2560,"nodeType":"StructuredDocumentation","src":"429:340:12","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":2567,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"783:17:12","nodeType":"FunctionDefinition","parameters":{"id":2563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2562,"mutability":"mutable","name":"interfaceId","nameLocation":"808:11:12","nodeType":"VariableDeclaration","scope":2567,"src":"801:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2561,"name":"bytes4","nodeType":"ElementaryTypeName","src":"801:6:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"800:20:12"},"returnParameters":{"id":2566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2565,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2567,"src":"844:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2564,"name":"bool","nodeType":"ElementaryTypeName","src":"844:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"843:6:12"},"scope":2568,"src":"774:76:12","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2569,"src":"405:447:12","usedErrors":[],"usedEvents":[]}],"src":"100:753:12"},"id":12},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[3434]},"id":3435,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2570,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:13"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":2571,"nodeType":"StructuredDocumentation","src":"128:73:13","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":3434,"linearizedBaseContracts":[3434],"name":"Math","nameLocation":"210:4:13","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":2575,"members":[{"id":2572,"name":"Down","nameLocation":"245:4:13","nodeType":"EnumValue","src":"245:4:13"},{"id":2573,"name":"Up","nameLocation":"287:2:13","nodeType":"EnumValue","src":"287:2:13"},{"id":2574,"name":"Zero","nameLocation":"318:4:13","nodeType":"EnumValue","src":"318:4:13"}],"name":"Rounding","nameLocation":"226:8:13","nodeType":"EnumDefinition","src":"221:122:13"},{"body":{"id":2592,"nodeType":"Block","src":"480:37:13","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2585,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"497:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2586,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2580,"src":"501:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2589,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2580,"src":"509:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:13","trueExpression":{"id":2588,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"505:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2584,"id":2591,"nodeType":"Return","src":"490:20:13"}]},"documentation":{"id":2576,"nodeType":"StructuredDocumentation","src":"349:59:13","text":" @dev Returns the largest of two numbers."},"id":2593,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:13","nodeType":"FunctionDefinition","parameters":{"id":2581,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2578,"mutability":"mutable","name":"a","nameLocation":"434:1:13","nodeType":"VariableDeclaration","scope":2593,"src":"426:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2577,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2580,"mutability":"mutable","name":"b","nameLocation":"445:1:13","nodeType":"VariableDeclaration","scope":2593,"src":"437:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2579,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:13"},"returnParameters":{"id":2584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2583,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2593,"src":"471:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2582,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:13"},"scope":3434,"src":"413:104:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2610,"nodeType":"Block","src":"655:37:13","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2603,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2596,"src":"672:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2604,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2598,"src":"676:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2607,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2598,"src":"684:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:13","trueExpression":{"id":2606,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2596,"src":"680:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2602,"id":2609,"nodeType":"Return","src":"665:20:13"}]},"documentation":{"id":2594,"nodeType":"StructuredDocumentation","src":"523:60:13","text":" @dev Returns the smallest of two numbers."},"id":2611,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:13","nodeType":"FunctionDefinition","parameters":{"id":2599,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2596,"mutability":"mutable","name":"a","nameLocation":"609:1:13","nodeType":"VariableDeclaration","scope":2611,"src":"601:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2595,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2598,"mutability":"mutable","name":"b","nameLocation":"620:1:13","nodeType":"VariableDeclaration","scope":2611,"src":"612:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2597,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:13"},"returnParameters":{"id":2602,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2601,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2611,"src":"646:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2600,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:13"},"scope":3434,"src":"588:104:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2633,"nodeType":"Block","src":"876:82:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2621,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2614,"src":"931:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2622,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2616,"src":"935:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2624,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2625,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2614,"src":"941:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2626,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2616,"src":"945:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2628,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":2629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2620,"id":2632,"nodeType":"Return","src":"923:28:13"}]},"documentation":{"id":2612,"nodeType":"StructuredDocumentation","src":"698:102:13","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":2634,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:13","nodeType":"FunctionDefinition","parameters":{"id":2617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2614,"mutability":"mutable","name":"a","nameLocation":"830:1:13","nodeType":"VariableDeclaration","scope":2634,"src":"822:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2613,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2616,"mutability":"mutable","name":"b","nameLocation":"841:1:13","nodeType":"VariableDeclaration","scope":2634,"src":"833:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2615,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:13"},"returnParameters":{"id":2620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2619,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2634,"src":"867:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2618,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:13"},"scope":3434,"src":"805:153:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2658,"nodeType":"Block","src":"1228:123:13","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2644,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"1316:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2648,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"1330:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2651,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2652,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"1339:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:13","trueExpression":{"hexValue":"30","id":2647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2643,"id":2657,"nodeType":"Return","src":"1309:35:13"}]},"documentation":{"id":2635,"nodeType":"StructuredDocumentation","src":"964:188:13","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":2659,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:13","nodeType":"FunctionDefinition","parameters":{"id":2640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2637,"mutability":"mutable","name":"a","nameLocation":"1182:1:13","nodeType":"VariableDeclaration","scope":2659,"src":"1174:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2636,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2639,"mutability":"mutable","name":"b","nameLocation":"1193:1:13","nodeType":"VariableDeclaration","scope":2659,"src":"1185:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2638,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:13"},"returnParameters":{"id":2643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2642,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2659,"src":"1219:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2641,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:13"},"scope":3434,"src":"1157:194:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2781,"nodeType":"Block","src":"1765:4115:13","statements":[{"id":2780,"nodeType":"UncheckedBlock","src":"1775:4099:13","statements":[{"assignments":[2672],"declarations":[{"constant":false,"id":2672,"mutability":"mutable","name":"prod0","nameLocation":"2104:5:13","nodeType":"VariableDeclaration","scope":2780,"src":"2096:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2671,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2673,"nodeType":"VariableDeclarationStatement","src":"2096:13:13"},{"assignments":[2675],"declarations":[{"constant":false,"id":2675,"mutability":"mutable","name":"prod1","nameLocation":"2176:5:13","nodeType":"VariableDeclaration","scope":2780,"src":"2168:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2674,"name":"uint256","nodeType":"ElementaryTypeName","src":"2168:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2676,"nodeType":"VariableDeclarationStatement","src":"2168:13:13"},{"AST":{"nodeType":"YulBlock","src":"2248:157:13","statements":[{"nodeType":"YulVariableDeclaration","src":"2266:30:13","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2283:1:13"},{"name":"y","nodeType":"YulIdentifier","src":"2286:1:13"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2293:1:13","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2289:3:13"},"nodeType":"YulFunctionCall","src":"2289:6:13"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2276:6:13"},"nodeType":"YulFunctionCall","src":"2276:20:13"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2270:2:13","type":""}]},{"nodeType":"YulAssignment","src":"2313:18:13","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2326:1:13"},{"name":"y","nodeType":"YulIdentifier","src":"2329:1:13"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2322:3:13"},"nodeType":"YulFunctionCall","src":"2322:9:13"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2313:5:13"}]},{"nodeType":"YulAssignment","src":"2348:43:13","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2365:2:13"},{"name":"prod0","nodeType":"YulIdentifier","src":"2369:5:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2361:3:13"},"nodeType":"YulFunctionCall","src":"2361:14:13"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2380:2:13"},{"name":"prod0","nodeType":"YulIdentifier","src":"2384:5:13"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2377:2:13"},"nodeType":"YulFunctionCall","src":"2377:13:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2357:3:13"},"nodeType":"YulFunctionCall","src":"2357:34:13"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2348:5:13"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2672,"isOffset":false,"isSlot":false,"src":"2313:5:13","valueSize":1},{"declaration":2672,"isOffset":false,"isSlot":false,"src":"2369:5:13","valueSize":1},{"declaration":2672,"isOffset":false,"isSlot":false,"src":"2384:5:13","valueSize":1},{"declaration":2675,"isOffset":false,"isSlot":false,"src":"2348:5:13","valueSize":1},{"declaration":2662,"isOffset":false,"isSlot":false,"src":"2283:1:13","valueSize":1},{"declaration":2662,"isOffset":false,"isSlot":false,"src":"2326:1:13","valueSize":1},{"declaration":2664,"isOffset":false,"isSlot":false,"src":"2286:1:13","valueSize":1},{"declaration":2664,"isOffset":false,"isSlot":false,"src":"2329:1:13","valueSize":1}],"id":2677,"nodeType":"InlineAssembly","src":"2239:166:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2678,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2675,"src":"2486:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2495:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2486:10:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2686,"nodeType":"IfStatement","src":"2482:368:13","trueBody":{"id":2685,"nodeType":"Block","src":"2498:352:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2681,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2672,"src":"2816:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2682,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"2824:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2816:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2670,"id":2684,"nodeType":"Return","src":"2809:26:13"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2688,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"2960:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2689,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2675,"src":"2974:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2960:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":2691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2981:23:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":2687,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2952:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2952:53:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2693,"nodeType":"ExpressionStatement","src":"2952:53:13"},{"assignments":[2695],"declarations":[{"constant":false,"id":2695,"mutability":"mutable","name":"remainder","nameLocation":"3269:9:13","nodeType":"VariableDeclaration","scope":2780,"src":"3261:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2694,"name":"uint256","nodeType":"ElementaryTypeName","src":"3261:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2696,"nodeType":"VariableDeclarationStatement","src":"3261:17:13"},{"AST":{"nodeType":"YulBlock","src":"3301:291:13","statements":[{"nodeType":"YulAssignment","src":"3370:38:13","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3390:1:13"},{"name":"y","nodeType":"YulIdentifier","src":"3393:1:13"},{"name":"denominator","nodeType":"YulIdentifier","src":"3396:11:13"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3383:6:13"},"nodeType":"YulFunctionCall","src":"3383:25:13"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3370:9:13"}]},{"nodeType":"YulAssignment","src":"3490:41:13","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3503:5:13"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3513:9:13"},{"name":"prod0","nodeType":"YulIdentifier","src":"3524:5:13"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3510:2:13"},"nodeType":"YulFunctionCall","src":"3510:20:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3499:3:13"},"nodeType":"YulFunctionCall","src":"3499:32:13"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3490:5:13"}]},{"nodeType":"YulAssignment","src":"3548:30:13","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3561:5:13"},{"name":"remainder","nodeType":"YulIdentifier","src":"3568:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3557:3:13"},"nodeType":"YulFunctionCall","src":"3557:21:13"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3548:5:13"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2666,"isOffset":false,"isSlot":false,"src":"3396:11:13","valueSize":1},{"declaration":2672,"isOffset":false,"isSlot":false,"src":"3524:5:13","valueSize":1},{"declaration":2672,"isOffset":false,"isSlot":false,"src":"3548:5:13","valueSize":1},{"declaration":2672,"isOffset":false,"isSlot":false,"src":"3561:5:13","valueSize":1},{"declaration":2675,"isOffset":false,"isSlot":false,"src":"3490:5:13","valueSize":1},{"declaration":2675,"isOffset":false,"isSlot":false,"src":"3503:5:13","valueSize":1},{"declaration":2695,"isOffset":false,"isSlot":false,"src":"3370:9:13","valueSize":1},{"declaration":2695,"isOffset":false,"isSlot":false,"src":"3513:9:13","valueSize":1},{"declaration":2695,"isOffset":false,"isSlot":false,"src":"3568:9:13","valueSize":1},{"declaration":2662,"isOffset":false,"isSlot":false,"src":"3390:1:13","valueSize":1},{"declaration":2664,"isOffset":false,"isSlot":false,"src":"3393:1:13","valueSize":1}],"id":2697,"nodeType":"InlineAssembly","src":"3292:300:13"},{"assignments":[2699],"declarations":[{"constant":false,"id":2699,"mutability":"mutable","name":"twos","nameLocation":"3907:4:13","nodeType":"VariableDeclaration","scope":2780,"src":"3899:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2698,"name":"uint256","nodeType":"ElementaryTypeName","src":"3899:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2707,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2700,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"3914:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3929:12:13","subExpression":{"id":2701,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"3930:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3944:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3929:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2705,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3928:18:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3914:32:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3899:47:13"},{"AST":{"nodeType":"YulBlock","src":"3969:362:13","statements":[{"nodeType":"YulAssignment","src":"4034:37:13","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"4053:11:13"},{"name":"twos","nodeType":"YulIdentifier","src":"4066:4:13"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4049:3:13"},"nodeType":"YulFunctionCall","src":"4049:22:13"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"4034:11:13"}]},{"nodeType":"YulAssignment","src":"4138:25:13","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4151:5:13"},{"name":"twos","nodeType":"YulIdentifier","src":"4158:4:13"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4147:3:13"},"nodeType":"YulFunctionCall","src":"4147:16:13"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"4138:5:13"}]},{"nodeType":"YulAssignment","src":"4278:39:13","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4298:1:13","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4301:4:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4294:3:13"},"nodeType":"YulFunctionCall","src":"4294:12:13"},{"name":"twos","nodeType":"YulIdentifier","src":"4308:4:13"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4290:3:13"},"nodeType":"YulFunctionCall","src":"4290:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"4315:1:13","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4286:3:13"},"nodeType":"YulFunctionCall","src":"4286:31:13"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4278:4:13"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2666,"isOffset":false,"isSlot":false,"src":"4034:11:13","valueSize":1},{"declaration":2666,"isOffset":false,"isSlot":false,"src":"4053:11:13","valueSize":1},{"declaration":2672,"isOffset":false,"isSlot":false,"src":"4138:5:13","valueSize":1},{"declaration":2672,"isOffset":false,"isSlot":false,"src":"4151:5:13","valueSize":1},{"declaration":2699,"isOffset":false,"isSlot":false,"src":"4066:4:13","valueSize":1},{"declaration":2699,"isOffset":false,"isSlot":false,"src":"4158:4:13","valueSize":1},{"declaration":2699,"isOffset":false,"isSlot":false,"src":"4278:4:13","valueSize":1},{"declaration":2699,"isOffset":false,"isSlot":false,"src":"4301:4:13","valueSize":1},{"declaration":2699,"isOffset":false,"isSlot":false,"src":"4308:4:13","valueSize":1}],"id":2708,"nodeType":"InlineAssembly","src":"3960:371:13"},{"expression":{"id":2713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2709,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2672,"src":"4397:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2710,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2675,"src":"4406:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2711,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2699,"src":"4414:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4406:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4397:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2714,"nodeType":"ExpressionStatement","src":"4397:21:13"},{"assignments":[2716],"declarations":[{"constant":false,"id":2716,"mutability":"mutable","name":"inverse","nameLocation":"4744:7:13","nodeType":"VariableDeclaration","scope":2780,"src":"4736:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2715,"name":"uint256","nodeType":"ElementaryTypeName","src":"4736:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2723,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":2717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4755:1:13","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2718,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"4759:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4755:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2720,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4754:17:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":2721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4774:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4754:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4736:39:13"},{"expression":{"id":2730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2724,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"4992:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5003:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2726,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"5007:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2727,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"5021:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5007:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4992:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2731,"nodeType":"ExpressionStatement","src":"4992:36:13"},{"expression":{"id":2738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2732,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"5061:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5072:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2734,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"5076:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2735,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"5090:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5061:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2739,"nodeType":"ExpressionStatement","src":"5061:36:13"},{"expression":{"id":2746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2740,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"5131:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5142:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2742,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"5146:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2743,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"5160:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5146:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5131:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2747,"nodeType":"ExpressionStatement","src":"5131:36:13"},{"expression":{"id":2754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2748,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"5201:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5212:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2750,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"5216:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2751,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"5230:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5216:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5201:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2755,"nodeType":"ExpressionStatement","src":"5201:36:13"},{"expression":{"id":2762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2756,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"5271:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5282:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2758,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"5286:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2759,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"5300:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5286:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5271:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2763,"nodeType":"ExpressionStatement","src":"5271:36:13"},{"expression":{"id":2770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2764,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"5342:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5353:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2766,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"5357:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2767,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"5371:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5357:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5342:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2771,"nodeType":"ExpressionStatement","src":"5342:36:13"},{"expression":{"id":2776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2772,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2669,"src":"5812:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2773,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2672,"src":"5821:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2774,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"5829:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5821:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5812:24:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2777,"nodeType":"ExpressionStatement","src":"5812:24:13"},{"expression":{"id":2778,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2669,"src":"5857:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2670,"id":2779,"nodeType":"Return","src":"5850:13:13"}]}]},"documentation":{"id":2660,"nodeType":"StructuredDocumentation","src":"1357:305:13","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":2782,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:13","nodeType":"FunctionDefinition","parameters":{"id":2667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2662,"mutability":"mutable","name":"x","nameLocation":"1691:1:13","nodeType":"VariableDeclaration","scope":2782,"src":"1683:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2661,"name":"uint256","nodeType":"ElementaryTypeName","src":"1683:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2664,"mutability":"mutable","name":"y","nameLocation":"1702:1:13","nodeType":"VariableDeclaration","scope":2782,"src":"1694:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2663,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2666,"mutability":"mutable","name":"denominator","nameLocation":"1713:11:13","nodeType":"VariableDeclaration","scope":2782,"src":"1705:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2665,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:43:13"},"returnParameters":{"id":2670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2669,"mutability":"mutable","name":"result","nameLocation":"1757:6:13","nodeType":"VariableDeclaration","scope":2782,"src":"1749:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2668,"name":"uint256","nodeType":"ElementaryTypeName","src":"1749:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1748:16:13"},"scope":3434,"src":"1667:4213:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2825,"nodeType":"Block","src":"6122:189:13","statements":[{"assignments":[2798],"declarations":[{"constant":false,"id":2798,"mutability":"mutable","name":"result","nameLocation":"6140:6:13","nodeType":"VariableDeclaration","scope":2825,"src":"6132:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2797,"name":"uint256","nodeType":"ElementaryTypeName","src":"6132:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2804,"initialValue":{"arguments":[{"id":2800,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"6156:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2801,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2787,"src":"6159:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2802,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2789,"src":"6162:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2799,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2782,2826],"referencedDeclaration":2782,"src":"6149:6:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6149:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6132:42:13"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2575","typeString":"enum Math.Rounding"},"id":2808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2805,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2792,"src":"6188:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2575","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2806,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2575,"src":"6200:8:13","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2575_$","typeString":"type(enum Math.Rounding)"}},"id":2807,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6209:2:13","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"6200:11:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2575","typeString":"enum Math.Rounding"}},"src":"6188:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2810,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"6222:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2811,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2787,"src":"6225:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2812,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2789,"src":"6228:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2809,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6215:6:13","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2813,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6215:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6243:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6215:29:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6188:56:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2822,"nodeType":"IfStatement","src":"6184:98:13","trueBody":{"id":2821,"nodeType":"Block","src":"6246:36:13","statements":[{"expression":{"id":2819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2817,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2798,"src":"6260:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6270:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6260:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2820,"nodeType":"ExpressionStatement","src":"6260:11:13"}]}},{"expression":{"id":2823,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2798,"src":"6298:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2796,"id":2824,"nodeType":"Return","src":"6291:13:13"}]},"documentation":{"id":2783,"nodeType":"StructuredDocumentation","src":"5886:121:13","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2826,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6021:6:13","nodeType":"FunctionDefinition","parameters":{"id":2793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2785,"mutability":"mutable","name":"x","nameLocation":"6036:1:13","nodeType":"VariableDeclaration","scope":2826,"src":"6028:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2784,"name":"uint256","nodeType":"ElementaryTypeName","src":"6028:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2787,"mutability":"mutable","name":"y","nameLocation":"6047:1:13","nodeType":"VariableDeclaration","scope":2826,"src":"6039:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2786,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2789,"mutability":"mutable","name":"denominator","nameLocation":"6058:11:13","nodeType":"VariableDeclaration","scope":2826,"src":"6050:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2788,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2792,"mutability":"mutable","name":"rounding","nameLocation":"6080:8:13","nodeType":"VariableDeclaration","scope":2826,"src":"6071:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2575","typeString":"enum Math.Rounding"},"typeName":{"id":2791,"nodeType":"UserDefinedTypeName","pathNode":{"id":2790,"name":"Rounding","nameLocations":["6071:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":2575,"src":"6071:8:13"},"referencedDeclaration":2575,"src":"6071:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2575","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"6027:62:13"},"returnParameters":{"id":2796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2795,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2826,"src":"6113:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2794,"name":"uint256","nodeType":"ElementaryTypeName","src":"6113:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6112:9:13"},"scope":3434,"src":"6012:299:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2937,"nodeType":"Block","src":"6587:1585:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2834,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2829,"src":"6601:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6606:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6601:6:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2840,"nodeType":"IfStatement","src":"6597:45:13","trueBody":{"id":2839,"nodeType":"Block","src":"6609:33:13","statements":[{"expression":{"hexValue":"30","id":2837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6630:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2833,"id":2838,"nodeType":"Return","src":"6623:8:13"}]}},{"assignments":[2842],"declarations":[{"constant":false,"id":2842,"mutability":"mutable","name":"result","nameLocation":"7329:6:13","nodeType":"VariableDeclaration","scope":2937,"src":"7321:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2841,"name":"uint256","nodeType":"ElementaryTypeName","src":"7321:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2851,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7338:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2845,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2829,"src":"7349:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2844,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3106,3142],"referencedDeclaration":3106,"src":"7344:4:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7344:7:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7355:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7344:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2849,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7343:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7338:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7321:36:13"},{"id":2936,"nodeType":"UncheckedBlock","src":"7758:408:13","statements":[{"expression":{"id":2861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2852,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"7782:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2853,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"7792:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2854,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2829,"src":"7801:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2855,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"7805:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7801:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7792:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2858,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7791:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7816:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7791:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7782:35:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2862,"nodeType":"ExpressionStatement","src":"7782:35:13"},{"expression":{"id":2872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2863,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"7831:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2864,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"7841:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2865,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2829,"src":"7850:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2866,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"7854:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7850:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7841:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2869,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7840:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2870,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7865:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7840:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7831:35:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2873,"nodeType":"ExpressionStatement","src":"7831:35:13"},{"expression":{"id":2883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2874,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"7880:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2875,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"7890:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2876,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2829,"src":"7899:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2877,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"7903:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7899:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7890:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2880,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7889:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7914:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7889:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7880:35:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2884,"nodeType":"ExpressionStatement","src":"7880:35:13"},{"expression":{"id":2894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2885,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"7929:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2886,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"7939:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2887,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2829,"src":"7948:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2888,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"7952:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7948:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7939:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2891,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7938:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7938:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7929:35:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2895,"nodeType":"ExpressionStatement","src":"7929:35:13"},{"expression":{"id":2905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2896,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"7978:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2897,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"7988:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2898,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2829,"src":"7997:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2899,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"8001:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7997:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7988:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2902,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7987:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8012:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7987:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7978:35:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2906,"nodeType":"ExpressionStatement","src":"7978:35:13"},{"expression":{"id":2916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2907,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"8027:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2908,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"8037:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2909,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2829,"src":"8046:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2910,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"8050:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8046:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8037:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2913,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8036:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8061:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8036:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8027:35:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2917,"nodeType":"ExpressionStatement","src":"8027:35:13"},{"expression":{"id":2927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2918,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"8076:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2919,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"8086:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2920,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2829,"src":"8095:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2921,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"8099:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8095:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8086:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2924,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8085:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8110:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8085:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8076:35:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2928,"nodeType":"ExpressionStatement","src":"8076:35:13"},{"expression":{"arguments":[{"id":2930,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"8136:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2931,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2829,"src":"8144:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2932,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"8148:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8144:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2929,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2611,"src":"8132:3:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:23:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2833,"id":2935,"nodeType":"Return","src":"8125:30:13"}]}]},"documentation":{"id":2827,"nodeType":"StructuredDocumentation","src":"6317:208:13","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2938,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6539:4:13","nodeType":"FunctionDefinition","parameters":{"id":2830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2829,"mutability":"mutable","name":"a","nameLocation":"6552:1:13","nodeType":"VariableDeclaration","scope":2938,"src":"6544:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2828,"name":"uint256","nodeType":"ElementaryTypeName","src":"6544:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6543:11:13"},"returnParameters":{"id":2833,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2832,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2938,"src":"6578:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2831,"name":"uint256","nodeType":"ElementaryTypeName","src":"6578:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6577:9:13"},"scope":3434,"src":"6530:1642:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2973,"nodeType":"Block","src":"8348:161:13","statements":[{"id":2972,"nodeType":"UncheckedBlock","src":"8358:145:13","statements":[{"assignments":[2950],"declarations":[{"constant":false,"id":2950,"mutability":"mutable","name":"result","nameLocation":"8390:6:13","nodeType":"VariableDeclaration","scope":2972,"src":"8382:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2949,"name":"uint256","nodeType":"ElementaryTypeName","src":"8382:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2954,"initialValue":{"arguments":[{"id":2952,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2941,"src":"8404:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2951,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2938,2974],"referencedDeclaration":2938,"src":"8399:4:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2953,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8399:7:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8382:24:13"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2955,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"8427:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2575","typeString":"enum Math.Rounding"},"id":2959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2956,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2944,"src":"8437:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2575","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2957,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2575,"src":"8449:8:13","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2575_$","typeString":"type(enum Math.Rounding)"}},"id":2958,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8458:2:13","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"8449:11:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2575","typeString":"enum Math.Rounding"}},"src":"8437:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2960,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"8464:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2961,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"8473:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2963,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2941,"src":"8482:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8437:46:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2967,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8490:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:54:13","trueExpression":{"hexValue":"31","id":2966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8486:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2969,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8436:56:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8427:65:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2948,"id":2971,"nodeType":"Return","src":"8420:72:13"}]}]},"documentation":{"id":2939,"nodeType":"StructuredDocumentation","src":"8178:89:13","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2974,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8281:4:13","nodeType":"FunctionDefinition","parameters":{"id":2945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2941,"mutability":"mutable","name":"a","nameLocation":"8294:1:13","nodeType":"VariableDeclaration","scope":2974,"src":"8286:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2940,"name":"uint256","nodeType":"ElementaryTypeName","src":"8286:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2944,"mutability":"mutable","name":"rounding","nameLocation":"8306:8:13","nodeType":"VariableDeclaration","scope":2974,"src":"8297:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2575","typeString":"enum Math.Rounding"},"typeName":{"id":2943,"nodeType":"UserDefinedTypeName","pathNode":{"id":2942,"name":"Rounding","nameLocations":["8297:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":2575,"src":"8297:8:13"},"referencedDeclaration":2575,"src":"8297:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2575","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8285:30:13"},"returnParameters":{"id":2948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2947,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2974,"src":"8339:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2946,"name":"uint256","nodeType":"ElementaryTypeName","src":"8339:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8338:9:13"},"scope":3434,"src":"8272:237:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3105,"nodeType":"Block","src":"8694:922:13","statements":[{"assignments":[2983],"declarations":[{"constant":false,"id":2983,"mutability":"mutable","name":"result","nameLocation":"8712:6:13","nodeType":"VariableDeclaration","scope":3105,"src":"8704:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2982,"name":"uint256","nodeType":"ElementaryTypeName","src":"8704:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2985,"initialValue":{"hexValue":"30","id":2984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8721:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8704:18:13"},{"id":3102,"nodeType":"UncheckedBlock","src":"8732:855:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2986,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2977,"src":"8760:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2987,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8769:3:13","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8760:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8775:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8760:16:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3000,"nodeType":"IfStatement","src":"8756:99:13","trueBody":{"id":2999,"nodeType":"Block","src":"8778:77:13","statements":[{"expression":{"id":2993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2991,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2977,"src":"8796:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:3:13","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8796:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2994,"nodeType":"ExpressionStatement","src":"8796:13:13"},{"expression":{"id":2997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2995,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2983,"src":"8827:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2996,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8837:3:13","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8827:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2998,"nodeType":"ExpressionStatement","src":"8827:13:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3001,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2977,"src":"8872:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8881:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8872:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3004,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8886:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8872:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3015,"nodeType":"IfStatement","src":"8868:96:13","trueBody":{"id":3014,"nodeType":"Block","src":"8889:75:13","statements":[{"expression":{"id":3008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3006,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2977,"src":"8907:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8917:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8907:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3009,"nodeType":"ExpressionStatement","src":"8907:12:13"},{"expression":{"id":3012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3010,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2983,"src":"8937:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8947:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8937:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3013,"nodeType":"ExpressionStatement","src":"8937:12:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3016,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2977,"src":"8981:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3017,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8990:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8981:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3019,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8995:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8981:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3030,"nodeType":"IfStatement","src":"8977:96:13","trueBody":{"id":3029,"nodeType":"Block","src":"8998:75:13","statements":[{"expression":{"id":3023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3021,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2977,"src":"9016:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9026:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9016:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3024,"nodeType":"ExpressionStatement","src":"9016:12:13"},{"expression":{"id":3027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3025,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2983,"src":"9046:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9056:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9046:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3028,"nodeType":"ExpressionStatement","src":"9046:12:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3031,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2977,"src":"9090:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9090:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3034,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9104:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9090:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3045,"nodeType":"IfStatement","src":"9086:96:13","trueBody":{"id":3044,"nodeType":"Block","src":"9107:75:13","statements":[{"expression":{"id":3038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3036,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2977,"src":"9125:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9135:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9125:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3039,"nodeType":"ExpressionStatement","src":"9125:12:13"},{"expression":{"id":3042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3040,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2983,"src":"9155:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9165:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9155:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3043,"nodeType":"ExpressionStatement","src":"9155:12:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3046,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2977,"src":"9199:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3047,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9208:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9199:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9212:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9199:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3060,"nodeType":"IfStatement","src":"9195:93:13","trueBody":{"id":3059,"nodeType":"Block","src":"9215:73:13","statements":[{"expression":{"id":3053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3051,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2977,"src":"9233:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":3052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9243:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9233:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3054,"nodeType":"ExpressionStatement","src":"9233:11:13"},{"expression":{"id":3057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3055,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2983,"src":"9262:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3056,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9272:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9262:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3058,"nodeType":"ExpressionStatement","src":"9262:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3061,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2977,"src":"9305:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":3062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9314:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9305:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9318:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9305:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3075,"nodeType":"IfStatement","src":"9301:93:13","trueBody":{"id":3074,"nodeType":"Block","src":"9321:73:13","statements":[{"expression":{"id":3068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3066,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2977,"src":"9339:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9349:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9339:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3069,"nodeType":"ExpressionStatement","src":"9339:11:13"},{"expression":{"id":3072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3070,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2983,"src":"9368:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9378:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9368:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3073,"nodeType":"ExpressionStatement","src":"9368:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3076,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2977,"src":"9411:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":3077,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9420:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9411:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9424:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9411:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3090,"nodeType":"IfStatement","src":"9407:93:13","trueBody":{"id":3089,"nodeType":"Block","src":"9427:73:13","statements":[{"expression":{"id":3083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3081,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2977,"src":"9445:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":3082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9455:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9445:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3084,"nodeType":"ExpressionStatement","src":"9445:11:13"},{"expression":{"id":3087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3085,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2983,"src":"9474:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9484:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9474:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3088,"nodeType":"ExpressionStatement","src":"9474:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3091,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2977,"src":"9517:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9526:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9517:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9530:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9517:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3101,"nodeType":"IfStatement","src":"9513:64:13","trueBody":{"id":3100,"nodeType":"Block","src":"9533:44:13","statements":[{"expression":{"id":3098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3096,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2983,"src":"9551:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9561:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9551:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3099,"nodeType":"ExpressionStatement","src":"9551:11:13"}]}}]},{"expression":{"id":3103,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2983,"src":"9603:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2981,"id":3104,"nodeType":"Return","src":"9596:13:13"}]},"documentation":{"id":2975,"nodeType":"StructuredDocumentation","src":"8515:113:13","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":3106,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8642:4:13","nodeType":"FunctionDefinition","parameters":{"id":2978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2977,"mutability":"mutable","name":"value","nameLocation":"8655:5:13","nodeType":"VariableDeclaration","scope":3106,"src":"8647:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2976,"name":"uint256","nodeType":"ElementaryTypeName","src":"8647:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8646:15:13"},"returnParameters":{"id":2981,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2980,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3106,"src":"8685:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2979,"name":"uint256","nodeType":"ElementaryTypeName","src":"8685:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8684:9:13"},"scope":3434,"src":"8633:983:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3141,"nodeType":"Block","src":"9849:165:13","statements":[{"id":3140,"nodeType":"UncheckedBlock","src":"9859:149:13","statements":[{"assignments":[3118],"declarations":[{"constant":false,"id":3118,"mutability":"mutable","name":"result","nameLocation":"9891:6:13","nodeType":"VariableDeclaration","scope":3140,"src":"9883:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3117,"name":"uint256","nodeType":"ElementaryTypeName","src":"9883:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3122,"initialValue":{"arguments":[{"id":3120,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3109,"src":"9905:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3119,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3106,3142],"referencedDeclaration":3106,"src":"9900:4:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9900:11:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9883:28:13"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3123,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3118,"src":"9932:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2575","typeString":"enum Math.Rounding"},"id":3127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3124,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3112,"src":"9942:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2575","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3125,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2575,"src":"9954:8:13","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2575_$","typeString":"type(enum Math.Rounding)"}},"id":3126,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9963:2:13","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"9954:11:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2575","typeString":"enum Math.Rounding"}},"src":"9942:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9969:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":3129,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3118,"src":"9974:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3131,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3109,"src":"9983:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9942:46:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9995:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9942:54:13","trueExpression":{"hexValue":"31","id":3134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9991:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3137,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9941:56:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9932:65:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3116,"id":3139,"nodeType":"Return","src":"9925:72:13"}]}]},"documentation":{"id":3107,"nodeType":"StructuredDocumentation","src":"9622:142:13","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3142,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9778:4:13","nodeType":"FunctionDefinition","parameters":{"id":3113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3109,"mutability":"mutable","name":"value","nameLocation":"9791:5:13","nodeType":"VariableDeclaration","scope":3142,"src":"9783:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3108,"name":"uint256","nodeType":"ElementaryTypeName","src":"9783:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3112,"mutability":"mutable","name":"rounding","nameLocation":"9807:8:13","nodeType":"VariableDeclaration","scope":3142,"src":"9798:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2575","typeString":"enum Math.Rounding"},"typeName":{"id":3111,"nodeType":"UserDefinedTypeName","pathNode":{"id":3110,"name":"Rounding","nameLocations":["9798:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":2575,"src":"9798:8:13"},"referencedDeclaration":2575,"src":"9798:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2575","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9782:34:13"},"returnParameters":{"id":3116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3115,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3142,"src":"9840:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3114,"name":"uint256","nodeType":"ElementaryTypeName","src":"9840:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9839:9:13"},"scope":3434,"src":"9769:245:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3270,"nodeType":"Block","src":"10201:854:13","statements":[{"assignments":[3151],"declarations":[{"constant":false,"id":3151,"mutability":"mutable","name":"result","nameLocation":"10219:6:13","nodeType":"VariableDeclaration","scope":3270,"src":"10211:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3150,"name":"uint256","nodeType":"ElementaryTypeName","src":"10211:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3153,"initialValue":{"hexValue":"30","id":3152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10228:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10211:18:13"},{"id":3267,"nodeType":"UncheckedBlock","src":"10239:787:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3154,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3145,"src":"10267:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3157,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10276:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10282:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10276:8:13","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10267:17:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3170,"nodeType":"IfStatement","src":"10263:103:13","trueBody":{"id":3169,"nodeType":"Block","src":"10286:80:13","statements":[{"expression":{"id":3163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3159,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3145,"src":"10304:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3162,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3160,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10313:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10313:8:13","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10304:17:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3164,"nodeType":"ExpressionStatement","src":"10304:17:13"},{"expression":{"id":3167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3165,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"10339:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10349:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10339:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3168,"nodeType":"ExpressionStatement","src":"10339:12:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3171,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3145,"src":"10383:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3174,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10392:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10398:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10392:8:13","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10383:17:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3187,"nodeType":"IfStatement","src":"10379:103:13","trueBody":{"id":3186,"nodeType":"Block","src":"10402:80:13","statements":[{"expression":{"id":3180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3176,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3145,"src":"10420:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3179,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10435:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10429:8:13","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10420:17:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3181,"nodeType":"ExpressionStatement","src":"10420:17:13"},{"expression":{"id":3184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3182,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"10455:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10465:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10455:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3185,"nodeType":"ExpressionStatement","src":"10455:12:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3188,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3145,"src":"10499:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3191,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10508:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10514:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10508:8:13","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10499:17:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3204,"nodeType":"IfStatement","src":"10495:103:13","trueBody":{"id":3203,"nodeType":"Block","src":"10518:80:13","statements":[{"expression":{"id":3197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3193,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3145,"src":"10536:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3196,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10545:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10551:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10545:8:13","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10536:17:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3198,"nodeType":"ExpressionStatement","src":"10536:17:13"},{"expression":{"id":3201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3199,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"10571:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10581:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10571:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3202,"nodeType":"ExpressionStatement","src":"10571:12:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3205,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3145,"src":"10615:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3208,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10624:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10630:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10624:7:13","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10615:16:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3221,"nodeType":"IfStatement","src":"10611:100:13","trueBody":{"id":3220,"nodeType":"Block","src":"10633:78:13","statements":[{"expression":{"id":3214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3210,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3145,"src":"10651:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3213,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10660:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10666:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10660:7:13","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10651:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3215,"nodeType":"ExpressionStatement","src":"10651:16:13"},{"expression":{"id":3218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3216,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"10685:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10695:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10685:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3219,"nodeType":"ExpressionStatement","src":"10685:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3222,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3145,"src":"10728:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3225,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10737:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10743:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10737:7:13","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10728:16:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3238,"nodeType":"IfStatement","src":"10724:100:13","trueBody":{"id":3237,"nodeType":"Block","src":"10746:78:13","statements":[{"expression":{"id":3231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3227,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3145,"src":"10764:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3230,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10773:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10779:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10773:7:13","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10764:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3232,"nodeType":"ExpressionStatement","src":"10764:16:13"},{"expression":{"id":3235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3233,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"10798:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10808:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10798:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3236,"nodeType":"ExpressionStatement","src":"10798:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3239,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3145,"src":"10841:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3242,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10850:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10856:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10850:7:13","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10841:16:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3255,"nodeType":"IfStatement","src":"10837:100:13","trueBody":{"id":3254,"nodeType":"Block","src":"10859:78:13","statements":[{"expression":{"id":3248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3244,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3145,"src":"10877:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3247,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10886:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10892:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10886:7:13","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10877:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3249,"nodeType":"ExpressionStatement","src":"10877:16:13"},{"expression":{"id":3252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3250,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"10911:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10921:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10911:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3253,"nodeType":"ExpressionStatement","src":"10911:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3256,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3145,"src":"10954:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":3259,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10963:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":3258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10969:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10963:7:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10954:16:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3266,"nodeType":"IfStatement","src":"10950:66:13","trueBody":{"id":3265,"nodeType":"Block","src":"10972:44:13","statements":[{"expression":{"id":3263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3261,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"10990:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11000:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10990:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3264,"nodeType":"ExpressionStatement","src":"10990:11:13"}]}}]},{"expression":{"id":3268,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"11042:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3149,"id":3269,"nodeType":"Return","src":"11035:13:13"}]},"documentation":{"id":3143,"nodeType":"StructuredDocumentation","src":"10020:114:13","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":3271,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10148:5:13","nodeType":"FunctionDefinition","parameters":{"id":3146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3145,"mutability":"mutable","name":"value","nameLocation":"10162:5:13","nodeType":"VariableDeclaration","scope":3271,"src":"10154:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3144,"name":"uint256","nodeType":"ElementaryTypeName","src":"10154:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10153:15:13"},"returnParameters":{"id":3149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3148,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3271,"src":"10192:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3147,"name":"uint256","nodeType":"ElementaryTypeName","src":"10192:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10191:9:13"},"scope":3434,"src":"10139:916:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3306,"nodeType":"Block","src":"11290:167:13","statements":[{"id":3305,"nodeType":"UncheckedBlock","src":"11300:151:13","statements":[{"assignments":[3283],"declarations":[{"constant":false,"id":3283,"mutability":"mutable","name":"result","nameLocation":"11332:6:13","nodeType":"VariableDeclaration","scope":3305,"src":"11324:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3282,"name":"uint256","nodeType":"ElementaryTypeName","src":"11324:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3287,"initialValue":{"arguments":[{"id":3285,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3274,"src":"11347:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3284,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[3271,3307],"referencedDeclaration":3271,"src":"11341:5:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11341:12:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11324:29:13"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3288,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"11374:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2575","typeString":"enum Math.Rounding"},"id":3292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3289,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"11384:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2575","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3290,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2575,"src":"11396:8:13","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2575_$","typeString":"type(enum Math.Rounding)"}},"id":3291,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11405:2:13","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"11396:11:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2575","typeString":"enum Math.Rounding"}},"src":"11384:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11411:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":3294,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"11417:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3296,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3274,"src":"11426:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:20:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11384:47:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11438:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11384:55:13","trueExpression":{"hexValue":"31","id":3299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11434:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3302,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11383:57:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11374:66:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3281,"id":3304,"nodeType":"Return","src":"11367:73:13"}]}]},"documentation":{"id":3272,"nodeType":"StructuredDocumentation","src":"11061:143:13","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3307,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11218:5:13","nodeType":"FunctionDefinition","parameters":{"id":3278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3274,"mutability":"mutable","name":"value","nameLocation":"11232:5:13","nodeType":"VariableDeclaration","scope":3307,"src":"11224:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3273,"name":"uint256","nodeType":"ElementaryTypeName","src":"11224:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3277,"mutability":"mutable","name":"rounding","nameLocation":"11248:8:13","nodeType":"VariableDeclaration","scope":3307,"src":"11239:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2575","typeString":"enum Math.Rounding"},"typeName":{"id":3276,"nodeType":"UserDefinedTypeName","pathNode":{"id":3275,"name":"Rounding","nameLocations":["11239:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":2575,"src":"11239:8:13"},"referencedDeclaration":2575,"src":"11239:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2575","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11223:34:13"},"returnParameters":{"id":3281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3280,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3307,"src":"11281:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3279,"name":"uint256","nodeType":"ElementaryTypeName","src":"11281:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11280:9:13"},"scope":3434,"src":"11209:248:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3393,"nodeType":"Block","src":"11771:600:13","statements":[{"assignments":[3316],"declarations":[{"constant":false,"id":3316,"mutability":"mutable","name":"result","nameLocation":"11789:6:13","nodeType":"VariableDeclaration","scope":3393,"src":"11781:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3315,"name":"uint256","nodeType":"ElementaryTypeName","src":"11781:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3318,"initialValue":{"hexValue":"30","id":3317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11798:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11781:18:13"},{"id":3390,"nodeType":"UncheckedBlock","src":"11809:533:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3319,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3310,"src":"11837:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11846:3:13","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11837:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11852:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11837:16:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3333,"nodeType":"IfStatement","src":"11833:98:13","trueBody":{"id":3332,"nodeType":"Block","src":"11855:76:13","statements":[{"expression":{"id":3326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3324,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3310,"src":"11873:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11883:3:13","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11873:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3327,"nodeType":"ExpressionStatement","src":"11873:13:13"},{"expression":{"id":3330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3328,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3316,"src":"11904:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11914:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11904:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3331,"nodeType":"ExpressionStatement","src":"11904:12:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3334,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3310,"src":"11948:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11957:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11948:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11962:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11948:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3348,"nodeType":"IfStatement","src":"11944:95:13","trueBody":{"id":3347,"nodeType":"Block","src":"11965:74:13","statements":[{"expression":{"id":3341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3339,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3310,"src":"11983:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11993:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11983:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3342,"nodeType":"ExpressionStatement","src":"11983:12:13"},{"expression":{"id":3345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3343,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3316,"src":"12013:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12023:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12013:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3346,"nodeType":"ExpressionStatement","src":"12013:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3349,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3310,"src":"12056:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12065:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12056:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12070:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12056:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3363,"nodeType":"IfStatement","src":"12052:95:13","trueBody":{"id":3362,"nodeType":"Block","src":"12073:74:13","statements":[{"expression":{"id":3356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3354,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3310,"src":"12091:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12101:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12091:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3357,"nodeType":"ExpressionStatement","src":"12091:12:13"},{"expression":{"id":3360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3358,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3316,"src":"12121:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12131:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12121:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3361,"nodeType":"ExpressionStatement","src":"12121:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3364,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3310,"src":"12164:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12173:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12164:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12178:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12164:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3378,"nodeType":"IfStatement","src":"12160:95:13","trueBody":{"id":3377,"nodeType":"Block","src":"12181:74:13","statements":[{"expression":{"id":3371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3369,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3310,"src":"12199:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12209:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12199:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3372,"nodeType":"ExpressionStatement","src":"12199:12:13"},{"expression":{"id":3375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3373,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3316,"src":"12229:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12239:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12229:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3376,"nodeType":"ExpressionStatement","src":"12229:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3379,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3310,"src":"12272:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12281:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12272:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3382,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12272:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3389,"nodeType":"IfStatement","src":"12268:64:13","trueBody":{"id":3388,"nodeType":"Block","src":"12288:44:13","statements":[{"expression":{"id":3386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3384,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3316,"src":"12306:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12316:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12306:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3387,"nodeType":"ExpressionStatement","src":"12306:11:13"}]}}]},{"expression":{"id":3391,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3316,"src":"12358:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3314,"id":3392,"nodeType":"Return","src":"12351:13:13"}]},"documentation":{"id":3308,"nodeType":"StructuredDocumentation","src":"11463:240:13","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":3394,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11717:6:13","nodeType":"FunctionDefinition","parameters":{"id":3311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3310,"mutability":"mutable","name":"value","nameLocation":"11732:5:13","nodeType":"VariableDeclaration","scope":3394,"src":"11724:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3309,"name":"uint256","nodeType":"ElementaryTypeName","src":"11724:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11723:15:13"},"returnParameters":{"id":3314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3313,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3394,"src":"11762:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3312,"name":"uint256","nodeType":"ElementaryTypeName","src":"11762:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11761:9:13"},"scope":3434,"src":"11708:663:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3432,"nodeType":"Block","src":"12608:174:13","statements":[{"id":3431,"nodeType":"UncheckedBlock","src":"12618:158:13","statements":[{"assignments":[3406],"declarations":[{"constant":false,"id":3406,"mutability":"mutable","name":"result","nameLocation":"12650:6:13","nodeType":"VariableDeclaration","scope":3431,"src":"12642:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3405,"name":"uint256","nodeType":"ElementaryTypeName","src":"12642:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3410,"initialValue":{"arguments":[{"id":3408,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3397,"src":"12666:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3407,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[3394,3433],"referencedDeclaration":3394,"src":"12659:6:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12659:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12642:30:13"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3411,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3406,"src":"12693:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2575","typeString":"enum Math.Rounding"},"id":3415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3412,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3400,"src":"12703:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2575","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3413,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2575,"src":"12715:8:13","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2575_$","typeString":"type(enum Math.Rounding)"}},"id":3414,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12724:2:13","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"12715:11:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2575","typeString":"enum Math.Rounding"}},"src":"12703:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12730:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3417,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3406,"src":"12736:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":3418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12746:1:13","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12736:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3420,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12735:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:18:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3422,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3397,"src":"12751:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:26:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12703:53:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12763:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12703:61:13","trueExpression":{"hexValue":"31","id":3425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12759:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3428,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12702:63:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12693:72:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3404,"id":3430,"nodeType":"Return","src":"12686:79:13"}]}]},"documentation":{"id":3395,"nodeType":"StructuredDocumentation","src":"12377:144:13","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3433,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12535:6:13","nodeType":"FunctionDefinition","parameters":{"id":3401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3397,"mutability":"mutable","name":"value","nameLocation":"12550:5:13","nodeType":"VariableDeclaration","scope":3433,"src":"12542:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3396,"name":"uint256","nodeType":"ElementaryTypeName","src":"12542:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3400,"mutability":"mutable","name":"rounding","nameLocation":"12566:8:13","nodeType":"VariableDeclaration","scope":3433,"src":"12557:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2575","typeString":"enum Math.Rounding"},"typeName":{"id":3399,"nodeType":"UserDefinedTypeName","pathNode":{"id":3398,"name":"Rounding","nameLocations":["12557:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":2575,"src":"12557:8:13"},"referencedDeclaration":2575,"src":"12557:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2575","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12541:34:13"},"returnParameters":{"id":3404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3403,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3433,"src":"12599:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3402,"name":"uint256","nodeType":"ElementaryTypeName","src":"12599:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12598:9:13"},"scope":3434,"src":"12526:256:13","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3435,"src":"202:12582:13","usedErrors":[],"usedEvents":[]}],"src":"103:12682:13"},"id":13},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[3539]},"id":3540,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3436,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:14"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":3437,"nodeType":"StructuredDocumentation","src":"134:80:14","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":3539,"linearizedBaseContracts":[3539],"name":"SignedMath","nameLocation":"223:10:14","nodeType":"ContractDefinition","nodes":[{"body":{"id":3454,"nodeType":"Block","src":"375:37:14","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3447,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3440,"src":"392:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3448,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3442,"src":"396:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"392:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3451,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3442,"src":"404:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"392:13:14","trueExpression":{"id":3450,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3440,"src":"400:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3446,"id":3453,"nodeType":"Return","src":"385:20:14"}]},"documentation":{"id":3438,"nodeType":"StructuredDocumentation","src":"240:66:14","text":" @dev Returns the largest of two signed numbers."},"id":3455,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"320:3:14","nodeType":"FunctionDefinition","parameters":{"id":3443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3440,"mutability":"mutable","name":"a","nameLocation":"331:1:14","nodeType":"VariableDeclaration","scope":3455,"src":"324:8:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3439,"name":"int256","nodeType":"ElementaryTypeName","src":"324:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3442,"mutability":"mutable","name":"b","nameLocation":"341:1:14","nodeType":"VariableDeclaration","scope":3455,"src":"334:8:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3441,"name":"int256","nodeType":"ElementaryTypeName","src":"334:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"323:20:14"},"returnParameters":{"id":3446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3445,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3455,"src":"367:6:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3444,"name":"int256","nodeType":"ElementaryTypeName","src":"367:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"366:8:14"},"scope":3539,"src":"311:101:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3472,"nodeType":"Block","src":"554:37:14","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3465,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3458,"src":"571:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3466,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3460,"src":"575:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"571:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3469,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3460,"src":"583:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"571:13:14","trueExpression":{"id":3468,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3458,"src":"579:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3464,"id":3471,"nodeType":"Return","src":"564:20:14"}]},"documentation":{"id":3456,"nodeType":"StructuredDocumentation","src":"418:67:14","text":" @dev Returns the smallest of two signed numbers."},"id":3473,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"499:3:14","nodeType":"FunctionDefinition","parameters":{"id":3461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3458,"mutability":"mutable","name":"a","nameLocation":"510:1:14","nodeType":"VariableDeclaration","scope":3473,"src":"503:8:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3457,"name":"int256","nodeType":"ElementaryTypeName","src":"503:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3460,"mutability":"mutable","name":"b","nameLocation":"520:1:14","nodeType":"VariableDeclaration","scope":3473,"src":"513:8:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3459,"name":"int256","nodeType":"ElementaryTypeName","src":"513:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"502:20:14"},"returnParameters":{"id":3464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3463,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3473,"src":"546:6:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3462,"name":"int256","nodeType":"ElementaryTypeName","src":"546:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"545:8:14"},"scope":3539,"src":"490:101:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3516,"nodeType":"Block","src":"796:162:14","statements":[{"assignments":[3484],"declarations":[{"constant":false,"id":3484,"mutability":"mutable","name":"x","nameLocation":"865:1:14","nodeType":"VariableDeclaration","scope":3516,"src":"858:8:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3483,"name":"int256","nodeType":"ElementaryTypeName","src":"858:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3497,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3485,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3476,"src":"870:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3486,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3478,"src":"874:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:5:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3488,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"869:7:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3489,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3476,"src":"881:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3490,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3478,"src":"885:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3492,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"891:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"880:12:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3495,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"879:14:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"869:24:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"858:35:14"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3498,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3484,"src":"910:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3503,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3484,"src":"930:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3502,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"922:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3501,"name":"uint256","nodeType":"ElementaryTypeName","src":"922:7:14","typeDescriptions":{}}},"id":3504,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"922:10:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":3505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"936:3:14","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"922:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3500,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"915:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":3499,"name":"int256","nodeType":"ElementaryTypeName","src":"915:6:14","typeDescriptions":{}}},"id":3507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"915:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3508,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3476,"src":"944:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3509,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3478,"src":"948:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"944:5:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3511,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"943:7:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"915:35:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3513,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"914:37:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"910:41:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3482,"id":3515,"nodeType":"Return","src":"903:48:14"}]},"documentation":{"id":3474,"nodeType":"StructuredDocumentation","src":"597:126:14","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":3517,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"737:7:14","nodeType":"FunctionDefinition","parameters":{"id":3479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3476,"mutability":"mutable","name":"a","nameLocation":"752:1:14","nodeType":"VariableDeclaration","scope":3517,"src":"745:8:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3475,"name":"int256","nodeType":"ElementaryTypeName","src":"745:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3478,"mutability":"mutable","name":"b","nameLocation":"762:1:14","nodeType":"VariableDeclaration","scope":3517,"src":"755:8:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3477,"name":"int256","nodeType":"ElementaryTypeName","src":"755:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"744:20:14"},"returnParameters":{"id":3482,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3481,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3517,"src":"788:6:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3480,"name":"int256","nodeType":"ElementaryTypeName","src":"788:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"787:8:14"},"scope":3539,"src":"728:230:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3537,"nodeType":"Block","src":"1102:158:14","statements":[{"id":3536,"nodeType":"UncheckedBlock","src":"1112:142:14","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3527,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3520,"src":"1227:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":3528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1232:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1227:6:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1240:2:14","subExpression":{"id":3531,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3520,"src":"1241:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1227:15:14","trueExpression":{"id":3530,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3520,"src":"1236:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3526,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1219:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3525,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:14","typeDescriptions":{}}},"id":3534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1219:24:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3524,"id":3535,"nodeType":"Return","src":"1212:31:14"}]}]},"documentation":{"id":3518,"nodeType":"StructuredDocumentation","src":"964:78:14","text":" @dev Returns the absolute unsigned value of a signed value."},"id":3538,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1056:3:14","nodeType":"FunctionDefinition","parameters":{"id":3521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3520,"mutability":"mutable","name":"n","nameLocation":"1067:1:14","nodeType":"VariableDeclaration","scope":3538,"src":"1060:8:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3519,"name":"int256","nodeType":"ElementaryTypeName","src":"1060:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1059:10:14"},"returnParameters":{"id":3524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3523,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3538,"src":"1093:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3522,"name":"uint256","nodeType":"ElementaryTypeName","src":"1093:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1092:9:14"},"scope":3539,"src":"1047:213:14","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3540,"src":"215:1047:14","usedErrors":[],"usedEvents":[]}],"src":"109:1154:14"},"id":14},"contracts/gitid/IGitIDMinter.sol":{"ast":{"absolutePath":"contracts/gitid/IGitIDMinter.sol","exportedSymbols":{"IGitIDMinter":[3551]},"id":3552,"nodeType":"SourceUnit","nodes":[{"id":3541,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"0:24:15"},{"abstract":false,"baseContracts":[],"canonicalName":"IGitIDMinter","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3551,"linearizedBaseContracts":[3551],"name":"IGitIDMinter","nameLocation":"36:12:15","nodeType":"ContractDefinition","nodes":[{"functionSelector":"59d7eb8d","id":3550,"implemented":false,"kind":"function","modifiers":[],"name":"register","nameLocation":"64:8:15","nodeType":"FunctionDefinition","parameters":{"id":3548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3543,"mutability":"mutable","name":"username","nameLocation":"98:8:15","nodeType":"VariableDeclaration","scope":3550,"src":"82:24:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":3542,"name":"string","nodeType":"ElementaryTypeName","src":"82:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3545,"mutability":"mutable","name":"signature","nameLocation":"131:9:15","nodeType":"VariableDeclaration","scope":3550,"src":"116:24:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3544,"name":"bytes","nodeType":"ElementaryTypeName","src":"116:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3547,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3550,"src":"150:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3546,"name":"address","nodeType":"ElementaryTypeName","src":"150:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"72:91:15"},"returnParameters":{"id":3549,"nodeType":"ParameterList","parameters":[],"src":"180:0:15"},"scope":3551,"src":"55:126:15","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":3552,"src":"26:157:15","usedErrors":[],"usedEvents":[]}],"src":"0:184:15"},"id":15},"contracts/gitid/Minter.sol":{"ast":{"absolutePath":"contracts/gitid/Minter.sol","exportedSymbols":{"Context":[1937],"ECDSA":[2532],"GitID":[4113],"IGitIDMinter":[3551],"Math":[3434],"Minter":[3713],"Ownable":[112],"SignedMath":[3539],"Strings":[2166]},"id":3714,"nodeType":"SourceUnit","nodes":[{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":3553,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3714,"sourceUnit":113,"src":"1:52:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","file":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","id":3554,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3714,"sourceUnit":2533,"src":"54:62:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/gitid/IGitIDMinter.sol","file":"./IGitIDMinter.sol","id":3556,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3714,"sourceUnit":3552,"src":"117:50:16","symbolAliases":[{"foreign":{"id":3555,"name":"IGitIDMinter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3551,"src":"126:12:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/gitid/gitid.sol","file":"./gitid.sol","id":3558,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3714,"sourceUnit":4114,"src":"168:34:16","symbolAliases":[{"foreign":{"id":3557,"name":"GitID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4113,"src":"176:5:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3559,"name":"Ownable","nameLocations":["223:7:16"],"nodeType":"IdentifierPath","referencedDeclaration":112,"src":"223:7:16"},"id":3560,"nodeType":"InheritanceSpecifier","src":"223:7:16"},{"baseName":{"id":3561,"name":"IGitIDMinter","nameLocations":["232:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":3551,"src":"232:12:16"},"id":3562,"nodeType":"InheritanceSpecifier","src":"232:12:16"}],"canonicalName":"Minter","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3713,"linearizedBaseContracts":[3713,3551,112,1937],"name":"Minter","nameLocation":"213:6:16","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3565,"libraryName":{"id":3563,"name":"ECDSA","nameLocations":["257:5:16"],"nodeType":"IdentifierPath","referencedDeclaration":2532,"src":"257:5:16"},"nodeType":"UsingForDirective","src":"251:24:16","typeName":{"id":3564,"name":"bytes32","nodeType":"ElementaryTypeName","src":"267:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"constant":false,"id":3568,"mutability":"mutable","name":"gitID","nameLocation":"286:5:16","nodeType":"VariableDeclaration","scope":3713,"src":"280:11:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_GitID_$4113","typeString":"contract GitID"},"typeName":{"id":3567,"nodeType":"UserDefinedTypeName","pathNode":{"id":3566,"name":"GitID","nameLocations":["280:5:16"],"nodeType":"IdentifierPath","referencedDeclaration":4113,"src":"280:5:16"},"referencedDeclaration":4113,"src":"280:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_GitID_$4113","typeString":"contract GitID"}},"visibility":"internal"},{"constant":false,"functionSelector":"238ac933","id":3570,"mutability":"mutable","name":"signer","nameLocation":"312:6:16","nodeType":"VariableDeclaration","scope":3713,"src":"297:21:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3569,"name":"address","nodeType":"ElementaryTypeName","src":"297:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"anonymous":false,"eventSelector":"5553331329228fbd4123164423717a4a7539f6dfa1c3279a923b98fd681a6c73","id":3574,"name":"SignerUpdated","nameLocation":"331:13:16","nodeType":"EventDefinition","parameters":{"id":3573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3572,"indexed":true,"mutability":"mutable","name":"newSigner","nameLocation":"361:9:16","nodeType":"VariableDeclaration","scope":3574,"src":"345:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3571,"name":"address","nodeType":"ElementaryTypeName","src":"345:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"344:27:16"},"src":"325:47:16"},{"anonymous":false,"eventSelector":"8a168ef997ae6a1723ef504e6a0205acfe336ccb522561e95accebadde414b87","id":3582,"name":"NameRegistered","nameLocation":"384:14:16","nodeType":"EventDefinition","parameters":{"id":3581,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3576,"indexed":false,"mutability":"mutable","name":"name","nameLocation":"415:4:16","nodeType":"VariableDeclaration","scope":3582,"src":"408:11:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3575,"name":"string","nodeType":"ElementaryTypeName","src":"408:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3578,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"445:5:16","nodeType":"VariableDeclaration","scope":3582,"src":"429:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3577,"name":"address","nodeType":"ElementaryTypeName","src":"429:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3580,"indexed":false,"mutability":"mutable","name":"cost","nameLocation":"468:4:16","nodeType":"VariableDeclaration","scope":3582,"src":"460:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3579,"name":"uint256","nodeType":"ElementaryTypeName","src":"460:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"398:80:16"},"src":"378:101:16"},{"body":{"id":3598,"nodeType":"Block","src":"535:57:16","statements":[{"expression":{"id":3592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3590,"name":"gitID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"545:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_GitID_$4113","typeString":"contract GitID"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3591,"name":"_gitID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3585,"src":"553:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_GitID_$4113","typeString":"contract GitID"}},"src":"545:14:16","typeDescriptions":{"typeIdentifier":"t_contract$_GitID_$4113","typeString":"contract GitID"}},"id":3593,"nodeType":"ExpressionStatement","src":"545:14:16"},{"expression":{"id":3596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3594,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3570,"src":"569:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3595,"name":"_signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3587,"src":"578:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"569:16:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3597,"nodeType":"ExpressionStatement","src":"569:16:16"}]},"id":3599,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3585,"mutability":"mutable","name":"_gitID","nameLocation":"503:6:16","nodeType":"VariableDeclaration","scope":3599,"src":"497:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_GitID_$4113","typeString":"contract GitID"},"typeName":{"id":3584,"nodeType":"UserDefinedTypeName","pathNode":{"id":3583,"name":"GitID","nameLocations":["497:5:16"],"nodeType":"IdentifierPath","referencedDeclaration":4113,"src":"497:5:16"},"referencedDeclaration":4113,"src":"497:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_GitID_$4113","typeString":"contract GitID"}},"visibility":"internal"},{"constant":false,"id":3587,"mutability":"mutable","name":"_signer","nameLocation":"519:7:16","nodeType":"VariableDeclaration","scope":3599,"src":"511:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3586,"name":"address","nodeType":"ElementaryTypeName","src":"511:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"496:31:16"},"returnParameters":{"id":3589,"nodeType":"ParameterList","parameters":[],"src":"535:0:16"},"scope":3713,"src":"485:107:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[3550],"body":{"id":3658,"nodeType":"Block","src":"736:423:16","statements":[{"assignments":[3610],"declarations":[{"constant":false,"id":3610,"mutability":"mutable","name":"price","nameLocation":"754:5:16","nodeType":"VariableDeclaration","scope":3658,"src":"746:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3609,"name":"uint256","nodeType":"ElementaryTypeName","src":"746:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3613,"initialValue":{"expression":{"id":3611,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"762:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"766:5:16","memberName":"value","nodeType":"MemberAccess","src":"762:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"746:25:16"},{"assignments":[3615],"declarations":[{"constant":false,"id":3615,"mutability":"mutable","name":"messageHash","nameLocation":"790:11:16","nodeType":"VariableDeclaration","scope":3658,"src":"782:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3614,"name":"bytes32","nodeType":"ElementaryTypeName","src":"782:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3620,"initialValue":{"arguments":[{"id":3617,"name":"username","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3601,"src":"819:8:16","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":3618,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3610,"src":"829:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3616,"name":"getMessageHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3677,"src":"804:14:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (string memory,uint256) pure returns (bytes32)"}},"id":3619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"804:31:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"782:53:16"},{"assignments":[3622],"declarations":[{"constant":false,"id":3622,"mutability":"mutable","name":"recoveredSigner","nameLocation":"853:15:16","nodeType":"VariableDeclaration","scope":3658,"src":"845:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3621,"name":"address","nodeType":"ElementaryTypeName","src":"845:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3629,"initialValue":{"arguments":[{"id":3627,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"916:9:16","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3623,"name":"messageHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3615,"src":"871:11:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"883:22:16","memberName":"toEthSignedMessageHash","nodeType":"MemberAccess","referencedDeclaration":2477,"src":"871:34:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_bytes32_$attached_to$_t_bytes32_$","typeString":"function (bytes32) pure returns (bytes32)"}},"id":3625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"871:36:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"908:7:16","memberName":"recover","nodeType":"MemberAccess","referencedDeclaration":2293,"src":"871:44:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$attached_to$_t_bytes32_$","typeString":"function (bytes32,bytes memory) pure returns (address)"}},"id":3628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"871:55:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"845:81:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3631,"name":"recoveredSigner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3622,"src":"945:15:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3632,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3570,"src":"964:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"945:25:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c6964207369676e6174757265","id":3634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"972:19:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_4f2d7dfcb27c0aafa13ae8c400de482c7832204d194018b6e45bd2bf244c74e7","typeString":"literal_string \"Invalid signature\""},"value":"Invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4f2d7dfcb27c0aafa13ae8c400de482c7832204d194018b6e45bd2bf244c74e7","typeString":"literal_string \"Invalid signature\""}],"id":3630,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"937:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"937:55:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3636,"nodeType":"ExpressionStatement","src":"937:55:16"},{"assignments":[3638],"declarations":[{"constant":false,"id":3638,"mutability":"mutable","name":"tokenId","nameLocation":"1011:7:16","nodeType":"VariableDeclaration","scope":3658,"src":"1003:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3637,"name":"uint256","nodeType":"ElementaryTypeName","src":"1003:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3643,"initialValue":{"arguments":[{"id":3641,"name":"username","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3601,"src":"1038:8:16","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"expression":{"id":3639,"name":"gitID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"1021:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_GitID_$4113","typeString":"contract GitID"}},"id":3640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1027:10:16","memberName":"getTokenId","nodeType":"MemberAccess","referencedDeclaration":4047,"src":"1021:16:16","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_string_memory_ptr_$returns$_t_uint256_$","typeString":"function (string memory) pure external returns (uint256)"}},"id":3642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1021:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1003:44:16"},{"expression":{"arguments":[{"id":3647,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3638,"src":"1073:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3648,"name":"username","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3601,"src":"1082:8:16","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":3649,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"1092:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3644,"name":"gitID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"1058:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_GitID_$4113","typeString":"contract GitID"}},"id":3646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1064:8:16","memberName":"register","nodeType":"MemberAccess","referencedDeclaration":3987,"src":"1058:14:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$_t_string_memory_ptr_$_t_address_$returns$__$","typeString":"function (uint256,string memory,address) external"}},"id":3650,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1058:40:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3651,"nodeType":"ExpressionStatement","src":"1058:40:16"},{"eventCall":{"arguments":[{"id":3653,"name":"username","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3601,"src":"1129:8:16","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":3654,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"1139:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3655,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3610,"src":"1146:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3652,"name":"NameRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3582,"src":"1114:14:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_string_memory_ptr_$_t_address_$_t_uint256_$returns$__$","typeString":"function (string memory,address,uint256)"}},"id":3656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1114:38:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3657,"nodeType":"EmitStatement","src":"1109:43:16"}]},"functionSelector":"59d7eb8d","id":3659,"implemented":true,"kind":"function","modifiers":[],"name":"register","nameLocation":"607:8:16","nodeType":"FunctionDefinition","overrides":{"id":3607,"nodeType":"OverrideSpecifier","overrides":[],"src":"728:8:16"},"parameters":{"id":3606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3601,"mutability":"mutable","name":"username","nameLocation":"641:8:16","nodeType":"VariableDeclaration","scope":3659,"src":"625:24:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":3600,"name":"string","nodeType":"ElementaryTypeName","src":"625:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3603,"mutability":"mutable","name":"signature","nameLocation":"674:9:16","nodeType":"VariableDeclaration","scope":3659,"src":"659:24:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3602,"name":"bytes","nodeType":"ElementaryTypeName","src":"659:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3605,"mutability":"mutable","name":"owner","nameLocation":"701:5:16","nodeType":"VariableDeclaration","scope":3659,"src":"693:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3604,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"615:97:16"},"returnParameters":{"id":3608,"nodeType":"ParameterList","parameters":[],"src":"736:0:16"},"scope":3713,"src":"598:561:16","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":3676,"nodeType":"Block","src":"1258:68:16","statements":[{"expression":{"arguments":[{"arguments":[{"id":3671,"name":"username","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3661,"src":"1302:8:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3672,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3663,"src":"1312:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3669,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1285:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3670,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1289:12:16","memberName":"encodePacked","nodeType":"MemberAccess","src":"1285:16:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1285:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3668,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1275:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1275:44:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3667,"id":3675,"nodeType":"Return","src":"1268:51:16"}]},"functionSelector":"d4aa6916","id":3677,"implemented":true,"kind":"function","modifiers":[],"name":"getMessageHash","nameLocation":"1174:14:16","nodeType":"FunctionDefinition","parameters":{"id":3664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3661,"mutability":"mutable","name":"username","nameLocation":"1203:8:16","nodeType":"VariableDeclaration","scope":3677,"src":"1189:22:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3660,"name":"string","nodeType":"ElementaryTypeName","src":"1189:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3663,"mutability":"mutable","name":"price","nameLocation":"1221:5:16","nodeType":"VariableDeclaration","scope":3677,"src":"1213:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3662,"name":"uint256","nodeType":"ElementaryTypeName","src":"1213:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1188:39:16"},"returnParameters":{"id":3667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3666,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3677,"src":"1249:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3665,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1249:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1248:9:16"},"scope":3713,"src":"1165:161:16","stateMutability":"pure","virtual":false,"visibility":"public"},{"body":{"id":3695,"nodeType":"Block","src":"1369:68:16","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":3690,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1416:4:16","typeDescriptions":{"typeIdentifier":"t_contract$_Minter_$3713","typeString":"contract Minter"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Minter_$3713","typeString":"contract Minter"}],"id":3689,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1408:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3688,"name":"address","nodeType":"ElementaryTypeName","src":"1408:7:16","typeDescriptions":{}}},"id":3691,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1408:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1422:7:16","memberName":"balance","nodeType":"MemberAccess","src":"1408:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":3684,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1387:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1391:6:16","memberName":"sender","nodeType":"MemberAccess","src":"1387:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3683,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1379:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":3682,"name":"address","nodeType":"ElementaryTypeName","src":"1379:8:16","stateMutability":"payable","typeDescriptions":{}}},"id":3686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1379:19:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1399:8:16","memberName":"transfer","nodeType":"MemberAccess","src":"1379:28:16","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":3693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1379:51:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3694,"nodeType":"ExpressionStatement","src":"1379:51:16"}]},"functionSelector":"3ccfd60b","id":3696,"implemented":true,"kind":"function","modifiers":[{"id":3680,"kind":"modifierInvocation","modifierName":{"id":3679,"name":"onlyOwner","nameLocations":["1359:9:16"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1359:9:16"},"nodeType":"ModifierInvocation","src":"1359:9:16"}],"name":"withdraw","nameLocation":"1341:8:16","nodeType":"FunctionDefinition","parameters":{"id":3678,"nodeType":"ParameterList","parameters":[],"src":"1349:2:16"},"returnParameters":{"id":3681,"nodeType":"ParameterList","parameters":[],"src":"1369:0:16"},"scope":3713,"src":"1332:105:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3711,"nodeType":"Block","src":"1503:74:16","statements":[{"expression":{"id":3705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3703,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3570,"src":"1513:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3704,"name":"newSigner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3698,"src":"1522:9:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1513:18:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3706,"nodeType":"ExpressionStatement","src":"1513:18:16"},{"eventCall":{"arguments":[{"id":3708,"name":"newSigner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3698,"src":"1560:9:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3707,"name":"SignerUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3574,"src":"1546:13:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1546:24:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3710,"nodeType":"EmitStatement","src":"1541:29:16"}]},"functionSelector":"a7ecd37e","id":3712,"implemented":true,"kind":"function","modifiers":[{"id":3701,"kind":"modifierInvocation","modifierName":{"id":3700,"name":"onlyOwner","nameLocations":["1493:9:16"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1493:9:16"},"nodeType":"ModifierInvocation","src":"1493:9:16"}],"name":"updateSigner","nameLocation":"1452:12:16","nodeType":"FunctionDefinition","parameters":{"id":3699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3698,"mutability":"mutable","name":"newSigner","nameLocation":"1473:9:16","nodeType":"VariableDeclaration","scope":3712,"src":"1465:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3697,"name":"address","nodeType":"ElementaryTypeName","src":"1465:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1464:19:16"},"returnParameters":{"id":3702,"nodeType":"ParameterList","parameters":[],"src":"1503:0:16"},"scope":3713,"src":"1443:134:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3714,"src":"204:1375:16","usedErrors":[],"usedEvents":[13,3574,3582]}],"src":"1:1579:16"},"id":16},"contracts/gitid/UniversalResolver.sol":{"ast":{"absolutePath":"contracts/gitid/UniversalResolver.sol","exportedSymbols":{"GitID":[4113],"UniversalResolver":[3798]},"id":3799,"nodeType":"SourceUnit","nodes":[{"absolutePath":"contracts/gitid/gitid.sol","file":"./gitid.sol","id":3716,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3799,"sourceUnit":4114,"src":"0:34:17","symbolAliases":[{"foreign":{"id":3715,"name":"GitID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4113,"src":"8:5:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"UniversalResolver","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3798,"linearizedBaseContracts":[3798],"name":"UniversalResolver","nameLocation":"45:17:17","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":3719,"mutability":"mutable","name":"gitID","nameLocation":"76:5:17","nodeType":"VariableDeclaration","scope":3798,"src":"70:11:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_GitID_$4113","typeString":"contract GitID"},"typeName":{"id":3718,"nodeType":"UserDefinedTypeName","pathNode":{"id":3717,"name":"GitID","nameLocations":["70:5:17"],"nodeType":"IdentifierPath","referencedDeclaration":4113,"src":"70:5:17"},"referencedDeclaration":4113,"src":"70:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_GitID_$4113","typeString":"contract GitID"}},"visibility":"internal"},{"body":{"id":3729,"nodeType":"Block","src":"121:31:17","statements":[{"expression":{"id":3727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3725,"name":"gitID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"131:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_GitID_$4113","typeString":"contract GitID"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3726,"name":"_gitID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"139:6:17","typeDescriptions":{"typeIdentifier":"t_contract$_GitID_$4113","typeString":"contract GitID"}},"src":"131:14:17","typeDescriptions":{"typeIdentifier":"t_contract$_GitID_$4113","typeString":"contract GitID"}},"id":3728,"nodeType":"ExpressionStatement","src":"131:14:17"}]},"id":3730,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3722,"mutability":"mutable","name":"_gitID","nameLocation":"106:6:17","nodeType":"VariableDeclaration","scope":3730,"src":"100:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_GitID_$4113","typeString":"contract GitID"},"typeName":{"id":3721,"nodeType":"UserDefinedTypeName","pathNode":{"id":3720,"name":"GitID","nameLocations":["100:5:17"],"nodeType":"IdentifierPath","referencedDeclaration":4113,"src":"100:5:17"},"referencedDeclaration":4113,"src":"100:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_GitID_$4113","typeString":"contract GitID"}},"visibility":"internal"}],"src":"99:14:17"},"returnParameters":{"id":3724,"nodeType":"ParameterList","parameters":[],"src":"121:0:17"},"scope":3798,"src":"88:64:17","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3741,"nodeType":"Block","src":"247:48:17","statements":[{"expression":{"arguments":[{"id":3738,"name":"username","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3732,"src":"279:8:17","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":3737,"name":"_resolveSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3762,"src":"264:14:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_string_calldata_ptr_$returns$_t_address_$","typeString":"function (string calldata) view returns (address)"}},"id":3739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"264:24:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3736,"id":3740,"nodeType":"Return","src":"257:31:17"}]},"functionSelector":"461a4478","id":3742,"implemented":true,"kind":"function","modifiers":[],"name":"resolve","nameLocation":"167:7:17","nodeType":"FunctionDefinition","parameters":{"id":3733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3732,"mutability":"mutable","name":"username","nameLocation":"200:8:17","nodeType":"VariableDeclaration","scope":3742,"src":"184:24:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":3731,"name":"string","nodeType":"ElementaryTypeName","src":"184:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"174:40:17"},"returnParameters":{"id":3736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3735,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3742,"src":"238:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3734,"name":"address","nodeType":"ElementaryTypeName","src":"238:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"237:9:17"},"scope":3798,"src":"158:137:17","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3761,"nodeType":"Block","src":"395:100:17","statements":[{"assignments":[3750],"declarations":[{"constant":false,"id":3750,"mutability":"mutable","name":"tokenId","nameLocation":"413:7:17","nodeType":"VariableDeclaration","scope":3761,"src":"405:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3749,"name":"uint256","nodeType":"ElementaryTypeName","src":"405:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3755,"initialValue":{"arguments":[{"id":3753,"name":"username","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3744,"src":"440:8:17","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"expression":{"id":3751,"name":"gitID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"423:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_GitID_$4113","typeString":"contract GitID"}},"id":3752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"429:10:17","memberName":"getTokenId","nodeType":"MemberAccess","referencedDeclaration":4047,"src":"423:16:17","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_string_memory_ptr_$returns$_t_uint256_$","typeString":"function (string memory) pure external returns (uint256)"}},"id":3754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"423:26:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"405:44:17"},{"expression":{"arguments":[{"id":3758,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3750,"src":"480:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3756,"name":"gitID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"466:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_GitID_$4113","typeString":"contract GitID"}},"id":3757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"472:7:17","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":258,"src":"466:13:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view external returns (address)"}},"id":3759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"466:22:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3748,"id":3760,"nodeType":"Return","src":"459:29:17"}]},"functionSelector":"0112f822","id":3762,"implemented":true,"kind":"function","modifiers":[],"name":"_resolveSingle","nameLocation":"310:14:17","nodeType":"FunctionDefinition","parameters":{"id":3745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3744,"mutability":"mutable","name":"username","nameLocation":"350:8:17","nodeType":"VariableDeclaration","scope":3762,"src":"334:24:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":3743,"name":"string","nodeType":"ElementaryTypeName","src":"334:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"324:40:17"},"returnParameters":{"id":3748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3747,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3762,"src":"386:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3746,"name":"address","nodeType":"ElementaryTypeName","src":"386:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"385:9:17"},"scope":3798,"src":"301:194:17","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3796,"nodeType":"Block","src":"600:218:17","statements":[{"assignments":[3770],"declarations":[{"constant":false,"id":3770,"mutability":"mutable","name":"balance","nameLocation":"618:7:17","nodeType":"VariableDeclaration","scope":3796,"src":"610:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3769,"name":"uint256","nodeType":"ElementaryTypeName","src":"610:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3775,"initialValue":{"arguments":[{"id":3773,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3764,"src":"644:11:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3771,"name":"gitID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"628:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_GitID_$4113","typeString":"contract GitID"}},"id":3772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"634:9:17","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":230,"src":"628:15:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":3774,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"628:28:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"610:46:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3777,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3770,"src":"674:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"684:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"674:11:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"55534552204e4f204749544944","id":3780,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"687:15:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_c4af7ab84eb4a3131119479cb7c99963fdb71676dfeb1728d0189cc016188ed7","typeString":"literal_string \"USER NO GITID\""},"value":"USER NO GITID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c4af7ab84eb4a3131119479cb7c99963fdb71676dfeb1728d0189cc016188ed7","typeString":"literal_string \"USER NO GITID\""}],"id":3776,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"666:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"666:37:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3782,"nodeType":"ExpressionStatement","src":"666:37:17"},{"assignments":[3784],"declarations":[{"constant":false,"id":3784,"mutability":"mutable","name":"tokenId","nameLocation":"721:7:17","nodeType":"VariableDeclaration","scope":3796,"src":"713:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3783,"name":"uint256","nodeType":"ElementaryTypeName","src":"713:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3790,"initialValue":{"arguments":[{"id":3787,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3764,"src":"757:11:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":3788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"770:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":3785,"name":"gitID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"731:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_GitID_$4113","typeString":"contract GitID"}},"id":3786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"737:19:17","memberName":"tokenOfOwnerByIndex","nodeType":"MemberAccess","referencedDeclaration":1251,"src":"731:25:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view external returns (uint256)"}},"id":3789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"731:41:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"713:59:17"},{"expression":{"arguments":[{"id":3793,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3784,"src":"803:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3791,"name":"gitID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"789:5:17","typeDescriptions":{"typeIdentifier":"t_contract$_GitID_$4113","typeString":"contract GitID"}},"id":3792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"795:7:17","memberName":"getName","nodeType":"MemberAccess","referencedDeclaration":4112,"src":"789:13:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) view external returns (string memory)"}},"id":3794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"789:22:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3768,"id":3795,"nodeType":"Return","src":"782:29:17"}]},"functionSelector":"c88cae0c","id":3797,"implemented":true,"kind":"function","modifiers":[],"name":"getGitHubUserName","nameLocation":"510:17:17","nodeType":"FunctionDefinition","parameters":{"id":3765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3764,"mutability":"mutable","name":"userAddress","nameLocation":"544:11:17","nodeType":"VariableDeclaration","scope":3797,"src":"536:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3763,"name":"address","nodeType":"ElementaryTypeName","src":"536:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"527:34:17"},"returnParameters":{"id":3768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3767,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3797,"src":"585:13:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3766,"name":"string","nodeType":"ElementaryTypeName","src":"585:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"584:15:17"},"scope":3798,"src":"501:317:17","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3799,"src":"36:785:17","usedErrors":[],"usedEvents":[]}],"src":"0:822:17"},"id":17},"contracts/gitid/gitid.sol":{"ast":{"absolutePath":"contracts/gitid/gitid.sol","exportedSymbols":{"Address":[1915],"Context":[1937],"ERC165":[2556],"ERC721":[1039],"ERC721Enumerable":[1527],"GitID":[4113],"IERC165":[2568],"IERC721":[1155],"IERC721Enumerable":[1558],"IERC721Metadata":[1585],"IERC721Receiver":[1173],"Math":[3434],"Ownable":[112],"SignedMath":[3539],"Strings":[2166]},"id":4114,"nodeType":"SourceUnit","nodes":[{"id":3800,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"0:24:18"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":3801,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4114,"sourceUnit":113,"src":"26:52:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","id":3802,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4114,"sourceUnit":1040,"src":"79:57:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol","file":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol","id":3803,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4114,"sourceUnit":1528,"src":"137:78:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"@openzeppelin/contracts/utils/Strings.sol","id":3804,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4114,"sourceUnit":2167,"src":"216:51:18","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3805,"name":"Ownable","nameLocations":["288:7:18"],"nodeType":"IdentifierPath","referencedDeclaration":112,"src":"288:7:18"},"id":3806,"nodeType":"InheritanceSpecifier","src":"288:7:18"},{"baseName":{"id":3807,"name":"ERC721","nameLocations":["297:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":1039,"src":"297:6:18"},"id":3808,"nodeType":"InheritanceSpecifier","src":"297:6:18"},{"baseName":{"id":3809,"name":"ERC721Enumerable","nameLocations":["305:16:18"],"nodeType":"IdentifierPath","referencedDeclaration":1527,"src":"305:16:18"},"id":3810,"nodeType":"InheritanceSpecifier","src":"305:16:18"}],"canonicalName":"GitID","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4113,"linearizedBaseContracts":[4113,1527,1558,1039,1585,1155,2556,2568,112,1937],"name":"GitID","nameLocation":"279:5:18","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"15030633","id":3812,"mutability":"mutable","name":"baseName","nameLocation":"369:8:18","nodeType":"VariableDeclaration","scope":4113,"src":"355:22:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":3811,"name":"string","nodeType":"ElementaryTypeName","src":"355:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"public"},{"constant":false,"functionSelector":"6c0360eb","id":3814,"mutability":"mutable","name":"baseURI","nameLocation":"397:7:18","nodeType":"VariableDeclaration","scope":4113,"src":"383:21:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":3813,"name":"string","nodeType":"ElementaryTypeName","src":"383:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"public"},{"constant":false,"functionSelector":"4622ab03","id":3818,"mutability":"mutable","name":"names","nameLocation":"475:5:18","nodeType":"VariableDeclaration","scope":4113,"src":"443:37:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"typeName":{"id":3817,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3815,"name":"uint256","nodeType":"ElementaryTypeName","src":"451:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"443:24:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3816,"name":"string","nodeType":"ElementaryTypeName","src":"460:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"visibility":"public"},{"constant":false,"functionSelector":"f46eccc4","id":3822,"mutability":"mutable","name":"minters","nameLocation":"592:7:18","nodeType":"VariableDeclaration","scope":4113,"src":"562:37:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":3821,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3819,"name":"address","nodeType":"ElementaryTypeName","src":"570:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"562:22:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3820,"name":"bool","nodeType":"ElementaryTypeName","src":"579:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"anonymous":false,"eventSelector":"6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f6","id":3826,"name":"MinterAdded","nameLocation":"613:11:18","nodeType":"EventDefinition","parameters":{"id":3825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3824,"indexed":true,"mutability":"mutable","name":"minter","nameLocation":"641:6:18","nodeType":"VariableDeclaration","scope":3826,"src":"625:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3823,"name":"address","nodeType":"ElementaryTypeName","src":"625:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"624:24:18"},"src":"607:42:18"},{"anonymous":false,"eventSelector":"e94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb66692","id":3830,"name":"MinterRemoved","nameLocation":"660:13:18","nodeType":"EventDefinition","parameters":{"id":3829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3828,"indexed":true,"mutability":"mutable","name":"minter","nameLocation":"690:6:18","nodeType":"VariableDeclaration","scope":3830,"src":"674:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3827,"name":"address","nodeType":"ElementaryTypeName","src":"674:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"673:24:18"},"src":"654:44:18"},{"anonymous":false,"eventSelector":"00834ad8d7a1d8421d149549c7292d11385f5a042a008771d26ffd2d76db6e74","id":3836,"name":"NameRegistered","nameLocation":"709:14:18","nodeType":"EventDefinition","parameters":{"id":3835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3832,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"740:2:18","nodeType":"VariableDeclaration","scope":3836,"src":"724:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3831,"name":"uint256","nodeType":"ElementaryTypeName","src":"724:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3834,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"760:5:18","nodeType":"VariableDeclaration","scope":3836,"src":"744:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3833,"name":"address","nodeType":"ElementaryTypeName","src":"744:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"723:43:18"},"src":"703:64:18"},{"body":{"id":3853,"nodeType":"Block","src":"878:37:18","statements":[{"expression":{"id":3851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3849,"name":"baseName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3812,"src":"888:8:18","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3850,"name":"_baseName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3842,"src":"899:9:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"888:20:18","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3852,"nodeType":"ExpressionStatement","src":"888:20:18"}]},"id":3854,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":3845,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3838,"src":"862:5:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3846,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3840,"src":"869:7:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"id":3847,"kind":"baseConstructorSpecifier","modifierName":{"id":3844,"name":"ERC721","nameLocations":["855:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":1039,"src":"855:6:18"},"nodeType":"ModifierInvocation","src":"855:22:18"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3838,"mutability":"mutable","name":"_name","nameLocation":"800:5:18","nodeType":"VariableDeclaration","scope":3854,"src":"786:19:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3837,"name":"string","nodeType":"ElementaryTypeName","src":"786:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3840,"mutability":"mutable","name":"_symbol","nameLocation":"821:7:18","nodeType":"VariableDeclaration","scope":3854,"src":"807:21:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3839,"name":"string","nodeType":"ElementaryTypeName","src":"807:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3842,"mutability":"mutable","name":"_baseName","nameLocation":"844:9:18","nodeType":"VariableDeclaration","scope":3854,"src":"830:23:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3841,"name":"string","nodeType":"ElementaryTypeName","src":"830:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"785:69:18"},"returnParameters":{"id":3848,"nodeType":"ParameterList","parameters":[],"src":"878:0:18"},"scope":4113,"src":"774:141:18","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[206,1223],"body":{"id":3888,"nodeType":"Block","src":"1030:247:18","statements":[{"assignments":[3865],"declarations":[{"constant":false,"id":3865,"mutability":"mutable","name":"result","nameLocation":"1045:6:18","nodeType":"VariableDeclaration","scope":3888,"src":"1040:11:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3864,"name":"bool","nodeType":"ElementaryTypeName","src":"1040:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3870,"initialValue":{"arguments":[{"id":3868,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3856,"src":"1078:11:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":3866,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1054:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_GitID_$4113_$","typeString":"type(contract super GitID)"}},"id":3867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1060:17:18","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1223,"src":"1054:23:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":3869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1054:36:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"1040:50:18"},{"condition":{"id":3871,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3865,"src":"1104:6:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3875,"nodeType":"IfStatement","src":"1100:48:18","trueBody":{"id":3874,"nodeType":"Block","src":"1112:36:18","statements":[{"expression":{"hexValue":"74727565","id":3872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1133:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3863,"id":3873,"nodeType":"Return","src":"1126:11:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3876,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3856,"src":"1161:11:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3878,"name":"IERC721Enumerable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1558,"src":"1181:17:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Enumerable_$1558_$","typeString":"type(contract IERC721Enumerable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Enumerable_$1558_$","typeString":"type(contract IERC721Enumerable)"}],"id":3877,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1176:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1176:23:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Enumerable_$1558","typeString":"type(contract IERC721Enumerable)"}},"id":3880,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1200:11:18","memberName":"interfaceId","nodeType":"MemberAccess","src":"1176:35:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1161:50:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3885,"nodeType":"IfStatement","src":"1157:92:18","trueBody":{"id":3884,"nodeType":"Block","src":"1213:36:18","statements":[{"expression":{"hexValue":"74727565","id":3882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1234:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3863,"id":3883,"nodeType":"Return","src":"1227:11:18"}]}},{"expression":{"hexValue":"66616c7365","id":3886,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1265:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":3863,"id":3887,"nodeType":"Return","src":"1258:12:18"}]},"functionSelector":"01ffc9a7","id":3889,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"930:17:18","nodeType":"FunctionDefinition","overrides":{"id":3860,"nodeType":"OverrideSpecifier","overrides":[{"id":3858,"name":"ERC721","nameLocations":["989:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":1039,"src":"989:6:18"},{"id":3859,"name":"ERC721Enumerable","nameLocations":["997:16:18"],"nodeType":"IdentifierPath","referencedDeclaration":1527,"src":"997:16:18"}],"src":"980:34:18"},"parameters":{"id":3857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3856,"mutability":"mutable","name":"interfaceId","nameLocation":"955:11:18","nodeType":"VariableDeclaration","scope":3889,"src":"948:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3855,"name":"bytes4","nodeType":"ElementaryTypeName","src":"948:6:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"947:20:18"},"returnParameters":{"id":3863,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3862,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3889,"src":"1024:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3861,"name":"bool","nodeType":"ElementaryTypeName","src":"1024:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1023:6:18"},"scope":4113,"src":"921:356:18","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3899,"nodeType":"Block","src":"1303:56:18","statements":[{"expression":{"arguments":[{"baseExpression":{"id":3892,"name":"minters","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3822,"src":"1321:7:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3895,"indexExpression":{"expression":{"id":3893,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1329:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1333:6:18","memberName":"sender","nodeType":"MemberAccess","src":"1329:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1321:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3891,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1313:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":3896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1313:28:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3897,"nodeType":"ExpressionStatement","src":"1313:28:18"},{"id":3898,"nodeType":"PlaceholderStatement","src":"1351:1:18"}]},"id":3900,"name":"onlyMinter","nameLocation":"1292:10:18","nodeType":"ModifierDefinition","parameters":{"id":3890,"nodeType":"ParameterList","parameters":[],"src":"1303:0:18"},"src":"1283:76:18","virtual":false,"visibility":"internal"},{"baseFunctions":[1010,1365],"body":{"id":3931,"nodeType":"Block","src":"1501:110:18","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3916,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3904,"src":"1529:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3915,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":230,"src":"1519:9:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":3917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1519:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1536:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1519:18:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3914,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1511:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":3920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1511:27:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3921,"nodeType":"ExpressionStatement","src":"1511:27:18"},{"expression":{"arguments":[{"id":3925,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3902,"src":"1575:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3926,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3904,"src":"1581:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3927,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3906,"src":"1585:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3928,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3908,"src":"1594:9:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3922,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1548:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_GitID_$4113_$","typeString":"type(contract super GitID)"}},"id":3924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1554:20:18","memberName":"_beforeTokenTransfer","nodeType":"MemberAccess","referencedDeclaration":1365,"src":"1548:26:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":3929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1548:56:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3930,"nodeType":"ExpressionStatement","src":"1548:56:18"}]},"id":3932,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"1374:20:18","nodeType":"FunctionDefinition","overrides":{"id":3912,"nodeType":"OverrideSpecifier","overrides":[{"id":3910,"name":"ERC721","nameLocations":["1475:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":1039,"src":"1475:6:18"},{"id":3911,"name":"ERC721Enumerable","nameLocations":["1483:16:18"],"nodeType":"IdentifierPath","referencedDeclaration":1527,"src":"1483:16:18"}],"src":"1466:34:18"},"parameters":{"id":3909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3902,"mutability":"mutable","name":"from","nameLocation":"1403:4:18","nodeType":"VariableDeclaration","scope":3932,"src":"1395:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3901,"name":"address","nodeType":"ElementaryTypeName","src":"1395:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3904,"mutability":"mutable","name":"to","nameLocation":"1417:2:18","nodeType":"VariableDeclaration","scope":3932,"src":"1409:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3903,"name":"address","nodeType":"ElementaryTypeName","src":"1409:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3906,"mutability":"mutable","name":"tokenId","nameLocation":"1429:7:18","nodeType":"VariableDeclaration","scope":3932,"src":"1421:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3905,"name":"uint256","nodeType":"ElementaryTypeName","src":"1421:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3908,"mutability":"mutable","name":"batchSize","nameLocation":"1446:9:18","nodeType":"VariableDeclaration","scope":3932,"src":"1438:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3907,"name":"uint256","nodeType":"ElementaryTypeName","src":"1438:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1394:62:18"},"returnParameters":{"id":3913,"nodeType":"ParameterList","parameters":[],"src":"1501:0:18"},"scope":4113,"src":"1365:246:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3949,"nodeType":"Block","src":"1671:73:18","statements":[{"expression":{"id":3943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3939,"name":"minters","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3822,"src":"1681:7:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3941,"indexExpression":{"id":3940,"name":"minter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3934,"src":"1689:6:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1681:15:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3942,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1699:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1681:22:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3944,"nodeType":"ExpressionStatement","src":"1681:22:18"},{"eventCall":{"arguments":[{"id":3946,"name":"minter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3934,"src":"1730:6:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3945,"name":"MinterAdded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3826,"src":"1718:11:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1718:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3948,"nodeType":"EmitStatement","src":"1713:24:18"}]},"functionSelector":"983b2d56","id":3950,"implemented":true,"kind":"function","modifiers":[{"id":3937,"kind":"modifierInvocation","modifierName":{"id":3936,"name":"onlyOwner","nameLocations":["1661:9:18"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1661:9:18"},"nodeType":"ModifierInvocation","src":"1661:9:18"}],"name":"addMinter","nameLocation":"1626:9:18","nodeType":"FunctionDefinition","parameters":{"id":3935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3934,"mutability":"mutable","name":"minter","nameLocation":"1644:6:18","nodeType":"VariableDeclaration","scope":3950,"src":"1636:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3933,"name":"address","nodeType":"ElementaryTypeName","src":"1636:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1635:16:18"},"returnParameters":{"id":3938,"nodeType":"ParameterList","parameters":[],"src":"1671:0:18"},"scope":4113,"src":"1617:127:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3967,"nodeType":"Block","src":"1855:76:18","statements":[{"expression":{"id":3961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3957,"name":"minters","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3822,"src":"1865:7:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3959,"indexExpression":{"id":3958,"name":"minter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3952,"src":"1873:6:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1865:15:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":3960,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1883:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1865:23:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3962,"nodeType":"ExpressionStatement","src":"1865:23:18"},{"eventCall":{"arguments":[{"id":3964,"name":"minter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3952,"src":"1917:6:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3963,"name":"MinterRemoved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3830,"src":"1903:13:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1903:21:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3966,"nodeType":"EmitStatement","src":"1898:26:18"}]},"functionSelector":"3092afd5","id":3968,"implemented":true,"kind":"function","modifiers":[{"id":3955,"kind":"modifierInvocation","modifierName":{"id":3954,"name":"onlyOwner","nameLocations":["1845:9:18"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1845:9:18"},"nodeType":"ModifierInvocation","src":"1845:9:18"}],"name":"removeMinter","nameLocation":"1807:12:18","nodeType":"FunctionDefinition","parameters":{"id":3953,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3952,"mutability":"mutable","name":"minter","nameLocation":"1828:6:18","nodeType":"VariableDeclaration","scope":3968,"src":"1820:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3951,"name":"address","nodeType":"ElementaryTypeName","src":"1820:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1819:16:18"},"returnParameters":{"id":3956,"nodeType":"ParameterList","parameters":[],"src":"1855:0:18"},"scope":4113,"src":"1798:133:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3986,"nodeType":"Block","src":"2190:50:18","statements":[{"expression":{"arguments":[{"id":3981,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3971,"src":"2217:2:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3982,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3973,"src":"2221:4:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3983,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3975,"src":"2227:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3980,"name":"_register","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4021,"src":"2207:9:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$_t_address_$returns$__$","typeString":"function (uint256,string memory,address)"}},"id":3984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2207:26:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"functionReturnParameters":3979,"id":3985,"nodeType":"Return","src":"2200:33:18"}]},"documentation":{"id":3969,"nodeType":"StructuredDocumentation","src":"1938:162:18","text":" @dev Register a name.\n @param id The token ID (keccak256 of the label).\n @param owner The address that should own the registration."},"functionSelector":"601219b7","id":3987,"implemented":true,"kind":"function","modifiers":[{"id":3978,"kind":"modifierInvocation","modifierName":{"id":3977,"name":"onlyMinter","nameLocations":["2179:10:18"],"nodeType":"IdentifierPath","referencedDeclaration":3900,"src":"2179:10:18"},"nodeType":"ModifierInvocation","src":"2179:10:18"}],"name":"register","nameLocation":"2114:8:18","nodeType":"FunctionDefinition","parameters":{"id":3976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3971,"mutability":"mutable","name":"id","nameLocation":"2131:2:18","nodeType":"VariableDeclaration","scope":3987,"src":"2123:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3970,"name":"uint256","nodeType":"ElementaryTypeName","src":"2123:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3973,"mutability":"mutable","name":"name","nameLocation":"2149:4:18","nodeType":"VariableDeclaration","scope":3987,"src":"2135:18:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3972,"name":"string","nodeType":"ElementaryTypeName","src":"2135:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3975,"mutability":"mutable","name":"owner","nameLocation":"2163:5:18","nodeType":"VariableDeclaration","scope":3987,"src":"2155:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3974,"name":"address","nodeType":"ElementaryTypeName","src":"2155:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2122:47:18"},"returnParameters":{"id":3979,"nodeType":"ParameterList","parameters":[],"src":"2190:0:18"},"scope":4113,"src":"2105:135:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4020,"nodeType":"Block","src":"2322:154:18","statements":[{"expression":{"arguments":[{"id":4000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2340:12:18","subExpression":{"arguments":[{"id":3998,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3989,"src":"2349:2:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3997,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"2341:7:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":3999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2341:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416c72656164792072656769737465726564","id":4001,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2354:20:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_4935f8dc8deae1355305b992e890d0242809a3705c9c83131ed47acca0dd4fe2","typeString":"literal_string \"Already registered\""},"value":"Already registered"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4935f8dc8deae1355305b992e890d0242809a3705c9c83131ed47acca0dd4fe2","typeString":"literal_string \"Already registered\""}],"id":3996,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2332:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2332:43:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4003,"nodeType":"ExpressionStatement","src":"2332:43:18"},{"expression":{"arguments":[{"id":4005,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3993,"src":"2392:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4006,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3989,"src":"2399:2:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4004,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"2386:5:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2386:16:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4008,"nodeType":"ExpressionStatement","src":"2386:16:18"},{"expression":{"id":4013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4009,"name":"names","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3818,"src":"2412:5:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":4011,"indexExpression":{"id":4010,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3989,"src":"2418:2:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2412:9:18","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4012,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3991,"src":"2424:4:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2412:16:18","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":4014,"nodeType":"ExpressionStatement","src":"2412:16:18"},{"eventCall":{"arguments":[{"id":4016,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3989,"src":"2459:2:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4017,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3993,"src":"2463:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4015,"name":"NameRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3836,"src":"2444:14:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,address)"}},"id":4018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2444:25:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4019,"nodeType":"EmitStatement","src":"2439:30:18"}]},"id":4021,"implemented":true,"kind":"function","modifiers":[],"name":"_register","nameLocation":"2256:9:18","nodeType":"FunctionDefinition","parameters":{"id":3994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3989,"mutability":"mutable","name":"id","nameLocation":"2274:2:18","nodeType":"VariableDeclaration","scope":4021,"src":"2266:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3988,"name":"uint256","nodeType":"ElementaryTypeName","src":"2266:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3991,"mutability":"mutable","name":"name","nameLocation":"2292:4:18","nodeType":"VariableDeclaration","scope":4021,"src":"2278:18:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3990,"name":"string","nodeType":"ElementaryTypeName","src":"2278:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3993,"mutability":"mutable","name":"owner","nameLocation":"2306:5:18","nodeType":"VariableDeclaration","scope":4021,"src":"2298:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3992,"name":"address","nodeType":"ElementaryTypeName","src":"2298:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2265:47:18"},"returnParameters":{"id":3995,"nodeType":"ParameterList","parameters":[],"src":"2322:0:18"},"scope":4113,"src":"2247:229:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4046,"nodeType":"Block","src":"2556:125:18","statements":[{"assignments":[4029],"declarations":[{"constant":false,"id":4029,"mutability":"mutable","name":"label","nameLocation":"2574:5:18","nodeType":"VariableDeclaration","scope":4046,"src":"2566:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4028,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2566:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4036,"initialValue":{"arguments":[{"arguments":[{"id":4033,"name":"username","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4023,"src":"2598:8:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4032,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2592:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4031,"name":"bytes","nodeType":"ElementaryTypeName","src":"2592:5:18","typeDescriptions":{}}},"id":4034,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2592:15:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4030,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2582:9:18","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2582:26:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2566:42:18"},{"assignments":[4038],"declarations":[{"constant":false,"id":4038,"mutability":"mutable","name":"tokenId","nameLocation":"2626:7:18","nodeType":"VariableDeclaration","scope":4046,"src":"2618:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4037,"name":"uint256","nodeType":"ElementaryTypeName","src":"2618:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4043,"initialValue":{"arguments":[{"id":4041,"name":"label","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4029,"src":"2644:5:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4040,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2636:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4039,"name":"uint256","nodeType":"ElementaryTypeName","src":"2636:7:18","typeDescriptions":{}}},"id":4042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2636:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2618:32:18"},{"expression":{"id":4044,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4038,"src":"2667:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4027,"id":4045,"nodeType":"Return","src":"2660:14:18"}]},"functionSelector":"1e7663bc","id":4047,"implemented":true,"kind":"function","modifiers":[],"name":"getTokenId","nameLocation":"2491:10:18","nodeType":"FunctionDefinition","parameters":{"id":4024,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4023,"mutability":"mutable","name":"username","nameLocation":"2516:8:18","nodeType":"VariableDeclaration","scope":4047,"src":"2502:22:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4022,"name":"string","nodeType":"ElementaryTypeName","src":"2502:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2501:24:18"},"returnParameters":{"id":4027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4026,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4047,"src":"2547:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4025,"name":"uint256","nodeType":"ElementaryTypeName","src":"2547:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2546:9:18"},"scope":4113,"src":"2482:199:18","stateMutability":"pure","virtual":false,"visibility":"public"},{"baseFunctions":[317],"body":{"id":4083,"nodeType":"Block","src":"2767:176:18","statements":[{"expression":{"arguments":[{"id":4056,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4049,"src":"2792:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4055,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"2777:14:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":4057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2777:23:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4058,"nodeType":"ExpressionStatement","src":"2777:23:18"},{"assignments":[4060],"declarations":[{"constant":false,"id":4060,"mutability":"mutable","name":"name","nameLocation":"2824:4:18","nodeType":"VariableDeclaration","scope":4083,"src":"2810:18:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4059,"name":"string","nodeType":"ElementaryTypeName","src":"2810:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":4064,"initialValue":{"arguments":[{"id":4062,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4049,"src":"2839:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4061,"name":"getName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4112,"src":"2831:7:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) view returns (string memory)"}},"id":4063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2831:16:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2810:37:18"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":4067,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3814,"src":"2870:7:18","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":4066,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2864:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4065,"name":"bytes","nodeType":"ElementaryTypeName","src":"2864:5:18","typeDescriptions":{}}},"id":4068,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2864:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes storage pointer"}},"id":4069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2879:6:18","memberName":"length","nodeType":"MemberAccess","src":"2864:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2888:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2864:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":4080,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2934:2:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":4081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2864:72:18","trueExpression":{"arguments":[{"arguments":[{"id":4076,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3814,"src":"2916:7:18","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},{"id":4077,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"2925:4:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":4074,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2899:3:18","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4075,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2903:12:18","memberName":"encodePacked","nodeType":"MemberAccess","src":"2899:16:18","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4078,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2899:31:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4073,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2892:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":4072,"name":"string","nodeType":"ElementaryTypeName","src":"2892:6:18","typeDescriptions":{}}},"id":4079,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2892:39:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":4054,"id":4082,"nodeType":"Return","src":"2857:79:18"}]},"functionSelector":"c87b56dd","id":4084,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"2696:8:18","nodeType":"FunctionDefinition","overrides":{"id":4051,"nodeType":"OverrideSpecifier","overrides":[],"src":"2734:8:18"},"parameters":{"id":4050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4049,"mutability":"mutable","name":"tokenId","nameLocation":"2713:7:18","nodeType":"VariableDeclaration","scope":4084,"src":"2705:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4048,"name":"uint256","nodeType":"ElementaryTypeName","src":"2705:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2704:17:18"},"returnParameters":{"id":4054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4053,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4084,"src":"2752:13:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4052,"name":"string","nodeType":"ElementaryTypeName","src":"2752:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2751:15:18"},"scope":4113,"src":"2687:256:18","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4095,"nodeType":"Block","src":"3007:30:18","statements":[{"expression":{"id":4093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4091,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3814,"src":"3017:7:18","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4092,"name":"uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4086,"src":"3027:3:18","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"src":"3017:13:18","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":4094,"nodeType":"ExpressionStatement","src":"3017:13:18"}]},"functionSelector":"55f804b3","id":4096,"implemented":true,"kind":"function","modifiers":[{"id":4089,"kind":"modifierInvocation","modifierName":{"id":4088,"name":"onlyOwner","nameLocations":["2997:9:18"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"2997:9:18"},"nodeType":"ModifierInvocation","src":"2997:9:18"}],"name":"setBaseURI","nameLocation":"2958:10:18","nodeType":"FunctionDefinition","parameters":{"id":4087,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4086,"mutability":"mutable","name":"uri","nameLocation":"2985:3:18","nodeType":"VariableDeclaration","scope":4096,"src":"2969:19:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":4085,"name":"string","nodeType":"ElementaryTypeName","src":"2969:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2968:21:18"},"returnParameters":{"id":4090,"nodeType":"ParameterList","parameters":[],"src":"3007:0:18"},"scope":4113,"src":"2949:88:18","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4111,"nodeType":"Block","src":"3112:73:18","statements":[{"assignments":[4104],"declarations":[{"constant":false,"id":4104,"mutability":"mutable","name":"name","nameLocation":"3136:4:18","nodeType":"VariableDeclaration","scope":4111,"src":"3122:18:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4103,"name":"string","nodeType":"ElementaryTypeName","src":"3122:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":4108,"initialValue":{"baseExpression":{"id":4105,"name":"names","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3818,"src":"3143:5:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":4107,"indexExpression":{"id":4106,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4098,"src":"3149:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3143:14:18","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"VariableDeclarationStatement","src":"3122:35:18"},{"expression":{"id":4109,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4104,"src":"3174:4:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":4102,"id":4110,"nodeType":"Return","src":"3167:11:18"}]},"functionSelector":"6b8ff574","id":4112,"implemented":true,"kind":"function","modifiers":[],"name":"getName","nameLocation":"3052:7:18","nodeType":"FunctionDefinition","parameters":{"id":4099,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4098,"mutability":"mutable","name":"tokenId","nameLocation":"3068:7:18","nodeType":"VariableDeclaration","scope":4112,"src":"3060:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4097,"name":"uint256","nodeType":"ElementaryTypeName","src":"3060:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3059:17:18"},"returnParameters":{"id":4102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4101,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4112,"src":"3097:13:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4100,"name":"string","nodeType":"ElementaryTypeName","src":"3097:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3096:15:18"},"scope":4113,"src":"3043:142:18","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":4114,"src":"270:2917:18","usedErrors":[],"usedEvents":[13,1054,1063,1072,3826,3830,3836]}],"src":"0:3188:18"},"id":18}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ERC721":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"constructor":{"details":"Initializes the contract by setting a `name` and a `symbol` to the token collection."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_175":{"entryPoint":null,"id":175,"parameterSlots":2,"returnSlots":0},"abi_decode_string_fromMemory":{"entryPoint":112,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":287,"id":null,"parameterSlots":2,"returnSlots":2},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":453,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":536,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":393,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":90,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4144:19","statements":[{"nodeType":"YulBlock","src":"6:3:19","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:19","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:19","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:19","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:19"},"nodeType":"YulFunctionCall","src":"66:20:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:19"},"nodeType":"YulFunctionCall","src":"56:31:19"},"nodeType":"YulExpressionStatement","src":"56:31:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:19","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:19","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:19"},"nodeType":"YulFunctionCall","src":"96:15:19"},"nodeType":"YulExpressionStatement","src":"96:15:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:19","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:19"},"nodeType":"YulFunctionCall","src":"120:15:19"},"nodeType":"YulExpressionStatement","src":"120:15:19"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:19"},{"body":{"nodeType":"YulBlock","src":"210:776:19","statements":[{"body":{"nodeType":"YulBlock","src":"259:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"268:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"271:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"261:6:19"},"nodeType":"YulFunctionCall","src":"261:12:19"},"nodeType":"YulExpressionStatement","src":"261:12:19"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"238:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"246:4:19","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"234:3:19"},"nodeType":"YulFunctionCall","src":"234:17:19"},{"name":"end","nodeType":"YulIdentifier","src":"253:3:19"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"230:3:19"},"nodeType":"YulFunctionCall","src":"230:27:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"223:6:19"},"nodeType":"YulFunctionCall","src":"223:35:19"},"nodeType":"YulIf","src":"220:55:19"},{"nodeType":"YulVariableDeclaration","src":"284:23:19","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"300:6:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"294:5:19"},"nodeType":"YulFunctionCall","src":"294:13:19"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"288:2:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"316:28:19","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"334:2:19","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"338:1:19","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"330:3:19"},"nodeType":"YulFunctionCall","src":"330:10:19"},{"kind":"number","nodeType":"YulLiteral","src":"342:1:19","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"326:3:19"},"nodeType":"YulFunctionCall","src":"326:18:19"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"320:2:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"367:22:19","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"369:16:19"},"nodeType":"YulFunctionCall","src":"369:18:19"},"nodeType":"YulExpressionStatement","src":"369:18:19"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"359:2:19"},{"name":"_2","nodeType":"YulIdentifier","src":"363:2:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"356:2:19"},"nodeType":"YulFunctionCall","src":"356:10:19"},"nodeType":"YulIf","src":"353:36:19"},{"nodeType":"YulVariableDeclaration","src":"398:17:19","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"412:2:19","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"408:3:19"},"nodeType":"YulFunctionCall","src":"408:7:19"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"402:2:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"424:23:19","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"444:2:19","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"438:5:19"},"nodeType":"YulFunctionCall","src":"438:9:19"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"428:6:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"456:71:19","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"478:6:19"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"502:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"506:4:19","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"498:3:19"},"nodeType":"YulFunctionCall","src":"498:13:19"},{"name":"_3","nodeType":"YulIdentifier","src":"513:2:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"494:3:19"},"nodeType":"YulFunctionCall","src":"494:22:19"},{"kind":"number","nodeType":"YulLiteral","src":"518:2:19","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"490:3:19"},"nodeType":"YulFunctionCall","src":"490:31:19"},{"name":"_3","nodeType":"YulIdentifier","src":"523:2:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"486:3:19"},"nodeType":"YulFunctionCall","src":"486:40:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"474:3:19"},"nodeType":"YulFunctionCall","src":"474:53:19"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"460:10:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"586:22:19","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"588:16:19"},"nodeType":"YulFunctionCall","src":"588:18:19"},"nodeType":"YulExpressionStatement","src":"588:18:19"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"545:10:19"},{"name":"_2","nodeType":"YulIdentifier","src":"557:2:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"542:2:19"},"nodeType":"YulFunctionCall","src":"542:18:19"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"565:10:19"},{"name":"memPtr","nodeType":"YulIdentifier","src":"577:6:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"562:2:19"},"nodeType":"YulFunctionCall","src":"562:22:19"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"539:2:19"},"nodeType":"YulFunctionCall","src":"539:46:19"},"nodeType":"YulIf","src":"536:72:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"624:2:19","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"628:10:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"617:6:19"},"nodeType":"YulFunctionCall","src":"617:22:19"},"nodeType":"YulExpressionStatement","src":"617:22:19"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"655:6:19"},{"name":"_1","nodeType":"YulIdentifier","src":"663:2:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"648:6:19"},"nodeType":"YulFunctionCall","src":"648:18:19"},"nodeType":"YulExpressionStatement","src":"648:18:19"},{"nodeType":"YulVariableDeclaration","src":"675:14:19","value":{"kind":"number","nodeType":"YulLiteral","src":"685:4:19","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"679:2:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"735:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"744:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"747:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"737:6:19"},"nodeType":"YulFunctionCall","src":"737:12:19"},"nodeType":"YulExpressionStatement","src":"737:12:19"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"712:6:19"},{"name":"_1","nodeType":"YulIdentifier","src":"720:2:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"708:3:19"},"nodeType":"YulFunctionCall","src":"708:15:19"},{"name":"_4","nodeType":"YulIdentifier","src":"725:2:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"704:3:19"},"nodeType":"YulFunctionCall","src":"704:24:19"},{"name":"end","nodeType":"YulIdentifier","src":"730:3:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"701:2:19"},"nodeType":"YulFunctionCall","src":"701:33:19"},"nodeType":"YulIf","src":"698:53:19"},{"nodeType":"YulVariableDeclaration","src":"760:10:19","value":{"kind":"number","nodeType":"YulLiteral","src":"769:1:19","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"764:1:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"825:87:19","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"854:6:19"},{"name":"i","nodeType":"YulIdentifier","src":"862:1:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"850:3:19"},"nodeType":"YulFunctionCall","src":"850:14:19"},{"name":"_4","nodeType":"YulIdentifier","src":"866:2:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"846:3:19"},"nodeType":"YulFunctionCall","src":"846:23:19"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"885:6:19"},{"name":"i","nodeType":"YulIdentifier","src":"893:1:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"881:3:19"},"nodeType":"YulFunctionCall","src":"881:14:19"},{"name":"_4","nodeType":"YulIdentifier","src":"897:2:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"877:3:19"},"nodeType":"YulFunctionCall","src":"877:23:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"871:5:19"},"nodeType":"YulFunctionCall","src":"871:30:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"839:6:19"},"nodeType":"YulFunctionCall","src":"839:63:19"},"nodeType":"YulExpressionStatement","src":"839:63:19"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"790:1:19"},{"name":"_1","nodeType":"YulIdentifier","src":"793:2:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"787:2:19"},"nodeType":"YulFunctionCall","src":"787:9:19"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"797:19:19","statements":[{"nodeType":"YulAssignment","src":"799:15:19","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"808:1:19"},{"name":"_4","nodeType":"YulIdentifier","src":"811:2:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"804:3:19"},"nodeType":"YulFunctionCall","src":"804:10:19"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"799:1:19"}]}]},"pre":{"nodeType":"YulBlock","src":"783:3:19","statements":[]},"src":"779:133:19"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"936:6:19"},{"name":"_1","nodeType":"YulIdentifier","src":"944:2:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"932:3:19"},"nodeType":"YulFunctionCall","src":"932:15:19"},{"name":"_4","nodeType":"YulIdentifier","src":"949:2:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"928:3:19"},"nodeType":"YulFunctionCall","src":"928:24:19"},{"kind":"number","nodeType":"YulLiteral","src":"954:1:19","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"921:6:19"},"nodeType":"YulFunctionCall","src":"921:35:19"},"nodeType":"YulExpressionStatement","src":"921:35:19"},{"nodeType":"YulAssignment","src":"965:15:19","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"974:6:19"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"965:5:19"}]}]},"name":"abi_decode_string_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"184:6:19","type":""},{"name":"end","nodeType":"YulTypedName","src":"192:3:19","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"200:5:19","type":""}],"src":"146:840:19"},{"body":{"nodeType":"YulBlock","src":"1109:444:19","statements":[{"body":{"nodeType":"YulBlock","src":"1155:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1164:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1167:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1157:6:19"},"nodeType":"YulFunctionCall","src":"1157:12:19"},"nodeType":"YulExpressionStatement","src":"1157:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1130:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"1139:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1126:3:19"},"nodeType":"YulFunctionCall","src":"1126:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"1151:2:19","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1122:3:19"},"nodeType":"YulFunctionCall","src":"1122:32:19"},"nodeType":"YulIf","src":"1119:52:19"},{"nodeType":"YulVariableDeclaration","src":"1180:30:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1200:9:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1194:5:19"},"nodeType":"YulFunctionCall","src":"1194:16:19"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1184:6:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1219:28:19","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1237:2:19","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1241:1:19","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1233:3:19"},"nodeType":"YulFunctionCall","src":"1233:10:19"},{"kind":"number","nodeType":"YulLiteral","src":"1245:1:19","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1229:3:19"},"nodeType":"YulFunctionCall","src":"1229:18:19"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1223:2:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"1274:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1283:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1286:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1276:6:19"},"nodeType":"YulFunctionCall","src":"1276:12:19"},"nodeType":"YulExpressionStatement","src":"1276:12:19"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1262:6:19"},{"name":"_1","nodeType":"YulIdentifier","src":"1270:2:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1259:2:19"},"nodeType":"YulFunctionCall","src":"1259:14:19"},"nodeType":"YulIf","src":"1256:34:19"},{"nodeType":"YulAssignment","src":"1299:71:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1342:9:19"},{"name":"offset","nodeType":"YulIdentifier","src":"1353:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1338:3:19"},"nodeType":"YulFunctionCall","src":"1338:22:19"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1362:7:19"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1309:28:19"},"nodeType":"YulFunctionCall","src":"1309:61:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1299:6:19"}]},{"nodeType":"YulVariableDeclaration","src":"1379:41:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1405:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1416:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1401:3:19"},"nodeType":"YulFunctionCall","src":"1401:18:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1395:5:19"},"nodeType":"YulFunctionCall","src":"1395:25:19"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1383:8:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"1449:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1458:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1461:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1451:6:19"},"nodeType":"YulFunctionCall","src":"1451:12:19"},"nodeType":"YulExpressionStatement","src":"1451:12:19"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1435:8:19"},{"name":"_1","nodeType":"YulIdentifier","src":"1445:2:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1432:2:19"},"nodeType":"YulFunctionCall","src":"1432:16:19"},"nodeType":"YulIf","src":"1429:36:19"},{"nodeType":"YulAssignment","src":"1474:73:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1517:9:19"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1528:8:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1513:3:19"},"nodeType":"YulFunctionCall","src":"1513:24:19"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1539:7:19"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1484:28:19"},"nodeType":"YulFunctionCall","src":"1484:63:19"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1474:6:19"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1067:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1078:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1090:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1098:6:19","type":""}],"src":"991:562:19"},{"body":{"nodeType":"YulBlock","src":"1613:325:19","statements":[{"nodeType":"YulAssignment","src":"1623:22:19","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1637:1:19","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"1640:4:19"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1633:3:19"},"nodeType":"YulFunctionCall","src":"1633:12:19"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1623:6:19"}]},{"nodeType":"YulVariableDeclaration","src":"1654:38:19","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1684:4:19"},{"kind":"number","nodeType":"YulLiteral","src":"1690:1:19","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1680:3:19"},"nodeType":"YulFunctionCall","src":"1680:12:19"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"1658:18:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"1731:31:19","statements":[{"nodeType":"YulAssignment","src":"1733:27:19","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1747:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"1755:4:19","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1743:3:19"},"nodeType":"YulFunctionCall","src":"1743:17:19"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1733:6:19"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1711:18:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1704:6:19"},"nodeType":"YulFunctionCall","src":"1704:26:19"},"nodeType":"YulIf","src":"1701:61:19"},{"body":{"nodeType":"YulBlock","src":"1821:111:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1842:1:19","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1849:3:19","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1854:10:19","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1845:3:19"},"nodeType":"YulFunctionCall","src":"1845:20:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1835:6:19"},"nodeType":"YulFunctionCall","src":"1835:31:19"},"nodeType":"YulExpressionStatement","src":"1835:31:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1886:1:19","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1889:4:19","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1879:6:19"},"nodeType":"YulFunctionCall","src":"1879:15:19"},"nodeType":"YulExpressionStatement","src":"1879:15:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1914:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1917:4:19","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1907:6:19"},"nodeType":"YulFunctionCall","src":"1907:15:19"},"nodeType":"YulExpressionStatement","src":"1907:15:19"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1777:18:19"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1800:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"1808:2:19","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1797:2:19"},"nodeType":"YulFunctionCall","src":"1797:14:19"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1774:2:19"},"nodeType":"YulFunctionCall","src":"1774:38:19"},"nodeType":"YulIf","src":"1771:161:19"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1593:4:19","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1602:6:19","type":""}],"src":"1558:380:19"},{"body":{"nodeType":"YulBlock","src":"1999:65:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2016:1:19","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"2019:3:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2009:6:19"},"nodeType":"YulFunctionCall","src":"2009:14:19"},"nodeType":"YulExpressionStatement","src":"2009:14:19"},{"nodeType":"YulAssignment","src":"2032:26:19","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2050:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2053:4:19","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2040:9:19"},"nodeType":"YulFunctionCall","src":"2040:18:19"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"2032:4:19"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"1982:3:19","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"1990:4:19","type":""}],"src":"1943:121:19"},{"body":{"nodeType":"YulBlock","src":"2150:464:19","statements":[{"body":{"nodeType":"YulBlock","src":"2183:425:19","statements":[{"nodeType":"YulVariableDeclaration","src":"2197:11:19","value":{"kind":"number","nodeType":"YulLiteral","src":"2207:1:19","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2201:2:19","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2228:2:19"},{"name":"array","nodeType":"YulIdentifier","src":"2232:5:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2221:6:19"},"nodeType":"YulFunctionCall","src":"2221:17:19"},"nodeType":"YulExpressionStatement","src":"2221:17:19"},{"nodeType":"YulVariableDeclaration","src":"2251:31:19","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2273:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"2277:4:19","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2263:9:19"},"nodeType":"YulFunctionCall","src":"2263:19:19"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"2255:4:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2295:57:19","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2318:4:19"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2328:1:19","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2335:10:19"},{"kind":"number","nodeType":"YulLiteral","src":"2347:2:19","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2331:3:19"},"nodeType":"YulFunctionCall","src":"2331:19:19"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2324:3:19"},"nodeType":"YulFunctionCall","src":"2324:27:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2314:3:19"},"nodeType":"YulFunctionCall","src":"2314:38:19"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"2299:11:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"2389:23:19","statements":[{"nodeType":"YulAssignment","src":"2391:19:19","value":{"name":"data","nodeType":"YulIdentifier","src":"2406:4:19"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"2391:11:19"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2371:10:19"},{"kind":"number","nodeType":"YulLiteral","src":"2383:4:19","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2368:2:19"},"nodeType":"YulFunctionCall","src":"2368:20:19"},"nodeType":"YulIf","src":"2365:47:19"},{"nodeType":"YulVariableDeclaration","src":"2425:41:19","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2439:4:19"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2449:1:19","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2456:3:19"},{"kind":"number","nodeType":"YulLiteral","src":"2461:2:19","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2452:3:19"},"nodeType":"YulFunctionCall","src":"2452:12:19"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2445:3:19"},"nodeType":"YulFunctionCall","src":"2445:20:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2435:3:19"},"nodeType":"YulFunctionCall","src":"2435:31:19"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2429:2:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2479:24:19","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"2492:11:19"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"2483:5:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"2577:21:19","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2586:5:19"},{"name":"_1","nodeType":"YulIdentifier","src":"2593:2:19"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2579:6:19"},"nodeType":"YulFunctionCall","src":"2579:17:19"},"nodeType":"YulExpressionStatement","src":"2579:17:19"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2527:5:19"},{"name":"_2","nodeType":"YulIdentifier","src":"2534:2:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2524:2:19"},"nodeType":"YulFunctionCall","src":"2524:13:19"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2538:26:19","statements":[{"nodeType":"YulAssignment","src":"2540:22:19","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2553:5:19"},{"kind":"number","nodeType":"YulLiteral","src":"2560:1:19","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2549:3:19"},"nodeType":"YulFunctionCall","src":"2549:13:19"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"2540:5:19"}]}]},"pre":{"nodeType":"YulBlock","src":"2520:3:19","statements":[]},"src":"2516:82:19"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2166:3:19"},{"kind":"number","nodeType":"YulLiteral","src":"2171:2:19","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2163:2:19"},"nodeType":"YulFunctionCall","src":"2163:11:19"},"nodeType":"YulIf","src":"2160:448:19"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"2122:5:19","type":""},{"name":"len","nodeType":"YulTypedName","src":"2129:3:19","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"2134:10:19","type":""}],"src":"2069:545:19"},{"body":{"nodeType":"YulBlock","src":"2704:81:19","statements":[{"nodeType":"YulAssignment","src":"2714:65:19","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2729:4:19"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2747:1:19","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"2750:3:19"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2743:3:19"},"nodeType":"YulFunctionCall","src":"2743:11:19"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2760:1:19","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2756:3:19"},"nodeType":"YulFunctionCall","src":"2756:6:19"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2739:3:19"},"nodeType":"YulFunctionCall","src":"2739:24:19"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2735:3:19"},"nodeType":"YulFunctionCall","src":"2735:29:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2725:3:19"},"nodeType":"YulFunctionCall","src":"2725:40:19"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2771:1:19","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"2774:3:19"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2767:3:19"},"nodeType":"YulFunctionCall","src":"2767:11:19"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2722:2:19"},"nodeType":"YulFunctionCall","src":"2722:57:19"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"2714:4:19"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2681:4:19","type":""},{"name":"len","nodeType":"YulTypedName","src":"2687:3:19","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"2695:4:19","type":""}],"src":"2619:166:19"},{"body":{"nodeType":"YulBlock","src":"2886:1256:19","statements":[{"nodeType":"YulVariableDeclaration","src":"2896:24:19","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2916:3:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2910:5:19"},"nodeType":"YulFunctionCall","src":"2910:10:19"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"2900:6:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"2963:22:19","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2965:16:19"},"nodeType":"YulFunctionCall","src":"2965:18:19"},"nodeType":"YulExpressionStatement","src":"2965:18:19"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"2935:6:19"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2951:2:19","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"2955:1:19","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2947:3:19"},"nodeType":"YulFunctionCall","src":"2947:10:19"},{"kind":"number","nodeType":"YulLiteral","src":"2959:1:19","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2943:3:19"},"nodeType":"YulFunctionCall","src":"2943:18:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2932:2:19"},"nodeType":"YulFunctionCall","src":"2932:30:19"},"nodeType":"YulIf","src":"2929:56:19"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3038:4:19"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3076:4:19"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"3070:5:19"},"nodeType":"YulFunctionCall","src":"3070:11:19"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"3044:25:19"},"nodeType":"YulFunctionCall","src":"3044:38:19"},{"name":"newLen","nodeType":"YulIdentifier","src":"3084:6:19"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"2994:43:19"},"nodeType":"YulFunctionCall","src":"2994:97:19"},"nodeType":"YulExpressionStatement","src":"2994:97:19"},{"nodeType":"YulVariableDeclaration","src":"3100:18:19","value":{"kind":"number","nodeType":"YulLiteral","src":"3117:1:19","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"3104:9:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3127:23:19","value":{"kind":"number","nodeType":"YulLiteral","src":"3146:4:19","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"3131:11:19","type":""}]},{"nodeType":"YulAssignment","src":"3159:24:19","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3172:11:19"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3159:9:19"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"3229:656:19","statements":[{"nodeType":"YulVariableDeclaration","src":"3243:35:19","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3262:6:19"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3274:2:19","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3270:3:19"},"nodeType":"YulFunctionCall","src":"3270:7:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3258:3:19"},"nodeType":"YulFunctionCall","src":"3258:20:19"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"3247:7:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3291:49:19","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3335:4:19"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"3305:29:19"},"nodeType":"YulFunctionCall","src":"3305:35:19"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"3295:6:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3353:10:19","value":{"kind":"number","nodeType":"YulLiteral","src":"3362:1:19","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3357:1:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"3440:172:19","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3465:6:19"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3483:3:19"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3488:9:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3479:3:19"},"nodeType":"YulFunctionCall","src":"3479:19:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3473:5:19"},"nodeType":"YulFunctionCall","src":"3473:26:19"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3458:6:19"},"nodeType":"YulFunctionCall","src":"3458:42:19"},"nodeType":"YulExpressionStatement","src":"3458:42:19"},{"nodeType":"YulAssignment","src":"3517:24:19","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3531:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"3539:1:19","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3527:3:19"},"nodeType":"YulFunctionCall","src":"3527:14:19"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3517:6:19"}]},{"nodeType":"YulAssignment","src":"3558:40:19","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3575:9:19"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3586:11:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3571:3:19"},"nodeType":"YulFunctionCall","src":"3571:27:19"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3558:9:19"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3387:1:19"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"3390:7:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3384:2:19"},"nodeType":"YulFunctionCall","src":"3384:14:19"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3399:28:19","statements":[{"nodeType":"YulAssignment","src":"3401:24:19","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3410:1:19"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3413:11:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3406:3:19"},"nodeType":"YulFunctionCall","src":"3406:19:19"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3401:1:19"}]}]},"pre":{"nodeType":"YulBlock","src":"3380:3:19","statements":[]},"src":"3376:236:19"},{"body":{"nodeType":"YulBlock","src":"3660:166:19","statements":[{"nodeType":"YulVariableDeclaration","src":"3678:43:19","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3705:3:19"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3710:9:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3701:3:19"},"nodeType":"YulFunctionCall","src":"3701:19:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3695:5:19"},"nodeType":"YulFunctionCall","src":"3695:26:19"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"3682:9:19","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3745:6:19"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"3757:9:19"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3784:1:19","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"3787:6:19"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3780:3:19"},"nodeType":"YulFunctionCall","src":"3780:14:19"},{"kind":"number","nodeType":"YulLiteral","src":"3796:3:19","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3776:3:19"},"nodeType":"YulFunctionCall","src":"3776:24:19"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3806:1:19","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3802:3:19"},"nodeType":"YulFunctionCall","src":"3802:6:19"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3772:3:19"},"nodeType":"YulFunctionCall","src":"3772:37:19"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3768:3:19"},"nodeType":"YulFunctionCall","src":"3768:42:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3753:3:19"},"nodeType":"YulFunctionCall","src":"3753:58:19"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3738:6:19"},"nodeType":"YulFunctionCall","src":"3738:74:19"},"nodeType":"YulExpressionStatement","src":"3738:74:19"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"3631:7:19"},{"name":"newLen","nodeType":"YulIdentifier","src":"3640:6:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3628:2:19"},"nodeType":"YulFunctionCall","src":"3628:19:19"},"nodeType":"YulIf","src":"3625:201:19"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3846:4:19"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3860:1:19","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"3863:6:19"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3856:3:19"},"nodeType":"YulFunctionCall","src":"3856:14:19"},{"kind":"number","nodeType":"YulLiteral","src":"3872:1:19","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3852:3:19"},"nodeType":"YulFunctionCall","src":"3852:22:19"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3839:6:19"},"nodeType":"YulFunctionCall","src":"3839:36:19"},"nodeType":"YulExpressionStatement","src":"3839:36:19"}]},"nodeType":"YulCase","src":"3222:663:19","value":{"kind":"number","nodeType":"YulLiteral","src":"3227:1:19","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"3902:234:19","statements":[{"nodeType":"YulVariableDeclaration","src":"3916:14:19","value":{"kind":"number","nodeType":"YulLiteral","src":"3929:1:19","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3920:5:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"3965:67:19","statements":[{"nodeType":"YulAssignment","src":"3983:35:19","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4002:3:19"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4007:9:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3998:3:19"},"nodeType":"YulFunctionCall","src":"3998:19:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3992:5:19"},"nodeType":"YulFunctionCall","src":"3992:26:19"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3983:5:19"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"3946:6:19"},"nodeType":"YulIf","src":"3943:89:19"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4052:4:19"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4111:5:19"},{"name":"newLen","nodeType":"YulIdentifier","src":"4118:6:19"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"4058:52:19"},"nodeType":"YulFunctionCall","src":"4058:67:19"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4045:6:19"},"nodeType":"YulFunctionCall","src":"4045:81:19"},"nodeType":"YulExpressionStatement","src":"4045:81:19"}]},"nodeType":"YulCase","src":"3894:242:19","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3202:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"3210:2:19","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3199:2:19"},"nodeType":"YulFunctionCall","src":"3199:14:19"},"nodeType":"YulSwitch","src":"3192:944:19"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"2871:4:19","type":""},{"name":"src","nodeType":"YulTypedName","src":"2877:3:19","type":""}],"src":"2790:1352:19"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        mstore(add(add(memPtr, _1), _4), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":19,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b50604051620019113803806200191183398101604081905262000034916200011f565b600062000042838262000218565b50600162000051828262000218565b505050620002e4565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200008257600080fd5b81516001600160401b03808211156200009f576200009f6200005a565b604051601f8301601f19908116603f01168101908282118183101715620000ca57620000ca6200005a565b81604052838152602092508683858801011115620000e757600080fd5b600091505b838210156200010b5785820183015181830184015290820190620000ec565b600093810190920192909252949350505050565b600080604083850312156200013357600080fd5b82516001600160401b03808211156200014b57600080fd5b620001598683870162000070565b935060208501519150808211156200017057600080fd5b506200017f8582860162000070565b9150509250929050565b600181811c908216806200019e57607f821691505b602082108103620001bf57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200021357600081815260208120601f850160051c81016020861015620001ee5750805b601f850160051c820191505b818110156200020f57828155600101620001fa565b5050505b505050565b81516001600160401b038111156200023457620002346200005a565b6200024c8162000245845462000189565b84620001c5565b602080601f8311600181146200028457600084156200026b5750858301515b600019600386901b1c1916600185901b1785556200020f565b600085815260208120601f198616915b82811015620002b55788860151825594840194600190910190840162000294565b5085821015620002d45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61161d80620002f46000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb465146101d0578063b88d4fde146101e3578063c87b56dd146101f6578063e985e9c51461020957600080fd5b80636352211e1461019457806370a08231146101a757806395d89b41146101c857600080fd5b8063095ea7b3116100bd578063095ea7b31461015957806323b872dd1461016e57806342842e0e1461018157600080fd5b806301ffc9a7146100e457806306fdde031461010c578063081812fc14610121575b600080fd5b6100f76100f2366004611206565b610252565b60405190151581526020015b60405180910390f35b610114610337565b6040516101039190611291565b61013461012f3660046112a4565b6103c9565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610103565b61016c6101673660046112e6565b6103fd565b005b61016c61017c366004611310565b61055a565b61016c61018f366004611310565b6105e1565b6101346101a23660046112a4565b6105fc565b6101ba6101b536600461134c565b61066e565b604051908152602001610103565b610114610722565b61016c6101de366004611367565b610731565b61016c6101f13660046113d2565b610740565b6101146102043660046112a4565b6107ce565b6100f76102173660046114cc565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260056020908152604080832093909416825291909152205460ff1690565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd0000000000000000000000000000000000000000000000000000000014806102e557507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061033157507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b606060008054610346906114ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610372906114ff565b80156103bf5780601f10610394576101008083540402835291602001916103bf565b820191906000526020600020905b8154815290600101906020018083116103a257829003601f168201915b5050505050905090565b60006103d482610842565b5060009081526004602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b6000610408826105fc565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036104b05760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff821614806104d957506104d98133610217565b61054b5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016104a7565b61055583836108b6565b505050565b6105643382610956565b6105d65760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f7665640000000000000000000000000000000000000060648201526084016104a7565b610555838383610a16565b61055583838360405180602001604052806000815250610740565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff16806103315760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016104a7565b600073ffffffffffffffffffffffffffffffffffffffff82166106f95760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e6572000000000000000000000000000000000000000000000060648201526084016104a7565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205490565b606060018054610346906114ff565b61073c338383610cc3565b5050565b61074a3383610956565b6107bc5760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f7665640000000000000000000000000000000000000060648201526084016104a7565b6107c884848484610dd6565b50505050565b60606107d982610842565b60006107f060408051602081019091526000815290565b90506000815111610810576040518060200160405280600081525061083b565b8061081a84610e5f565b60405160200161082b929190611552565b6040516020818303038152906040525b9392505050565b60008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff166108b35760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016104a7565b50565b600081815260046020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091558190610910826105fc565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610962836105fc565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806109d0575073ffffffffffffffffffffffffffffffffffffffff80821660009081526005602090815260408083209388168352929052205460ff165b80610a0e57508373ffffffffffffffffffffffffffffffffffffffff166109f6846103c9565b73ffffffffffffffffffffffffffffffffffffffff16145b949350505050565b8273ffffffffffffffffffffffffffffffffffffffff16610a36826105fc565b73ffffffffffffffffffffffffffffffffffffffff1614610abf5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016104a7565b73ffffffffffffffffffffffffffffffffffffffff8216610b475760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016104a7565b8273ffffffffffffffffffffffffffffffffffffffff16610b67826105fc565b73ffffffffffffffffffffffffffffffffffffffff1614610bf05760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016104a7565b600081815260046020908152604080832080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811690915573ffffffffffffffffffffffffffffffffffffffff8781168086526003855283862080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610d3e5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104a7565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526005602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610de1848484610a16565b610ded84848484610f1d565b6107c85760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016104a7565b60606000610e6c836110f6565b600101905060008167ffffffffffffffff811115610e8c57610e8c6113a3565b6040519080825280601f01601f191660200182016040528015610eb6576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084610ec057509392505050565b600073ffffffffffffffffffffffffffffffffffffffff84163b156110eb576040517f150b7a0200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063150b7a0290610f94903390899088908890600401611581565b6020604051808303816000875af1925050508015610fed575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610fea918101906115ca565b60015b6110a0573d80801561101b576040519150601f19603f3d011682016040523d82523d6000602084013e611020565b606091505b5080516000036110985760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016104a7565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050610a0e565b506001949350505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061113f577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831061116b576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061118957662386f26fc10000830492506010015b6305f5e10083106111a1576305f5e100830492506008015b61271083106111b557612710830492506004015b606483106111c7576064830492506002015b600a83106103315760010192915050565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146108b357600080fd5b60006020828403121561121857600080fd5b813561083b816111d8565b60005b8381101561123e578181015183820152602001611226565b50506000910152565b6000815180845261125f816020860160208601611223565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061083b6020830184611247565b6000602082840312156112b657600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff811681146112e157600080fd5b919050565b600080604083850312156112f957600080fd5b611302836112bd565b946020939093013593505050565b60008060006060848603121561132557600080fd5b61132e846112bd565b925061133c602085016112bd565b9150604084013590509250925092565b60006020828403121561135e57600080fd5b61083b826112bd565b6000806040838503121561137a57600080fd5b611383836112bd565b91506020830135801515811461139857600080fd5b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080600080608085870312156113e857600080fd5b6113f1856112bd565b93506113ff602086016112bd565b925060408501359150606085013567ffffffffffffffff8082111561142357600080fd5b818701915087601f83011261143757600080fd5b813581811115611449576114496113a3565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561148f5761148f6113a3565b816040528281528a60208487010111156114a857600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080604083850312156114df57600080fd5b6114e8836112bd565b91506114f6602084016112bd565b90509250929050565b600181811c9082168061151357607f821691505b60208210810361154c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60008351611564818460208801611223565b835190830190611578818360208801611223565b01949350505050565b600073ffffffffffffffffffffffffffffffffffffffff8087168352808616602084015250836040830152608060608301526115c06080830184611247565b9695505050505050565b6000602082840312156115dc57600080fd5b815161083b816111d856fea264697066735822122052249ae3b31a2fa66efbec3fe61625c370dc0b8f77b389cfd6b94304a8ec1d3964736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1911 CODESIZE SUB DUP1 PUSH3 0x1911 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x11F JUMP JUMPDEST PUSH1 0x0 PUSH3 0x42 DUP4 DUP3 PUSH3 0x218 JUMP JUMPDEST POP PUSH1 0x1 PUSH3 0x51 DUP3 DUP3 PUSH3 0x218 JUMP JUMPDEST POP POP POP PUSH3 0x2E4 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x9F JUMPI PUSH3 0x9F PUSH3 0x5A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0xCA JUMPI PUSH3 0xCA PUSH3 0x5A JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0xE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x10B JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0xEC JUMP JUMPDEST PUSH1 0x0 SWAP4 DUP2 ADD SWAP1 SWAP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x133 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x14B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x159 DUP7 DUP4 DUP8 ADD PUSH3 0x70 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x170 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x17F DUP6 DUP3 DUP7 ADD PUSH3 0x70 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x19E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x1BF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x213 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x1EE JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x20F JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x1FA JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x234 JUMPI PUSH3 0x234 PUSH3 0x5A JUMP JUMPDEST PUSH3 0x24C DUP2 PUSH3 0x245 DUP5 SLOAD PUSH3 0x189 JUMP JUMPDEST DUP5 PUSH3 0x1C5 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x284 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x26B JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x20F JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x2B5 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x294 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x2D4 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x161D DUP1 PUSH3 0x2F4 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xDF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1D0 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x1E3 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x1F6 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x209 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x194 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1A7 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x159 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x181 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xE4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x121 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF7 PUSH2 0xF2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1206 JUMP JUMPDEST PUSH2 0x252 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x114 PUSH2 0x337 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x103 SWAP2 SWAP1 PUSH2 0x1291 JUMP JUMPDEST PUSH2 0x134 PUSH2 0x12F CALLDATASIZE PUSH1 0x4 PUSH2 0x12A4 JUMP JUMPDEST PUSH2 0x3C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x103 JUMP JUMPDEST PUSH2 0x16C PUSH2 0x167 CALLDATASIZE PUSH1 0x4 PUSH2 0x12E6 JUMP JUMPDEST PUSH2 0x3FD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x16C PUSH2 0x17C CALLDATASIZE PUSH1 0x4 PUSH2 0x1310 JUMP JUMPDEST PUSH2 0x55A JUMP JUMPDEST PUSH2 0x16C PUSH2 0x18F CALLDATASIZE PUSH1 0x4 PUSH2 0x1310 JUMP JUMPDEST PUSH2 0x5E1 JUMP JUMPDEST PUSH2 0x134 PUSH2 0x1A2 CALLDATASIZE PUSH1 0x4 PUSH2 0x12A4 JUMP JUMPDEST PUSH2 0x5FC JUMP JUMPDEST PUSH2 0x1BA PUSH2 0x1B5 CALLDATASIZE PUSH1 0x4 PUSH2 0x134C JUMP JUMPDEST PUSH2 0x66E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x103 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x722 JUMP JUMPDEST PUSH2 0x16C PUSH2 0x1DE CALLDATASIZE PUSH1 0x4 PUSH2 0x1367 JUMP JUMPDEST PUSH2 0x731 JUMP JUMPDEST PUSH2 0x16C PUSH2 0x1F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x13D2 JUMP JUMPDEST PUSH2 0x740 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x204 CALLDATASIZE PUSH1 0x4 PUSH2 0x12A4 JUMP JUMPDEST PUSH2 0x7CE JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x217 CALLDATASIZE PUSH1 0x4 PUSH2 0x14CC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x2E5 JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x331 JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x346 SWAP1 PUSH2 0x14FF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x372 SWAP1 PUSH2 0x14FF JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3BF JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x394 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3BF JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3A2 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D4 DUP3 PUSH2 0x842 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x408 DUP3 PUSH2 0x5FC JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x4B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND EQ DUP1 PUSH2 0x4D9 JUMPI POP PUSH2 0x4D9 DUP2 CALLER PUSH2 0x217 JUMP JUMPDEST PUSH2 0x54B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4A7 JUMP JUMPDEST PUSH2 0x555 DUP4 DUP4 PUSH2 0x8B6 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x564 CALLER DUP3 PUSH2 0x956 JUMP JUMPDEST PUSH2 0x5D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4A7 JUMP JUMPDEST PUSH2 0x555 DUP4 DUP4 DUP4 PUSH2 0xA16 JUMP JUMPDEST PUSH2 0x555 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x740 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 PUSH2 0x331 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4A7 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x6F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4A7 JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x346 SWAP1 PUSH2 0x14FF JUMP JUMPDEST PUSH2 0x73C CALLER DUP4 DUP4 PUSH2 0xCC3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x74A CALLER DUP4 PUSH2 0x956 JUMP JUMPDEST PUSH2 0x7BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4A7 JUMP JUMPDEST PUSH2 0x7C8 DUP5 DUP5 DUP5 DUP5 PUSH2 0xDD6 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x7D9 DUP3 PUSH2 0x842 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7F0 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x810 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x83B JUMP JUMPDEST DUP1 PUSH2 0x81A DUP5 PUSH2 0xE5F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x82B SWAP3 SWAP2 SWAP1 PUSH2 0x1552 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8B3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4A7 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x910 DUP3 PUSH2 0x5FC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x962 DUP4 PUSH2 0x5FC JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x9D0 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST DUP1 PUSH2 0xA0E JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x9F6 DUP5 PUSH2 0x3C9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA36 DUP3 PUSH2 0x5FC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xABF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4A7 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0xB47 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4A7 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB67 DUP3 PUSH2 0x5FC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBF0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4A7 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x2 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xD3E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4A7 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xDE1 DUP5 DUP5 DUP5 PUSH2 0xA16 JUMP JUMPDEST PUSH2 0xDED DUP5 DUP5 DUP5 DUP5 PUSH2 0xF1D JUMP JUMPDEST PUSH2 0x7C8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4A7 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xE6C DUP4 PUSH2 0x10F6 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE8C JUMPI PUSH2 0xE8C PUSH2 0x13A3 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xEB6 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0xEC0 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO PUSH2 0x10EB JUMPI PUSH1 0x40 MLOAD PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0xF94 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1581 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xFED JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xFEA SWAP2 DUP2 ADD SWAP1 PUSH2 0x15CA JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x10A0 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x101B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1020 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x1098 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4A7 JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 EQ SWAP1 POP PUSH2 0xA0E JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x113F JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x116B JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1189 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x11A1 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x11B5 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x11C7 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x331 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x8B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1218 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x83B DUP2 PUSH2 0x11D8 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x123E JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1226 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x125F DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1223 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x83B PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1247 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x12E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x12F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1302 DUP4 PUSH2 0x12BD JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1325 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x132E DUP5 PUSH2 0x12BD JUMP JUMPDEST SWAP3 POP PUSH2 0x133C PUSH1 0x20 DUP6 ADD PUSH2 0x12BD JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x135E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x83B DUP3 PUSH2 0x12BD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x137A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1383 DUP4 PUSH2 0x12BD JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1398 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x13E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13F1 DUP6 PUSH2 0x12BD JUMP JUMPDEST SWAP4 POP PUSH2 0x13FF PUSH1 0x20 DUP7 ADD PUSH2 0x12BD JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1423 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1437 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1449 JUMPI PUSH2 0x1449 PUSH2 0x13A3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x148F JUMPI PUSH2 0x148F PUSH2 0x13A3 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x14A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x14DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14E8 DUP4 PUSH2 0x12BD JUMP JUMPDEST SWAP2 POP PUSH2 0x14F6 PUSH1 0x20 DUP5 ADD PUSH2 0x12BD JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1513 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x154C JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x1564 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x1223 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x1578 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x1223 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP4 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x15C0 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x1247 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x83B DUP2 PUSH2 0x11D8 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE 0x24 SWAP11 0xE3 0xB3 BYTE 0x2F 0xA6 PUSH15 0xFBEC3FE61625C370DC0B8F77B389CF 0xD6 0xB9 NUMBER DIV 0xA8 0xEC SAR CODECOPY PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"628:16377:1:-:0;;;1390:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1456:5;:13;1464:5;1456;:13;:::i;:::-;-1:-1:-1;1479:7:1;:17;1489:7;1479;:17;:::i;:::-;;1390:113;;628:16377;;14:127:19;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:840;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:19;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:19;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;954:1;932:15;;;928:24;;;921:35;;;;936:6;146:840;-1:-1:-1;;;;146:840:19:o;991:562::-;1090:6;1098;1151:2;1139:9;1130:7;1126:23;1122:32;1119:52;;;1167:1;1164;1157:12;1119:52;1194:16;;-1:-1:-1;;;;;1259:14:19;;;1256:34;;;1286:1;1283;1276:12;1256:34;1309:61;1362:7;1353:6;1342:9;1338:22;1309:61;:::i;:::-;1299:71;;1416:2;1405:9;1401:18;1395:25;1379:41;;1445:2;1435:8;1432:16;1429:36;;;1461:1;1458;1451:12;1429:36;;1484:63;1539:7;1528:8;1517:9;1513:24;1484:63;:::i;:::-;1474:73;;;991:562;;;;;:::o;1558:380::-;1637:1;1633:12;;;;1680;;;1701:61;;1755:4;1747:6;1743:17;1733:27;;1701:61;1808:2;1800:6;1797:14;1777:18;1774:38;1771:161;;1854:10;1849:3;1845:20;1842:1;1835:31;1889:4;1886:1;1879:15;1917:4;1914:1;1907:15;1771:161;;1558:380;;;:::o;2069:545::-;2171:2;2166:3;2163:11;2160:448;;;2207:1;2232:5;2228:2;2221:17;2277:4;2273:2;2263:19;2347:2;2335:10;2331:19;2328:1;2324:27;2318:4;2314:38;2383:4;2371:10;2368:20;2365:47;;;-1:-1:-1;2406:4:19;2365:47;2461:2;2456:3;2452:12;2449:1;2445:20;2439:4;2435:31;2425:41;;2516:82;2534:2;2527:5;2524:13;2516:82;;;2579:17;;;2560:1;2549:13;2516:82;;;2520:3;;;2160:448;2069:545;;;:::o;2790:1352::-;2910:10;;-1:-1:-1;;;;;2932:30:19;;2929:56;;;2965:18;;:::i;:::-;2994:97;3084:6;3044:38;3076:4;3070:11;3044:38;:::i;:::-;3038:4;2994:97;:::i;:::-;3146:4;;3210:2;3199:14;;3227:1;3222:663;;;;3929:1;3946:6;3943:89;;;-1:-1:-1;3998:19:19;;;3992:26;3943:89;-1:-1:-1;;2747:1:19;2743:11;;;2739:24;2735:29;2725:40;2771:1;2767:11;;;2722:57;4045:81;;3192:944;;3222:663;2016:1;2009:14;;;2053:4;2040:18;;-1:-1:-1;;3258:20:19;;;3376:236;3390:7;3387:1;3384:14;3376:236;;;3479:19;;;3473:26;3458:42;;3571:27;;;;3539:1;3527:14;;;;3406:19;;3376:236;;;3380:3;3640:6;3631:7;3628:19;3625:201;;;3701:19;;;3695:26;-1:-1:-1;;3784:1:19;3780:14;;;3796:3;3776:24;3772:37;3768:42;3753:58;3738:74;;3625:201;-1:-1:-1;;;;;3872:1:19;3856:14;;;3852:22;3839:36;;-1:-1:-1;2790:1352:19:o;:::-;628:16377:1;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_1023":{"entryPoint":null,"id":1023,"parameterSlots":4,"returnSlots":0},"@_approve_889":{"entryPoint":2230,"id":889,"parameterSlots":2,"returnSlots":0},"@_baseURI_326":{"entryPoint":null,"id":326,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_1010":{"entryPoint":null,"id":1010,"parameterSlots":4,"returnSlots":0},"@_checkOnERC721Received_997":{"entryPoint":3869,"id":997,"parameterSlots":4,"returnSlots":1},"@_exists_558":{"entryPoint":null,"id":558,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_592":{"entryPoint":2390,"id":592,"parameterSlots":2,"returnSlots":1},"@_msgSender_1927":{"entryPoint":null,"id":1927,"parameterSlots":0,"returnSlots":1},"@_ownerOf_540":{"entryPoint":null,"id":540,"parameterSlots":1,"returnSlots":1},"@_requireMinted_935":{"entryPoint":2114,"id":935,"parameterSlots":1,"returnSlots":0},"@_safeTransfer_527":{"entryPoint":3542,"id":527,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_921":{"entryPoint":3267,"id":921,"parameterSlots":3,"returnSlots":0},"@_transfer_865":{"entryPoint":2582,"id":865,"parameterSlots":3,"returnSlots":0},"@approve_369":{"entryPoint":1021,"id":369,"parameterSlots":2,"returnSlots":0},"@balanceOf_230":{"entryPoint":1646,"id":230,"parameterSlots":1,"returnSlots":1},"@getApproved_387":{"entryPoint":969,"id":387,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_422":{"entryPoint":null,"id":422,"parameterSlots":2,"returnSlots":1},"@isContract_1603":{"entryPoint":null,"id":1603,"parameterSlots":1,"returnSlots":1},"@log10_3271":{"entryPoint":4342,"id":3271,"parameterSlots":1,"returnSlots":1},"@name_268":{"entryPoint":823,"id":268,"parameterSlots":0,"returnSlots":1},"@ownerOf_258":{"entryPoint":1532,"id":258,"parameterSlots":1,"returnSlots":1},"@safeTransferFrom_468":{"entryPoint":1505,"id":468,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_498":{"entryPoint":1856,"id":498,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_404":{"entryPoint":1841,"id":404,"parameterSlots":2,"returnSlots":0},"@supportsInterface_206":{"entryPoint":594,"id":206,"parameterSlots":1,"returnSlots":1},"@supportsInterface_2555":{"entryPoint":null,"id":2555,"parameterSlots":1,"returnSlots":1},"@symbol_278":{"entryPoint":1826,"id":278,"parameterSlots":0,"returnSlots":1},"@toString_1996":{"entryPoint":3679,"id":1996,"parameterSlots":1,"returnSlots":1},"@tokenURI_317":{"entryPoint":1998,"id":317,"parameterSlots":1,"returnSlots":1},"@transferFrom_449":{"entryPoint":1370,"id":449,"parameterSlots":3,"returnSlots":0},"abi_decode_address":{"entryPoint":4797,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":4940,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":5324,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":4880,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":5074,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":4967,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":4838,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":4614,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":5578,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":4772,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":4679,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":5458,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":5505,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4753,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":4643,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":5375,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x12":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":5027,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":4568,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:10536:19","statements":[{"nodeType":"YulBlock","src":"6:3:19","statements":[]},{"body":{"nodeType":"YulBlock","src":"58:133:19","statements":[{"body":{"nodeType":"YulBlock","src":"169:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"178:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"181:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"171:6:19"},"nodeType":"YulFunctionCall","src":"171:12:19"},"nodeType":"YulExpressionStatement","src":"171:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"81:5:19"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"92:5:19"},{"kind":"number","nodeType":"YulLiteral","src":"99:66:19","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"88:3:19"},"nodeType":"YulFunctionCall","src":"88:78:19"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"78:2:19"},"nodeType":"YulFunctionCall","src":"78:89:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"71:6:19"},"nodeType":"YulFunctionCall","src":"71:97:19"},"nodeType":"YulIf","src":"68:117:19"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"47:5:19","type":""}],"src":"14:177:19"},{"body":{"nodeType":"YulBlock","src":"265:176:19","statements":[{"body":{"nodeType":"YulBlock","src":"311:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"320:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"323:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"313:6:19"},"nodeType":"YulFunctionCall","src":"313:12:19"},"nodeType":"YulExpressionStatement","src":"313:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"286:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"295:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"282:3:19"},"nodeType":"YulFunctionCall","src":"282:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"307:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"278:3:19"},"nodeType":"YulFunctionCall","src":"278:32:19"},"nodeType":"YulIf","src":"275:52:19"},{"nodeType":"YulVariableDeclaration","src":"336:36:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"362:9:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"349:12:19"},"nodeType":"YulFunctionCall","src":"349:23:19"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"340:5:19","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"405:5:19"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"381:23:19"},"nodeType":"YulFunctionCall","src":"381:30:19"},"nodeType":"YulExpressionStatement","src":"381:30:19"},{"nodeType":"YulAssignment","src":"420:15:19","value":{"name":"value","nodeType":"YulIdentifier","src":"430:5:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"420:6:19"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"231:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"242:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"254:6:19","type":""}],"src":"196:245:19"},{"body":{"nodeType":"YulBlock","src":"541:92:19","statements":[{"nodeType":"YulAssignment","src":"551:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"563:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"574:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"559:3:19"},"nodeType":"YulFunctionCall","src":"559:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"551:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"593:9:19"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"618:6:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"611:6:19"},"nodeType":"YulFunctionCall","src":"611:14:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"604:6:19"},"nodeType":"YulFunctionCall","src":"604:22:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"586:6:19"},"nodeType":"YulFunctionCall","src":"586:41:19"},"nodeType":"YulExpressionStatement","src":"586:41:19"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"510:9:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"521:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"532:4:19","type":""}],"src":"446:187:19"},{"body":{"nodeType":"YulBlock","src":"704:184:19","statements":[{"nodeType":"YulVariableDeclaration","src":"714:10:19","value":{"kind":"number","nodeType":"YulLiteral","src":"723:1:19","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"718:1:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"783:63:19","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"808:3:19"},{"name":"i","nodeType":"YulIdentifier","src":"813:1:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"804:3:19"},"nodeType":"YulFunctionCall","src":"804:11:19"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"827:3:19"},{"name":"i","nodeType":"YulIdentifier","src":"832:1:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"823:3:19"},"nodeType":"YulFunctionCall","src":"823:11:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"817:5:19"},"nodeType":"YulFunctionCall","src":"817:18:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"797:6:19"},"nodeType":"YulFunctionCall","src":"797:39:19"},"nodeType":"YulExpressionStatement","src":"797:39:19"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"744:1:19"},{"name":"length","nodeType":"YulIdentifier","src":"747:6:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"741:2:19"},"nodeType":"YulFunctionCall","src":"741:13:19"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"755:19:19","statements":[{"nodeType":"YulAssignment","src":"757:15:19","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"766:1:19"},{"kind":"number","nodeType":"YulLiteral","src":"769:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"762:3:19"},"nodeType":"YulFunctionCall","src":"762:10:19"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"757:1:19"}]}]},"pre":{"nodeType":"YulBlock","src":"737:3:19","statements":[]},"src":"733:113:19"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"866:3:19"},{"name":"length","nodeType":"YulIdentifier","src":"871:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"862:3:19"},"nodeType":"YulFunctionCall","src":"862:16:19"},{"kind":"number","nodeType":"YulLiteral","src":"880:1:19","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"855:6:19"},"nodeType":"YulFunctionCall","src":"855:27:19"},"nodeType":"YulExpressionStatement","src":"855:27:19"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"682:3:19","type":""},{"name":"dst","nodeType":"YulTypedName","src":"687:3:19","type":""},{"name":"length","nodeType":"YulTypedName","src":"692:6:19","type":""}],"src":"638:250:19"},{"body":{"nodeType":"YulBlock","src":"943:280:19","statements":[{"nodeType":"YulVariableDeclaration","src":"953:26:19","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"973:5:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"967:5:19"},"nodeType":"YulFunctionCall","src":"967:12:19"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"957:6:19","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"995:3:19"},{"name":"length","nodeType":"YulIdentifier","src":"1000:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"988:6:19"},"nodeType":"YulFunctionCall","src":"988:19:19"},"nodeType":"YulExpressionStatement","src":"988:19:19"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1055:5:19"},{"kind":"number","nodeType":"YulLiteral","src":"1062:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1051:3:19"},"nodeType":"YulFunctionCall","src":"1051:16:19"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1073:3:19"},{"kind":"number","nodeType":"YulLiteral","src":"1078:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1069:3:19"},"nodeType":"YulFunctionCall","src":"1069:14:19"},{"name":"length","nodeType":"YulIdentifier","src":"1085:6:19"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"1016:34:19"},"nodeType":"YulFunctionCall","src":"1016:76:19"},"nodeType":"YulExpressionStatement","src":"1016:76:19"},{"nodeType":"YulAssignment","src":"1101:116:19","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1116:3:19"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1129:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"1137:2:19","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1125:3:19"},"nodeType":"YulFunctionCall","src":"1125:15:19"},{"kind":"number","nodeType":"YulLiteral","src":"1142:66:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1121:3:19"},"nodeType":"YulFunctionCall","src":"1121:88:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1112:3:19"},"nodeType":"YulFunctionCall","src":"1112:98:19"},{"kind":"number","nodeType":"YulLiteral","src":"1212:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1108:3:19"},"nodeType":"YulFunctionCall","src":"1108:109:19"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1101:3:19"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"920:5:19","type":""},{"name":"pos","nodeType":"YulTypedName","src":"927:3:19","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"935:3:19","type":""}],"src":"893:330:19"},{"body":{"nodeType":"YulBlock","src":"1349:99:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1366:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1377:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1359:6:19"},"nodeType":"YulFunctionCall","src":"1359:21:19"},"nodeType":"YulExpressionStatement","src":"1359:21:19"},{"nodeType":"YulAssignment","src":"1389:53:19","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1415:6:19"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1427:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1438:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1423:3:19"},"nodeType":"YulFunctionCall","src":"1423:18:19"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"1397:17:19"},"nodeType":"YulFunctionCall","src":"1397:45:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1389:4:19"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1318:9:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1329:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1340:4:19","type":""}],"src":"1228:220:19"},{"body":{"nodeType":"YulBlock","src":"1523:110:19","statements":[{"body":{"nodeType":"YulBlock","src":"1569:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1578:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1581:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1571:6:19"},"nodeType":"YulFunctionCall","src":"1571:12:19"},"nodeType":"YulExpressionStatement","src":"1571:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1544:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"1553:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1540:3:19"},"nodeType":"YulFunctionCall","src":"1540:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"1565:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1536:3:19"},"nodeType":"YulFunctionCall","src":"1536:32:19"},"nodeType":"YulIf","src":"1533:52:19"},{"nodeType":"YulAssignment","src":"1594:33:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1617:9:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1604:12:19"},"nodeType":"YulFunctionCall","src":"1604:23:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1594:6:19"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1489:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1500:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1512:6:19","type":""}],"src":"1453:180:19"},{"body":{"nodeType":"YulBlock","src":"1739:125:19","statements":[{"nodeType":"YulAssignment","src":"1749:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1761:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1772:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1757:3:19"},"nodeType":"YulFunctionCall","src":"1757:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1749:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1791:9:19"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1806:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"1814:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1802:3:19"},"nodeType":"YulFunctionCall","src":"1802:55:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1784:6:19"},"nodeType":"YulFunctionCall","src":"1784:74:19"},"nodeType":"YulExpressionStatement","src":"1784:74:19"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1708:9:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1719:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1730:4:19","type":""}],"src":"1638:226:19"},{"body":{"nodeType":"YulBlock","src":"1918:147:19","statements":[{"nodeType":"YulAssignment","src":"1928:29:19","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1950:6:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1937:12:19"},"nodeType":"YulFunctionCall","src":"1937:20:19"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1928:5:19"}]},{"body":{"nodeType":"YulBlock","src":"2043:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2052:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2055:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2045:6:19"},"nodeType":"YulFunctionCall","src":"2045:12:19"},"nodeType":"YulExpressionStatement","src":"2045:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1979:5:19"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1990:5:19"},{"kind":"number","nodeType":"YulLiteral","src":"1997:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1986:3:19"},"nodeType":"YulFunctionCall","src":"1986:54:19"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1976:2:19"},"nodeType":"YulFunctionCall","src":"1976:65:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1969:6:19"},"nodeType":"YulFunctionCall","src":"1969:73:19"},"nodeType":"YulIf","src":"1966:93:19"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1897:6:19","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1908:5:19","type":""}],"src":"1869:196:19"},{"body":{"nodeType":"YulBlock","src":"2157:167:19","statements":[{"body":{"nodeType":"YulBlock","src":"2203:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2212:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2215:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2205:6:19"},"nodeType":"YulFunctionCall","src":"2205:12:19"},"nodeType":"YulExpressionStatement","src":"2205:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2178:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"2187:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2174:3:19"},"nodeType":"YulFunctionCall","src":"2174:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"2199:2:19","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2170:3:19"},"nodeType":"YulFunctionCall","src":"2170:32:19"},"nodeType":"YulIf","src":"2167:52:19"},{"nodeType":"YulAssignment","src":"2228:39:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2257:9:19"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2238:18:19"},"nodeType":"YulFunctionCall","src":"2238:29:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2228:6:19"}]},{"nodeType":"YulAssignment","src":"2276:42:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2303:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"2314:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2299:3:19"},"nodeType":"YulFunctionCall","src":"2299:18:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2286:12:19"},"nodeType":"YulFunctionCall","src":"2286:32:19"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2276:6:19"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2115:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2126:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2138:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2146:6:19","type":""}],"src":"2070:254:19"},{"body":{"nodeType":"YulBlock","src":"2433:224:19","statements":[{"body":{"nodeType":"YulBlock","src":"2479:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2488:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2491:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2481:6:19"},"nodeType":"YulFunctionCall","src":"2481:12:19"},"nodeType":"YulExpressionStatement","src":"2481:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2454:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"2463:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2450:3:19"},"nodeType":"YulFunctionCall","src":"2450:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"2475:2:19","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2446:3:19"},"nodeType":"YulFunctionCall","src":"2446:32:19"},"nodeType":"YulIf","src":"2443:52:19"},{"nodeType":"YulAssignment","src":"2504:39:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2533:9:19"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2514:18:19"},"nodeType":"YulFunctionCall","src":"2514:29:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2504:6:19"}]},{"nodeType":"YulAssignment","src":"2552:48:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2585:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"2596:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2581:3:19"},"nodeType":"YulFunctionCall","src":"2581:18:19"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2562:18:19"},"nodeType":"YulFunctionCall","src":"2562:38:19"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2552:6:19"}]},{"nodeType":"YulAssignment","src":"2609:42:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2636:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"2647:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2632:3:19"},"nodeType":"YulFunctionCall","src":"2632:18:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2619:12:19"},"nodeType":"YulFunctionCall","src":"2619:32:19"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2609:6:19"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2383:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2394:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2406:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2414:6:19","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2422:6:19","type":""}],"src":"2329:328:19"},{"body":{"nodeType":"YulBlock","src":"2732:116:19","statements":[{"body":{"nodeType":"YulBlock","src":"2778:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2787:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2790:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2780:6:19"},"nodeType":"YulFunctionCall","src":"2780:12:19"},"nodeType":"YulExpressionStatement","src":"2780:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2753:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"2762:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2749:3:19"},"nodeType":"YulFunctionCall","src":"2749:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"2774:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2745:3:19"},"nodeType":"YulFunctionCall","src":"2745:32:19"},"nodeType":"YulIf","src":"2742:52:19"},{"nodeType":"YulAssignment","src":"2803:39:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2832:9:19"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2813:18:19"},"nodeType":"YulFunctionCall","src":"2813:29:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2803:6:19"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2698:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2709:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2721:6:19","type":""}],"src":"2662:186:19"},{"body":{"nodeType":"YulBlock","src":"2954:76:19","statements":[{"nodeType":"YulAssignment","src":"2964:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2976:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"2987:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2972:3:19"},"nodeType":"YulFunctionCall","src":"2972:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2964:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3006:9:19"},{"name":"value0","nodeType":"YulIdentifier","src":"3017:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2999:6:19"},"nodeType":"YulFunctionCall","src":"2999:25:19"},"nodeType":"YulExpressionStatement","src":"2999:25:19"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2923:9:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2934:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2945:4:19","type":""}],"src":"2853:177:19"},{"body":{"nodeType":"YulBlock","src":"3119:263:19","statements":[{"body":{"nodeType":"YulBlock","src":"3165:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3174:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3177:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3167:6:19"},"nodeType":"YulFunctionCall","src":"3167:12:19"},"nodeType":"YulExpressionStatement","src":"3167:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3140:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"3149:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3136:3:19"},"nodeType":"YulFunctionCall","src":"3136:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"3161:2:19","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3132:3:19"},"nodeType":"YulFunctionCall","src":"3132:32:19"},"nodeType":"YulIf","src":"3129:52:19"},{"nodeType":"YulAssignment","src":"3190:39:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3219:9:19"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3200:18:19"},"nodeType":"YulFunctionCall","src":"3200:29:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3190:6:19"}]},{"nodeType":"YulVariableDeclaration","src":"3238:45:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3268:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"3279:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3264:3:19"},"nodeType":"YulFunctionCall","src":"3264:18:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3251:12:19"},"nodeType":"YulFunctionCall","src":"3251:32:19"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3242:5:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"3336:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3345:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3348:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3338:6:19"},"nodeType":"YulFunctionCall","src":"3338:12:19"},"nodeType":"YulExpressionStatement","src":"3338:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3305:5:19"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3326:5:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3319:6:19"},"nodeType":"YulFunctionCall","src":"3319:13:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3312:6:19"},"nodeType":"YulFunctionCall","src":"3312:21:19"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3302:2:19"},"nodeType":"YulFunctionCall","src":"3302:32:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3295:6:19"},"nodeType":"YulFunctionCall","src":"3295:40:19"},"nodeType":"YulIf","src":"3292:60:19"},{"nodeType":"YulAssignment","src":"3361:15:19","value":{"name":"value","nodeType":"YulIdentifier","src":"3371:5:19"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3361:6:19"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3077:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3088:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3100:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3108:6:19","type":""}],"src":"3035:347:19"},{"body":{"nodeType":"YulBlock","src":"3419:152:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3436:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3439:77:19","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3429:6:19"},"nodeType":"YulFunctionCall","src":"3429:88:19"},"nodeType":"YulExpressionStatement","src":"3429:88:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3533:1:19","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3536:4:19","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3526:6:19"},"nodeType":"YulFunctionCall","src":"3526:15:19"},"nodeType":"YulExpressionStatement","src":"3526:15:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3557:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3560:4:19","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3550:6:19"},"nodeType":"YulFunctionCall","src":"3550:15:19"},"nodeType":"YulExpressionStatement","src":"3550:15:19"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3387:184:19"},{"body":{"nodeType":"YulBlock","src":"3706:1067:19","statements":[{"body":{"nodeType":"YulBlock","src":"3753:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3762:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3765:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3755:6:19"},"nodeType":"YulFunctionCall","src":"3755:12:19"},"nodeType":"YulExpressionStatement","src":"3755:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3727:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"3736:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3723:3:19"},"nodeType":"YulFunctionCall","src":"3723:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"3748:3:19","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3719:3:19"},"nodeType":"YulFunctionCall","src":"3719:33:19"},"nodeType":"YulIf","src":"3716:53:19"},{"nodeType":"YulAssignment","src":"3778:39:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3807:9:19"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3788:18:19"},"nodeType":"YulFunctionCall","src":"3788:29:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3778:6:19"}]},{"nodeType":"YulAssignment","src":"3826:48:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3859:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"3870:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3855:3:19"},"nodeType":"YulFunctionCall","src":"3855:18:19"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3836:18:19"},"nodeType":"YulFunctionCall","src":"3836:38:19"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3826:6:19"}]},{"nodeType":"YulAssignment","src":"3883:42:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3910:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"3921:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3906:3:19"},"nodeType":"YulFunctionCall","src":"3906:18:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3893:12:19"},"nodeType":"YulFunctionCall","src":"3893:32:19"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3883:6:19"}]},{"nodeType":"YulVariableDeclaration","src":"3934:46:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3965:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"3976:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3961:3:19"},"nodeType":"YulFunctionCall","src":"3961:18:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3948:12:19"},"nodeType":"YulFunctionCall","src":"3948:32:19"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3938:6:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3989:28:19","value":{"kind":"number","nodeType":"YulLiteral","src":"3999:18:19","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3993:2:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"4044:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4053:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4056:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4046:6:19"},"nodeType":"YulFunctionCall","src":"4046:12:19"},"nodeType":"YulExpressionStatement","src":"4046:12:19"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4032:6:19"},{"name":"_1","nodeType":"YulIdentifier","src":"4040:2:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4029:2:19"},"nodeType":"YulFunctionCall","src":"4029:14:19"},"nodeType":"YulIf","src":"4026:34:19"},{"nodeType":"YulVariableDeclaration","src":"4069:32:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4083:9:19"},{"name":"offset","nodeType":"YulIdentifier","src":"4094:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4079:3:19"},"nodeType":"YulFunctionCall","src":"4079:22:19"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"4073:2:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"4149:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4158:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4161:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4151:6:19"},"nodeType":"YulFunctionCall","src":"4151:12:19"},"nodeType":"YulExpressionStatement","src":"4151:12:19"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4128:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"4132:4:19","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4124:3:19"},"nodeType":"YulFunctionCall","src":"4124:13:19"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4139:7:19"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4120:3:19"},"nodeType":"YulFunctionCall","src":"4120:27:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4113:6:19"},"nodeType":"YulFunctionCall","src":"4113:35:19"},"nodeType":"YulIf","src":"4110:55:19"},{"nodeType":"YulVariableDeclaration","src":"4174:26:19","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4197:2:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4184:12:19"},"nodeType":"YulFunctionCall","src":"4184:16:19"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"4178:2:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"4223:22:19","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4225:16:19"},"nodeType":"YulFunctionCall","src":"4225:18:19"},"nodeType":"YulExpressionStatement","src":"4225:18:19"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4215:2:19"},{"name":"_1","nodeType":"YulIdentifier","src":"4219:2:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4212:2:19"},"nodeType":"YulFunctionCall","src":"4212:10:19"},"nodeType":"YulIf","src":"4209:36:19"},{"nodeType":"YulVariableDeclaration","src":"4254:76:19","value":{"kind":"number","nodeType":"YulLiteral","src":"4264:66:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"4258:2:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4339:23:19","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4359:2:19","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4353:5:19"},"nodeType":"YulFunctionCall","src":"4353:9:19"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4343:6:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4371:71:19","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4393:6:19"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4417:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"4421:4:19","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4413:3:19"},"nodeType":"YulFunctionCall","src":"4413:13:19"},{"name":"_4","nodeType":"YulIdentifier","src":"4428:2:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4409:3:19"},"nodeType":"YulFunctionCall","src":"4409:22:19"},{"kind":"number","nodeType":"YulLiteral","src":"4433:2:19","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4405:3:19"},"nodeType":"YulFunctionCall","src":"4405:31:19"},{"name":"_4","nodeType":"YulIdentifier","src":"4438:2:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4401:3:19"},"nodeType":"YulFunctionCall","src":"4401:40:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4389:3:19"},"nodeType":"YulFunctionCall","src":"4389:53:19"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"4375:10:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"4501:22:19","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4503:16:19"},"nodeType":"YulFunctionCall","src":"4503:18:19"},"nodeType":"YulExpressionStatement","src":"4503:18:19"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4460:10:19"},{"name":"_1","nodeType":"YulIdentifier","src":"4472:2:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4457:2:19"},"nodeType":"YulFunctionCall","src":"4457:18:19"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4480:10:19"},{"name":"memPtr","nodeType":"YulIdentifier","src":"4492:6:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4477:2:19"},"nodeType":"YulFunctionCall","src":"4477:22:19"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4454:2:19"},"nodeType":"YulFunctionCall","src":"4454:46:19"},"nodeType":"YulIf","src":"4451:72:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4539:2:19","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4543:10:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4532:6:19"},"nodeType":"YulFunctionCall","src":"4532:22:19"},"nodeType":"YulExpressionStatement","src":"4532:22:19"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4570:6:19"},{"name":"_3","nodeType":"YulIdentifier","src":"4578:2:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4563:6:19"},"nodeType":"YulFunctionCall","src":"4563:18:19"},"nodeType":"YulExpressionStatement","src":"4563:18:19"},{"body":{"nodeType":"YulBlock","src":"4627:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4636:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4639:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4629:6:19"},"nodeType":"YulFunctionCall","src":"4629:12:19"},"nodeType":"YulExpressionStatement","src":"4629:12:19"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4604:2:19"},{"name":"_3","nodeType":"YulIdentifier","src":"4608:2:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4600:3:19"},"nodeType":"YulFunctionCall","src":"4600:11:19"},{"kind":"number","nodeType":"YulLiteral","src":"4613:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4596:3:19"},"nodeType":"YulFunctionCall","src":"4596:20:19"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4618:7:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4593:2:19"},"nodeType":"YulFunctionCall","src":"4593:33:19"},"nodeType":"YulIf","src":"4590:53:19"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4669:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"4677:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4665:3:19"},"nodeType":"YulFunctionCall","src":"4665:15:19"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4686:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"4690:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4682:3:19"},"nodeType":"YulFunctionCall","src":"4682:11:19"},{"name":"_3","nodeType":"YulIdentifier","src":"4695:2:19"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"4652:12:19"},"nodeType":"YulFunctionCall","src":"4652:46:19"},"nodeType":"YulExpressionStatement","src":"4652:46:19"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4722:6:19"},{"name":"_3","nodeType":"YulIdentifier","src":"4730:2:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4718:3:19"},"nodeType":"YulFunctionCall","src":"4718:15:19"},{"kind":"number","nodeType":"YulLiteral","src":"4735:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4714:3:19"},"nodeType":"YulFunctionCall","src":"4714:24:19"},{"kind":"number","nodeType":"YulLiteral","src":"4740:1:19","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4707:6:19"},"nodeType":"YulFunctionCall","src":"4707:35:19"},"nodeType":"YulExpressionStatement","src":"4707:35:19"},{"nodeType":"YulAssignment","src":"4751:16:19","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4761:6:19"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4751:6:19"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3648:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3659:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3671:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3679:6:19","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3687:6:19","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3695:6:19","type":""}],"src":"3576:1197:19"},{"body":{"nodeType":"YulBlock","src":"4865:173:19","statements":[{"body":{"nodeType":"YulBlock","src":"4911:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4920:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4923:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4913:6:19"},"nodeType":"YulFunctionCall","src":"4913:12:19"},"nodeType":"YulExpressionStatement","src":"4913:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4886:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"4895:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4882:3:19"},"nodeType":"YulFunctionCall","src":"4882:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"4907:2:19","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4878:3:19"},"nodeType":"YulFunctionCall","src":"4878:32:19"},"nodeType":"YulIf","src":"4875:52:19"},{"nodeType":"YulAssignment","src":"4936:39:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4965:9:19"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4946:18:19"},"nodeType":"YulFunctionCall","src":"4946:29:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4936:6:19"}]},{"nodeType":"YulAssignment","src":"4984:48:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5017:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"5028:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5013:3:19"},"nodeType":"YulFunctionCall","src":"5013:18:19"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4994:18:19"},"nodeType":"YulFunctionCall","src":"4994:38:19"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4984:6:19"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4823:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4834:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4846:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4854:6:19","type":""}],"src":"4778:260:19"},{"body":{"nodeType":"YulBlock","src":"5098:382:19","statements":[{"nodeType":"YulAssignment","src":"5108:22:19","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5122:1:19","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"5125:4:19"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5118:3:19"},"nodeType":"YulFunctionCall","src":"5118:12:19"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"5108:6:19"}]},{"nodeType":"YulVariableDeclaration","src":"5139:38:19","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"5169:4:19"},{"kind":"number","nodeType":"YulLiteral","src":"5175:1:19","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5165:3:19"},"nodeType":"YulFunctionCall","src":"5165:12:19"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"5143:18:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"5216:31:19","statements":[{"nodeType":"YulAssignment","src":"5218:27:19","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5232:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"5240:4:19","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5228:3:19"},"nodeType":"YulFunctionCall","src":"5228:17:19"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"5218:6:19"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"5196:18:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5189:6:19"},"nodeType":"YulFunctionCall","src":"5189:26:19"},"nodeType":"YulIf","src":"5186:61:19"},{"body":{"nodeType":"YulBlock","src":"5306:168:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5327:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5330:77:19","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5320:6:19"},"nodeType":"YulFunctionCall","src":"5320:88:19"},"nodeType":"YulExpressionStatement","src":"5320:88:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5428:1:19","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5431:4:19","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5421:6:19"},"nodeType":"YulFunctionCall","src":"5421:15:19"},"nodeType":"YulExpressionStatement","src":"5421:15:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5456:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5459:4:19","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5449:6:19"},"nodeType":"YulFunctionCall","src":"5449:15:19"},"nodeType":"YulExpressionStatement","src":"5449:15:19"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"5262:18:19"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5285:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"5293:2:19","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5282:2:19"},"nodeType":"YulFunctionCall","src":"5282:14:19"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5259:2:19"},"nodeType":"YulFunctionCall","src":"5259:38:19"},"nodeType":"YulIf","src":"5256:218:19"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"5078:4:19","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"5087:6:19","type":""}],"src":"5043:437:19"},{"body":{"nodeType":"YulBlock","src":"5659:223:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5676:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"5687:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5669:6:19"},"nodeType":"YulFunctionCall","src":"5669:21:19"},"nodeType":"YulExpressionStatement","src":"5669:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5710:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"5721:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5706:3:19"},"nodeType":"YulFunctionCall","src":"5706:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"5726:2:19","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5699:6:19"},"nodeType":"YulFunctionCall","src":"5699:30:19"},"nodeType":"YulExpressionStatement","src":"5699:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5749:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"5760:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5745:3:19"},"nodeType":"YulFunctionCall","src":"5745:18:19"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"5765:34:19","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5738:6:19"},"nodeType":"YulFunctionCall","src":"5738:62:19"},"nodeType":"YulExpressionStatement","src":"5738:62:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5820:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"5831:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5816:3:19"},"nodeType":"YulFunctionCall","src":"5816:18:19"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"5836:3:19","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5809:6:19"},"nodeType":"YulFunctionCall","src":"5809:31:19"},"nodeType":"YulExpressionStatement","src":"5809:31:19"},{"nodeType":"YulAssignment","src":"5849:27:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5861:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"5872:3:19","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5857:3:19"},"nodeType":"YulFunctionCall","src":"5857:19:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5849:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5636:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5650:4:19","type":""}],"src":"5485:397:19"},{"body":{"nodeType":"YulBlock","src":"6061:251:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6078:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6089:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6071:6:19"},"nodeType":"YulFunctionCall","src":"6071:21:19"},"nodeType":"YulExpressionStatement","src":"6071:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6112:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6123:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6108:3:19"},"nodeType":"YulFunctionCall","src":"6108:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"6128:2:19","type":"","value":"61"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6101:6:19"},"nodeType":"YulFunctionCall","src":"6101:30:19"},"nodeType":"YulExpressionStatement","src":"6101:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6151:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6162:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6147:3:19"},"nodeType":"YulFunctionCall","src":"6147:18:19"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"6167:34:19","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6140:6:19"},"nodeType":"YulFunctionCall","src":"6140:62:19"},"nodeType":"YulExpressionStatement","src":"6140:62:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6222:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6233:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6218:3:19"},"nodeType":"YulFunctionCall","src":"6218:18:19"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"6238:31:19","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6211:6:19"},"nodeType":"YulFunctionCall","src":"6211:59:19"},"nodeType":"YulExpressionStatement","src":"6211:59:19"},{"nodeType":"YulAssignment","src":"6279:27:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6291:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6302:3:19","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6287:3:19"},"nodeType":"YulFunctionCall","src":"6287:19:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6279:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6038:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6052:4:19","type":""}],"src":"5887:425:19"},{"body":{"nodeType":"YulBlock","src":"6491:235:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6508:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6519:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6501:6:19"},"nodeType":"YulFunctionCall","src":"6501:21:19"},"nodeType":"YulExpressionStatement","src":"6501:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6542:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6553:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6538:3:19"},"nodeType":"YulFunctionCall","src":"6538:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"6558:2:19","type":"","value":"45"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6531:6:19"},"nodeType":"YulFunctionCall","src":"6531:30:19"},"nodeType":"YulExpressionStatement","src":"6531:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6581:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6592:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6577:3:19"},"nodeType":"YulFunctionCall","src":"6577:18:19"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"6597:34:19","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6570:6:19"},"nodeType":"YulFunctionCall","src":"6570:62:19"},"nodeType":"YulExpressionStatement","src":"6570:62:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6652:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6663:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6648:3:19"},"nodeType":"YulFunctionCall","src":"6648:18:19"},{"hexValue":"72206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"6668:15:19","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6641:6:19"},"nodeType":"YulFunctionCall","src":"6641:43:19"},"nodeType":"YulExpressionStatement","src":"6641:43:19"},{"nodeType":"YulAssignment","src":"6693:27:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6705:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6716:3:19","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6701:3:19"},"nodeType":"YulFunctionCall","src":"6701:19:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6693:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6468:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6482:4:19","type":""}],"src":"6317:409:19"},{"body":{"nodeType":"YulBlock","src":"6905:174:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6922:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6933:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6915:6:19"},"nodeType":"YulFunctionCall","src":"6915:21:19"},"nodeType":"YulExpressionStatement","src":"6915:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6956:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6967:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6952:3:19"},"nodeType":"YulFunctionCall","src":"6952:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"6972:2:19","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6945:6:19"},"nodeType":"YulFunctionCall","src":"6945:30:19"},"nodeType":"YulExpressionStatement","src":"6945:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6995:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7006:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6991:3:19"},"nodeType":"YulFunctionCall","src":"6991:18:19"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"7011:26:19","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6984:6:19"},"nodeType":"YulFunctionCall","src":"6984:54:19"},"nodeType":"YulExpressionStatement","src":"6984:54:19"},{"nodeType":"YulAssignment","src":"7047:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7059:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7070:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7055:3:19"},"nodeType":"YulFunctionCall","src":"7055:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7047:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6882:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6896:4:19","type":""}],"src":"6731:348:19"},{"body":{"nodeType":"YulBlock","src":"7258:231:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7275:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7286:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7268:6:19"},"nodeType":"YulFunctionCall","src":"7268:21:19"},"nodeType":"YulExpressionStatement","src":"7268:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7309:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7320:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7305:3:19"},"nodeType":"YulFunctionCall","src":"7305:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"7325:2:19","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7298:6:19"},"nodeType":"YulFunctionCall","src":"7298:30:19"},"nodeType":"YulExpressionStatement","src":"7298:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7348:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7359:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7344:3:19"},"nodeType":"YulFunctionCall","src":"7344:18:19"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"7364:34:19","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7337:6:19"},"nodeType":"YulFunctionCall","src":"7337:62:19"},"nodeType":"YulExpressionStatement","src":"7337:62:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7419:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7430:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7415:3:19"},"nodeType":"YulFunctionCall","src":"7415:18:19"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"7435:11:19","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7408:6:19"},"nodeType":"YulFunctionCall","src":"7408:39:19"},"nodeType":"YulExpressionStatement","src":"7408:39:19"},{"nodeType":"YulAssignment","src":"7456:27:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7468:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7479:3:19","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7464:3:19"},"nodeType":"YulFunctionCall","src":"7464:19:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7456:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7235:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7249:4:19","type":""}],"src":"7084:405:19"},{"body":{"nodeType":"YulBlock","src":"7681:309:19","statements":[{"nodeType":"YulVariableDeclaration","src":"7691:27:19","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7711:6:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7705:5:19"},"nodeType":"YulFunctionCall","src":"7705:13:19"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7695:6:19","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7766:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"7774:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7762:3:19"},"nodeType":"YulFunctionCall","src":"7762:17:19"},{"name":"pos","nodeType":"YulIdentifier","src":"7781:3:19"},{"name":"length","nodeType":"YulIdentifier","src":"7786:6:19"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"7727:34:19"},"nodeType":"YulFunctionCall","src":"7727:66:19"},"nodeType":"YulExpressionStatement","src":"7727:66:19"},{"nodeType":"YulVariableDeclaration","src":"7802:29:19","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7819:3:19"},{"name":"length","nodeType":"YulIdentifier","src":"7824:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7815:3:19"},"nodeType":"YulFunctionCall","src":"7815:16:19"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"7806:5:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7840:29:19","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7862:6:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7856:5:19"},"nodeType":"YulFunctionCall","src":"7856:13:19"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"7844:8:19","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7917:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"7925:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7913:3:19"},"nodeType":"YulFunctionCall","src":"7913:17:19"},{"name":"end_1","nodeType":"YulIdentifier","src":"7932:5:19"},{"name":"length_1","nodeType":"YulIdentifier","src":"7939:8:19"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"7878:34:19"},"nodeType":"YulFunctionCall","src":"7878:70:19"},"nodeType":"YulExpressionStatement","src":"7878:70:19"},{"nodeType":"YulAssignment","src":"7957:27:19","value":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"7968:5:19"},{"name":"length_1","nodeType":"YulIdentifier","src":"7975:8:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7964:3:19"},"nodeType":"YulFunctionCall","src":"7964:20:19"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7957:3:19"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7649:3:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7654:6:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7662:6:19","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7673:3:19","type":""}],"src":"7494:496:19"},{"body":{"nodeType":"YulBlock","src":"8169:227:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8186:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"8197:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8179:6:19"},"nodeType":"YulFunctionCall","src":"8179:21:19"},"nodeType":"YulExpressionStatement","src":"8179:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8220:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"8231:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8216:3:19"},"nodeType":"YulFunctionCall","src":"8216:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"8236:2:19","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8209:6:19"},"nodeType":"YulFunctionCall","src":"8209:30:19"},"nodeType":"YulExpressionStatement","src":"8209:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8259:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"8270:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8255:3:19"},"nodeType":"YulFunctionCall","src":"8255:18:19"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"8275:34:19","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8248:6:19"},"nodeType":"YulFunctionCall","src":"8248:62:19"},"nodeType":"YulExpressionStatement","src":"8248:62:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8330:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"8341:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8326:3:19"},"nodeType":"YulFunctionCall","src":"8326:18:19"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"8346:7:19","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8319:6:19"},"nodeType":"YulFunctionCall","src":"8319:35:19"},"nodeType":"YulExpressionStatement","src":"8319:35:19"},{"nodeType":"YulAssignment","src":"8363:27:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8375:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"8386:3:19","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8371:3:19"},"nodeType":"YulFunctionCall","src":"8371:19:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8363:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8146:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8160:4:19","type":""}],"src":"7995:401:19"},{"body":{"nodeType":"YulBlock","src":"8575:226:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8592:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"8603:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8585:6:19"},"nodeType":"YulFunctionCall","src":"8585:21:19"},"nodeType":"YulExpressionStatement","src":"8585:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8626:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"8637:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8622:3:19"},"nodeType":"YulFunctionCall","src":"8622:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"8642:2:19","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8615:6:19"},"nodeType":"YulFunctionCall","src":"8615:30:19"},"nodeType":"YulExpressionStatement","src":"8615:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8665:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"8676:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8661:3:19"},"nodeType":"YulFunctionCall","src":"8661:18:19"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"8681:34:19","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8654:6:19"},"nodeType":"YulFunctionCall","src":"8654:62:19"},"nodeType":"YulExpressionStatement","src":"8654:62:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8736:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"8747:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8732:3:19"},"nodeType":"YulFunctionCall","src":"8732:18:19"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"8752:6:19","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8725:6:19"},"nodeType":"YulFunctionCall","src":"8725:34:19"},"nodeType":"YulExpressionStatement","src":"8725:34:19"},{"nodeType":"YulAssignment","src":"8768:27:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8780:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"8791:3:19","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8776:3:19"},"nodeType":"YulFunctionCall","src":"8776:19:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8768:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8552:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8566:4:19","type":""}],"src":"8401:400:19"},{"body":{"nodeType":"YulBlock","src":"8980:175:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8997:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"9008:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8990:6:19"},"nodeType":"YulFunctionCall","src":"8990:21:19"},"nodeType":"YulExpressionStatement","src":"8990:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9031:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"9042:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9027:3:19"},"nodeType":"YulFunctionCall","src":"9027:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"9047:2:19","type":"","value":"25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9020:6:19"},"nodeType":"YulFunctionCall","src":"9020:30:19"},"nodeType":"YulExpressionStatement","src":"9020:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9070:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"9081:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9066:3:19"},"nodeType":"YulFunctionCall","src":"9066:18:19"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"9086:27:19","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9059:6:19"},"nodeType":"YulFunctionCall","src":"9059:55:19"},"nodeType":"YulExpressionStatement","src":"9059:55:19"},{"nodeType":"YulAssignment","src":"9123:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9135:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"9146:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9131:3:19"},"nodeType":"YulFunctionCall","src":"9131:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9123:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8957:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8971:4:19","type":""}],"src":"8806:349:19"},{"body":{"nodeType":"YulBlock","src":"9334:240:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9351:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"9362:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9344:6:19"},"nodeType":"YulFunctionCall","src":"9344:21:19"},"nodeType":"YulExpressionStatement","src":"9344:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9385:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"9396:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9381:3:19"},"nodeType":"YulFunctionCall","src":"9381:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"9401:2:19","type":"","value":"50"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9374:6:19"},"nodeType":"YulFunctionCall","src":"9374:30:19"},"nodeType":"YulExpressionStatement","src":"9374:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9424:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"9435:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9420:3:19"},"nodeType":"YulFunctionCall","src":"9420:18:19"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"9440:34:19","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9413:6:19"},"nodeType":"YulFunctionCall","src":"9413:62:19"},"nodeType":"YulExpressionStatement","src":"9413:62:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9495:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"9506:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9491:3:19"},"nodeType":"YulFunctionCall","src":"9491:18:19"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"9511:20:19","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9484:6:19"},"nodeType":"YulFunctionCall","src":"9484:48:19"},"nodeType":"YulExpressionStatement","src":"9484:48:19"},{"nodeType":"YulAssignment","src":"9541:27:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9553:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"9564:3:19","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9549:3:19"},"nodeType":"YulFunctionCall","src":"9549:19:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9541:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9311:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9325:4:19","type":""}],"src":"9160:414:19"},{"body":{"nodeType":"YulBlock","src":"9611:152:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9628:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9631:77:19","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9621:6:19"},"nodeType":"YulFunctionCall","src":"9621:88:19"},"nodeType":"YulExpressionStatement","src":"9621:88:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9725:1:19","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9728:4:19","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9718:6:19"},"nodeType":"YulFunctionCall","src":"9718:15:19"},"nodeType":"YulExpressionStatement","src":"9718:15:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9749:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9752:4:19","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9742:6:19"},"nodeType":"YulFunctionCall","src":"9742:15:19"},"nodeType":"YulExpressionStatement","src":"9742:15:19"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"9579:184:19"},{"body":{"nodeType":"YulBlock","src":"9971:309:19","statements":[{"nodeType":"YulVariableDeclaration","src":"9981:52:19","value":{"kind":"number","nodeType":"YulLiteral","src":"9991:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9985:2:19","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10049:9:19"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10064:6:19"},{"name":"_1","nodeType":"YulIdentifier","src":"10072:2:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10060:3:19"},"nodeType":"YulFunctionCall","src":"10060:15:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10042:6:19"},"nodeType":"YulFunctionCall","src":"10042:34:19"},"nodeType":"YulExpressionStatement","src":"10042:34:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10096:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"10107:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10092:3:19"},"nodeType":"YulFunctionCall","src":"10092:18:19"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10116:6:19"},{"name":"_1","nodeType":"YulIdentifier","src":"10124:2:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10112:3:19"},"nodeType":"YulFunctionCall","src":"10112:15:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10085:6:19"},"nodeType":"YulFunctionCall","src":"10085:43:19"},"nodeType":"YulExpressionStatement","src":"10085:43:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10148:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"10159:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10144:3:19"},"nodeType":"YulFunctionCall","src":"10144:18:19"},{"name":"value2","nodeType":"YulIdentifier","src":"10164:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10137:6:19"},"nodeType":"YulFunctionCall","src":"10137:34:19"},"nodeType":"YulExpressionStatement","src":"10137:34:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10191:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"10202:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10187:3:19"},"nodeType":"YulFunctionCall","src":"10187:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"10207:3:19","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10180:6:19"},"nodeType":"YulFunctionCall","src":"10180:31:19"},"nodeType":"YulExpressionStatement","src":"10180:31:19"},{"nodeType":"YulAssignment","src":"10220:54:19","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"10246:6:19"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10258:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"10269:3:19","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10254:3:19"},"nodeType":"YulFunctionCall","src":"10254:19:19"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"10228:17:19"},"nodeType":"YulFunctionCall","src":"10228:46:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10220:4:19"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9916:9:19","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9927:6:19","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9935:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9943:6:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9951:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9962:4:19","type":""}],"src":"9768:512:19"},{"body":{"nodeType":"YulBlock","src":"10365:169:19","statements":[{"body":{"nodeType":"YulBlock","src":"10411:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10420:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10423:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10413:6:19"},"nodeType":"YulFunctionCall","src":"10413:12:19"},"nodeType":"YulExpressionStatement","src":"10413:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10386:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"10395:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10382:3:19"},"nodeType":"YulFunctionCall","src":"10382:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"10407:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10378:3:19"},"nodeType":"YulFunctionCall","src":"10378:32:19"},"nodeType":"YulIf","src":"10375:52:19"},{"nodeType":"YulVariableDeclaration","src":"10436:29:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10455:9:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10449:5:19"},"nodeType":"YulFunctionCall","src":"10449:16:19"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"10440:5:19","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10498:5:19"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"10474:23:19"},"nodeType":"YulFunctionCall","src":"10474:30:19"},"nodeType":"YulExpressionStatement","src":"10474:30:19"},{"nodeType":"YulAssignment","src":"10513:15:19","value":{"name":"value","nodeType":"YulIdentifier","src":"10523:5:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10513:6:19"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10331:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10342:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10354:6:19","type":""}],"src":"10285:249:19"}]},"contents":"{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value3 := memPtr\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC721: approval to current owne\")\n        mstore(add(headStart, 96), \"r\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 61)\n        mstore(add(headStart, 64), \"ERC721: approve caller is not to\")\n        mstore(add(headStart, 96), \"ken owner or approved for all\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC721: caller is not token owne\")\n        mstore(add(headStart, 96), \"r or approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ERC721: invalid token ID\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC721: address zero is not a va\")\n        mstore(add(headStart, 96), \"lid owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC721: transfer from incorrect \")\n        mstore(add(headStart, 96), \"owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC721: transfer to the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"ERC721: approve to caller\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"ERC721: transfer to non ERC721Re\")\n        mstore(add(headStart, 96), \"ceiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n}","id":19,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100df5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb465146101d0578063b88d4fde146101e3578063c87b56dd146101f6578063e985e9c51461020957600080fd5b80636352211e1461019457806370a08231146101a757806395d89b41146101c857600080fd5b8063095ea7b3116100bd578063095ea7b31461015957806323b872dd1461016e57806342842e0e1461018157600080fd5b806301ffc9a7146100e457806306fdde031461010c578063081812fc14610121575b600080fd5b6100f76100f2366004611206565b610252565b60405190151581526020015b60405180910390f35b610114610337565b6040516101039190611291565b61013461012f3660046112a4565b6103c9565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610103565b61016c6101673660046112e6565b6103fd565b005b61016c61017c366004611310565b61055a565b61016c61018f366004611310565b6105e1565b6101346101a23660046112a4565b6105fc565b6101ba6101b536600461134c565b61066e565b604051908152602001610103565b610114610722565b61016c6101de366004611367565b610731565b61016c6101f13660046113d2565b610740565b6101146102043660046112a4565b6107ce565b6100f76102173660046114cc565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260056020908152604080832093909416825291909152205460ff1690565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd0000000000000000000000000000000000000000000000000000000014806102e557507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061033157507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b606060008054610346906114ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610372906114ff565b80156103bf5780601f10610394576101008083540402835291602001916103bf565b820191906000526020600020905b8154815290600101906020018083116103a257829003601f168201915b5050505050905090565b60006103d482610842565b5060009081526004602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b6000610408826105fc565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036104b05760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff821614806104d957506104d98133610217565b61054b5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016104a7565b61055583836108b6565b505050565b6105643382610956565b6105d65760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f7665640000000000000000000000000000000000000060648201526084016104a7565b610555838383610a16565b61055583838360405180602001604052806000815250610740565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff16806103315760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016104a7565b600073ffffffffffffffffffffffffffffffffffffffff82166106f95760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e6572000000000000000000000000000000000000000000000060648201526084016104a7565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205490565b606060018054610346906114ff565b61073c338383610cc3565b5050565b61074a3383610956565b6107bc5760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f7665640000000000000000000000000000000000000060648201526084016104a7565b6107c884848484610dd6565b50505050565b60606107d982610842565b60006107f060408051602081019091526000815290565b90506000815111610810576040518060200160405280600081525061083b565b8061081a84610e5f565b60405160200161082b929190611552565b6040516020818303038152906040525b9392505050565b60008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff166108b35760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016104a7565b50565b600081815260046020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091558190610910826105fc565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610962836105fc565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806109d0575073ffffffffffffffffffffffffffffffffffffffff80821660009081526005602090815260408083209388168352929052205460ff165b80610a0e57508373ffffffffffffffffffffffffffffffffffffffff166109f6846103c9565b73ffffffffffffffffffffffffffffffffffffffff16145b949350505050565b8273ffffffffffffffffffffffffffffffffffffffff16610a36826105fc565b73ffffffffffffffffffffffffffffffffffffffff1614610abf5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016104a7565b73ffffffffffffffffffffffffffffffffffffffff8216610b475760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016104a7565b8273ffffffffffffffffffffffffffffffffffffffff16610b67826105fc565b73ffffffffffffffffffffffffffffffffffffffff1614610bf05760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016104a7565b600081815260046020908152604080832080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811690915573ffffffffffffffffffffffffffffffffffffffff8781168086526003855283862080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610d3e5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104a7565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526005602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610de1848484610a16565b610ded84848484610f1d565b6107c85760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016104a7565b60606000610e6c836110f6565b600101905060008167ffffffffffffffff811115610e8c57610e8c6113a3565b6040519080825280601f01601f191660200182016040528015610eb6576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084610ec057509392505050565b600073ffffffffffffffffffffffffffffffffffffffff84163b156110eb576040517f150b7a0200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063150b7a0290610f94903390899088908890600401611581565b6020604051808303816000875af1925050508015610fed575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610fea918101906115ca565b60015b6110a0573d80801561101b576040519150601f19603f3d011682016040523d82523d6000602084013e611020565b606091505b5080516000036110985760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016104a7565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050610a0e565b506001949350505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061113f577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831061116b576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061118957662386f26fc10000830492506010015b6305f5e10083106111a1576305f5e100830492506008015b61271083106111b557612710830492506004015b606483106111c7576064830492506002015b600a83106103315760010192915050565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146108b357600080fd5b60006020828403121561121857600080fd5b813561083b816111d8565b60005b8381101561123e578181015183820152602001611226565b50506000910152565b6000815180845261125f816020860160208601611223565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061083b6020830184611247565b6000602082840312156112b657600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff811681146112e157600080fd5b919050565b600080604083850312156112f957600080fd5b611302836112bd565b946020939093013593505050565b60008060006060848603121561132557600080fd5b61132e846112bd565b925061133c602085016112bd565b9150604084013590509250925092565b60006020828403121561135e57600080fd5b61083b826112bd565b6000806040838503121561137a57600080fd5b611383836112bd565b91506020830135801515811461139857600080fd5b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080600080608085870312156113e857600080fd5b6113f1856112bd565b93506113ff602086016112bd565b925060408501359150606085013567ffffffffffffffff8082111561142357600080fd5b818701915087601f83011261143757600080fd5b813581811115611449576114496113a3565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561148f5761148f6113a3565b816040528281528a60208487010111156114a857600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080604083850312156114df57600080fd5b6114e8836112bd565b91506114f6602084016112bd565b90509250929050565b600181811c9082168061151357607f821691505b60208210810361154c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60008351611564818460208801611223565b835190830190611578818360208801611223565b01949350505050565b600073ffffffffffffffffffffffffffffffffffffffff8087168352808616602084015250836040830152608060608301526115c06080830184611247565b9695505050505050565b6000602082840312156115dc57600080fd5b815161083b816111d856fea264697066735822122052249ae3b31a2fa66efbec3fe61625c370dc0b8f77b389cfd6b94304a8ec1d3964736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xDF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1D0 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x1E3 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x1F6 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x209 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x194 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1A7 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x159 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x181 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xE4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x121 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF7 PUSH2 0xF2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1206 JUMP JUMPDEST PUSH2 0x252 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x114 PUSH2 0x337 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x103 SWAP2 SWAP1 PUSH2 0x1291 JUMP JUMPDEST PUSH2 0x134 PUSH2 0x12F CALLDATASIZE PUSH1 0x4 PUSH2 0x12A4 JUMP JUMPDEST PUSH2 0x3C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x103 JUMP JUMPDEST PUSH2 0x16C PUSH2 0x167 CALLDATASIZE PUSH1 0x4 PUSH2 0x12E6 JUMP JUMPDEST PUSH2 0x3FD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x16C PUSH2 0x17C CALLDATASIZE PUSH1 0x4 PUSH2 0x1310 JUMP JUMPDEST PUSH2 0x55A JUMP JUMPDEST PUSH2 0x16C PUSH2 0x18F CALLDATASIZE PUSH1 0x4 PUSH2 0x1310 JUMP JUMPDEST PUSH2 0x5E1 JUMP JUMPDEST PUSH2 0x134 PUSH2 0x1A2 CALLDATASIZE PUSH1 0x4 PUSH2 0x12A4 JUMP JUMPDEST PUSH2 0x5FC JUMP JUMPDEST PUSH2 0x1BA PUSH2 0x1B5 CALLDATASIZE PUSH1 0x4 PUSH2 0x134C JUMP JUMPDEST PUSH2 0x66E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x103 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x722 JUMP JUMPDEST PUSH2 0x16C PUSH2 0x1DE CALLDATASIZE PUSH1 0x4 PUSH2 0x1367 JUMP JUMPDEST PUSH2 0x731 JUMP JUMPDEST PUSH2 0x16C PUSH2 0x1F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x13D2 JUMP JUMPDEST PUSH2 0x740 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x204 CALLDATASIZE PUSH1 0x4 PUSH2 0x12A4 JUMP JUMPDEST PUSH2 0x7CE JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x217 CALLDATASIZE PUSH1 0x4 PUSH2 0x14CC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x2E5 JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x331 JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x346 SWAP1 PUSH2 0x14FF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x372 SWAP1 PUSH2 0x14FF JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3BF JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x394 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3BF JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3A2 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D4 DUP3 PUSH2 0x842 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x408 DUP3 PUSH2 0x5FC JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x4B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND EQ DUP1 PUSH2 0x4D9 JUMPI POP PUSH2 0x4D9 DUP2 CALLER PUSH2 0x217 JUMP JUMPDEST PUSH2 0x54B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4A7 JUMP JUMPDEST PUSH2 0x555 DUP4 DUP4 PUSH2 0x8B6 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x564 CALLER DUP3 PUSH2 0x956 JUMP JUMPDEST PUSH2 0x5D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4A7 JUMP JUMPDEST PUSH2 0x555 DUP4 DUP4 DUP4 PUSH2 0xA16 JUMP JUMPDEST PUSH2 0x555 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x740 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 PUSH2 0x331 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4A7 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x6F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4A7 JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x346 SWAP1 PUSH2 0x14FF JUMP JUMPDEST PUSH2 0x73C CALLER DUP4 DUP4 PUSH2 0xCC3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x74A CALLER DUP4 PUSH2 0x956 JUMP JUMPDEST PUSH2 0x7BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4A7 JUMP JUMPDEST PUSH2 0x7C8 DUP5 DUP5 DUP5 DUP5 PUSH2 0xDD6 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x7D9 DUP3 PUSH2 0x842 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7F0 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x810 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x83B JUMP JUMPDEST DUP1 PUSH2 0x81A DUP5 PUSH2 0xE5F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x82B SWAP3 SWAP2 SWAP1 PUSH2 0x1552 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8B3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4A7 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x910 DUP3 PUSH2 0x5FC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x962 DUP4 PUSH2 0x5FC JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x9D0 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST DUP1 PUSH2 0xA0E JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x9F6 DUP5 PUSH2 0x3C9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA36 DUP3 PUSH2 0x5FC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xABF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4A7 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0xB47 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4A7 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB67 DUP3 PUSH2 0x5FC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBF0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4A7 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x2 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xD3E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4A7 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xDE1 DUP5 DUP5 DUP5 PUSH2 0xA16 JUMP JUMPDEST PUSH2 0xDED DUP5 DUP5 DUP5 DUP5 PUSH2 0xF1D JUMP JUMPDEST PUSH2 0x7C8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4A7 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xE6C DUP4 PUSH2 0x10F6 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE8C JUMPI PUSH2 0xE8C PUSH2 0x13A3 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xEB6 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0xEC0 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO PUSH2 0x10EB JUMPI PUSH1 0x40 MLOAD PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0xF94 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1581 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xFED JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xFEA SWAP2 DUP2 ADD SWAP1 PUSH2 0x15CA JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x10A0 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x101B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1020 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x1098 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4A7 JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 EQ SWAP1 POP PUSH2 0xA0E JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x113F JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x116B JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1189 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x11A1 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x11B5 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x11C7 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x331 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x8B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1218 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x83B DUP2 PUSH2 0x11D8 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x123E JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1226 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x125F DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1223 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x83B PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1247 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x12E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x12F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1302 DUP4 PUSH2 0x12BD JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1325 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x132E DUP5 PUSH2 0x12BD JUMP JUMPDEST SWAP3 POP PUSH2 0x133C PUSH1 0x20 DUP6 ADD PUSH2 0x12BD JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x135E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x83B DUP3 PUSH2 0x12BD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x137A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1383 DUP4 PUSH2 0x12BD JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1398 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x13E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13F1 DUP6 PUSH2 0x12BD JUMP JUMPDEST SWAP4 POP PUSH2 0x13FF PUSH1 0x20 DUP7 ADD PUSH2 0x12BD JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1423 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1437 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1449 JUMPI PUSH2 0x1449 PUSH2 0x13A3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x148F JUMPI PUSH2 0x148F PUSH2 0x13A3 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x14A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x14DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14E8 DUP4 PUSH2 0x12BD JUMP JUMPDEST SWAP2 POP PUSH2 0x14F6 PUSH1 0x20 DUP5 ADD PUSH2 0x12BD JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1513 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x154C JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x1564 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x1223 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x1578 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x1223 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP4 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x15C0 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x1247 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x83B DUP2 PUSH2 0x11D8 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE 0x24 SWAP11 0xE3 0xB3 BYTE 0x2F 0xA6 PUSH15 0xFBEC3FE61625C370DC0B8F77B389CF 0xD6 0xB9 NUMBER DIV 0xA8 0xEC SAR CODECOPY PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"628:16377:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300;;;;;;:::i;:::-;;:::i;:::-;;;611:14:19;;604:22;586:41;;574:2;559:18;1570:300:1;;;;;;;;2471:98;;;:::i;:::-;;;;;;;:::i;3935:167::-;;;;;;:::i;:::-;;:::i;:::-;;;1814:42:19;1802:55;;;1784:74;;1772:2;1757:18;3935:167:1;1638:226:19;3468:406:1;;;;;;:::i;:::-;;:::i;:::-;;4612:296;;;;;;:::i;:::-;;:::i;4974:149::-;;;;;;:::i;:::-;;:::i;2190:219::-;;;;;;:::i;:::-;;:::i;1929:204::-;;;;;;:::i;:::-;;:::i;:::-;;;2999:25:19;;;2987:2;2972:18;1929:204:1;2853:177:19;2633:102:1;;;:::i;4169:153::-;;;;;;:::i;:::-;;:::i;5189:276::-;;;;;;:::i;:::-;;:::i;2801:::-;;;;;;:::i;:::-;;:::i;4388:162::-;;;;;;:::i;:::-;4508:25;;;;4485:4;4508:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;4388:162;1570:300;1672:4;1707:40;;;1722:25;1707:40;;:104;;-1:-1:-1;1763:48:1;;;1778:33;1763:48;1707:104;:156;;;-1:-1:-1;952:25:11;937:40;;;;1827:36:1;1688:175;1570:300;-1:-1:-1;;1570:300:1:o;2471:98::-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;-1:-1:-1;4071:24:1;;;;:15;:24;;;;;;;;;3935:167::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;3605:11;;:2;:11;;;3597:57;;;;-1:-1:-1;;;3597:57:1;;5687:2:19;3597:57:1;;;5669:21:19;5726:2;5706:18;;;5699:30;5765:34;5745:18;;;5738:62;5836:3;5816:18;;;5809:31;5857:19;;3597:57:1;;;;;;;;;719:10:8;3686:21:1;;;;;:62;;-1:-1:-1;3711:37:1;3728:5;719:10:8;4388:162:1;:::i;3711:37::-;3665:170;;;;-1:-1:-1;;;3665:170:1;;6089:2:19;3665:170:1;;;6071:21:19;6128:2;6108:18;;;6101:30;6167:34;6147:18;;;6140:62;6238:31;6218:18;;;6211:59;6287:19;;3665:170:1;5887:425:19;3665:170:1;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;4612:296::-;4771:41;719:10:8;4804:7:1;4771:18;:41::i;:::-;4763:99;;;;-1:-1:-1;;;4763:99:1;;6519:2:19;4763:99:1;;;6501:21:19;6558:2;6538:18;;;6531:30;6597:34;6577:18;;;6570:62;6668:15;6648:18;;;6641:43;6701:19;;4763:99:1;6317:409:19;4763:99:1;4873:28;4883:4;4889:2;4893:7;4873:9;:28::i;4974:149::-;5077:39;5094:4;5100:2;5104:7;5077:39;;;;;;;;;;;;:16;:39::i;2190:219::-;2262:7;6794:16;;;:7;:16;;;;;;;;;2324:56;;;;-1:-1:-1;;;2324:56:1;;6933:2:19;2324:56:1;;;6915:21:19;6972:2;6952:18;;;6945:30;7011:26;6991:18;;;6984:54;7055:18;;2324:56:1;6731:348:19;1929:204:1;2001:7;2028:19;;;2020:73;;;;-1:-1:-1;;;2020:73:1;;7286:2:19;2020:73:1;;;7268:21:19;7325:2;7305:18;;;7298:30;7364:34;7344:18;;;7337:62;7435:11;7415:18;;;7408:39;7464:19;;2020:73:1;7084:405:19;2020:73:1;-1:-1:-1;2110:16:1;;;;;;:9;:16;;;;;;;1929:204::o;2633:102::-;2689:13;2721:7;2714:14;;;;;:::i;4169:153::-;4263:52;719:10:8;4296:8:1;4306;4263:18;:52::i;:::-;4169:153;;:::o;5189:276::-;5319:41;719:10:8;5352:7:1;5319:18;:41::i;:::-;5311:99;;;;-1:-1:-1;;;5311:99:1;;6519:2:19;5311:99:1;;;6501:21:19;6558:2;6538:18;;;6531:30;6597:34;6577:18;;;6570:62;6668:15;6648:18;;;6641:43;6701:19;;5311:99:1;6317:409:19;5311:99:1;5420:38;5434:4;5440:2;5444:7;5453:4;5420:13;:38::i;:::-;5189:276;;;;:::o;2801:::-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;3395:9;;;;;;;;;-1:-1:-1;3395:9:1;;;3319:92;2957:10;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;2801:276;-1:-1:-1;;;2801:276:1:o;13240:133::-;7185:4;6794:16;;;:7;:16;;;;;;;;13313:53;;;;-1:-1:-1;;;13313:53:1;;6933:2:19;13313:53:1;;;6915:21:19;6972:2;6952:18;;;6945:30;7011:26;6991:18;;;6984:54;7055:18;;13313:53:1;6731:348:19;13313:53:1;13240:133;:::o;12572:171::-;12646:24;;;;:15;:24;;;;;:29;;;;;;;;;;;;;:24;;12699:23;12646:24;12699:14;:23::i;:::-;12690:46;;;;;;;;;;;;12572:171;;:::o;7404:261::-;7497:4;7513:13;7529:23;7544:7;7529:14;:23::i;:::-;7513:39;;7581:5;7570:16;;:7;:16;;;:52;;;-1:-1:-1;4508:25:1;;;;4485:4;4508:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;7590:32;7570:87;;;;7650:7;7626:31;;:20;7638:7;7626:11;:20::i;:::-;:31;;;7570:87;7562:96;7404:261;-1:-1:-1;;;;7404:261:1:o;11257:1203::-;11381:4;11354:31;;:23;11369:7;11354:14;:23::i;:::-;:31;;;11346:81;;;;-1:-1:-1;;;11346:81:1;;8197:2:19;11346:81:1;;;8179:21:19;8236:2;8216:18;;;8209:30;8275:34;8255:18;;;8248:62;8346:7;8326:18;;;8319:35;8371:19;;11346:81:1;7995:401:19;11346:81:1;11445:16;;;11437:65;;;;-1:-1:-1;;;11437:65:1;;8603:2:19;11437:65:1;;;8585:21:19;8642:2;8622:18;;;8615:30;8681:34;8661:18;;;8654:62;8752:6;8732:18;;;8725:34;8776:19;;11437:65:1;8401:400:19;11437:65:1;11682:4;11655:31;;:23;11670:7;11655:14;:23::i;:::-;:31;;;11647:81;;;;-1:-1:-1;;;11647:81:1;;8197:2:19;11647:81:1;;;8179:21:19;8236:2;8216:18;;;8209:30;8275:34;8255:18;;;8248:62;8346:7;8326:18;;;8319:35;8371:19;;11647:81:1;7995:401:19;11647:81:1;11797:24;;;;:15;:24;;;;;;;;11790:31;;;;;;;;;;12265:15;;;;;;:9;:15;;;;;:20;;;;;;12299:13;;;;;;;;;:18;;11790:31;12299:18;;;12337:16;;;:7;:16;;;;;;:21;;;;;;;;;;12374:27;;11813:7;;12374:27;;;3538:336;3468:406;;:::o;12879:277::-;12999:8;12990:17;;:5;:17;;;12982:55;;;;-1:-1:-1;;;12982:55:1;;9008:2:19;12982:55:1;;;8990:21:19;9047:2;9027:18;;;9020:30;9086:27;9066:18;;;9059:55;9131:18;;12982:55:1;8806:349:19;12982:55:1;13047:25;;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;;;;;;;;;;;;13108:41;;586::19;;;13108::1;;559:18:19;13108:41:1;;;;;;;12879:277;;;:::o;6326:267::-;6438:28;6448:4;6454:2;6458:7;6438:9;:28::i;:::-;6484:47;6507:4;6513:2;6517:7;6526:4;6484:22;:47::i;:::-;6476:110;;;;-1:-1:-1;;;6476:110:1;;9362:2:19;6476:110:1;;;9344:21:19;9401:2;9381:18;;;9374:30;9440:34;9420:18;;;9413:62;9511:20;9491:18;;;9484:48;9549:19;;6476:110:1;9160:414:19;447:696:9;503:13;552:14;569:17;580:5;569:10;:17::i;:::-;589:1;569:21;552:38;;604:20;638:6;627:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;627:18:9;-1:-1:-1;604:41:9;-1:-1:-1;765:28:9;;;781:2;765:28;820:280;851:5;;990:8;985:2;974:14;;969:30;851:5;956:44;1044:2;1035:11;;;-1:-1:-1;1064:21:9;820:280;1064:21;-1:-1:-1;1120:6:9;447:696;-1:-1:-1;;;447:696:9:o;13925:831:1:-;14074:4;14094:13;;;1702:19:7;:23;14090:660:1;;14129:71;;;;;:36;;;;;;:71;;719:10:8;;14180:4:1;;14186:7;;14195:4;;14129:71;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;14129:71:1;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;14125:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14367:6;:13;14384:1;14367:18;14363:321;;14409:60;;-1:-1:-1;;;14409:60:1;;9362:2:19;14409:60:1;;;9344:21:19;9401:2;9381:18;;;9374:30;9440:34;9420:18;;;9413:62;9511:20;9491:18;;;9484:48;9549:19;;14409:60:1;9160:414:19;14363:321:1;14636:6;14630:13;14621:6;14617:2;14613:15;14606:38;14125:573;14250:51;;14260:41;14250:51;;-1:-1:-1;14243:58:1;;14090:660;-1:-1:-1;14735:4:1;13925:831;;;;;;:::o;10139:916:13:-;10192:7;;10276:8;10267:17;;10263:103;;10313:8;10304:17;;;-1:-1:-1;10349:2:13;10339:12;10263:103;10392:8;10383:5;:17;10379:103;;10429:8;10420:17;;;-1:-1:-1;10465:2:13;10455:12;10379:103;10508:8;10499:5;:17;10495:103;;10545:8;10536:17;;;-1:-1:-1;10581:2:13;10571:12;10495:103;10624:7;10615:5;:16;10611:100;;10660:7;10651:16;;;-1:-1:-1;10695:1:13;10685:11;10611:100;10737:7;10728:5;:16;10724:100;;10773:7;10764:16;;;-1:-1:-1;10808:1:13;10798:11;10724:100;10850:7;10841:5;:16;10837:100;;10886:7;10877:16;;;-1:-1:-1;10921:1:13;10911:11;10837:100;10963:7;10954:5;:16;10950:66;;11000:1;10990:11;11042:6;10139:916;-1:-1:-1;;10139:916:13:o;14:177:19:-;99:66;92:5;88:78;81:5;78:89;68:117;;181:1;178;171:12;196:245;254:6;307:2;295:9;286:7;282:23;278:32;275:52;;;323:1;320;313:12;275:52;362:9;349:23;381:30;405:5;381:30;:::i;638:250::-;723:1;733:113;747:6;744:1;741:13;733:113;;;823:11;;;817:18;804:11;;;797:39;769:2;762:10;733:113;;;-1:-1:-1;;880:1:19;862:16;;855:27;638:250::o;893:330::-;935:3;973:5;967:12;1000:6;995:3;988:19;1016:76;1085:6;1078:4;1073:3;1069:14;1062:4;1055:5;1051:16;1016:76;:::i;:::-;1137:2;1125:15;1142:66;1121:88;1112:98;;;;1212:4;1108:109;;893:330;-1:-1:-1;;893:330:19:o;1228:220::-;1377:2;1366:9;1359:21;1340:4;1397:45;1438:2;1427:9;1423:18;1415:6;1397:45;:::i;1453:180::-;1512:6;1565:2;1553:9;1544:7;1540:23;1536:32;1533:52;;;1581:1;1578;1571:12;1533:52;-1:-1:-1;1604:23:19;;1453:180;-1:-1:-1;1453:180:19:o;1869:196::-;1937:20;;1997:42;1986:54;;1976:65;;1966:93;;2055:1;2052;2045:12;1966:93;1869:196;;;:::o;2070:254::-;2138:6;2146;2199:2;2187:9;2178:7;2174:23;2170:32;2167:52;;;2215:1;2212;2205:12;2167:52;2238:29;2257:9;2238:29;:::i;:::-;2228:39;2314:2;2299:18;;;;2286:32;;-1:-1:-1;;;2070:254:19:o;2329:328::-;2406:6;2414;2422;2475:2;2463:9;2454:7;2450:23;2446:32;2443:52;;;2491:1;2488;2481:12;2443:52;2514:29;2533:9;2514:29;:::i;:::-;2504:39;;2562:38;2596:2;2585:9;2581:18;2562:38;:::i;:::-;2552:48;;2647:2;2636:9;2632:18;2619:32;2609:42;;2329:328;;;;;:::o;2662:186::-;2721:6;2774:2;2762:9;2753:7;2749:23;2745:32;2742:52;;;2790:1;2787;2780:12;2742:52;2813:29;2832:9;2813:29;:::i;3035:347::-;3100:6;3108;3161:2;3149:9;3140:7;3136:23;3132:32;3129:52;;;3177:1;3174;3167:12;3129:52;3200:29;3219:9;3200:29;:::i;:::-;3190:39;;3279:2;3268:9;3264:18;3251:32;3326:5;3319:13;3312:21;3305:5;3302:32;3292:60;;3348:1;3345;3338:12;3292:60;3371:5;3361:15;;;3035:347;;;;;:::o;3387:184::-;3439:77;3436:1;3429:88;3536:4;3533:1;3526:15;3560:4;3557:1;3550:15;3576:1197;3671:6;3679;3687;3695;3748:3;3736:9;3727:7;3723:23;3719:33;3716:53;;;3765:1;3762;3755:12;3716:53;3788:29;3807:9;3788:29;:::i;:::-;3778:39;;3836:38;3870:2;3859:9;3855:18;3836:38;:::i;:::-;3826:48;;3921:2;3910:9;3906:18;3893:32;3883:42;;3976:2;3965:9;3961:18;3948:32;3999:18;4040:2;4032:6;4029:14;4026:34;;;4056:1;4053;4046:12;4026:34;4094:6;4083:9;4079:22;4069:32;;4139:7;4132:4;4128:2;4124:13;4120:27;4110:55;;4161:1;4158;4151:12;4110:55;4197:2;4184:16;4219:2;4215;4212:10;4209:36;;;4225:18;;:::i;:::-;4359:2;4353:9;4421:4;4413:13;;4264:66;4409:22;;;4433:2;4405:31;4401:40;4389:53;;;4457:18;;;4477:22;;;4454:46;4451:72;;;4503:18;;:::i;:::-;4543:10;4539:2;4532:22;4578:2;4570:6;4563:18;4618:7;4613:2;4608;4604;4600:11;4596:20;4593:33;4590:53;;;4639:1;4636;4629:12;4590:53;4695:2;4690;4686;4682:11;4677:2;4669:6;4665:15;4652:46;4740:1;4735:2;4730;4722:6;4718:15;4714:24;4707:35;4761:6;4751:16;;;;;;;3576:1197;;;;;;;:::o;4778:260::-;4846:6;4854;4907:2;4895:9;4886:7;4882:23;4878:32;4875:52;;;4923:1;4920;4913:12;4875:52;4946:29;4965:9;4946:29;:::i;:::-;4936:39;;4994:38;5028:2;5017:9;5013:18;4994:38;:::i;:::-;4984:48;;4778:260;;;;;:::o;5043:437::-;5122:1;5118:12;;;;5165;;;5186:61;;5240:4;5232:6;5228:17;5218:27;;5186:61;5293:2;5285:6;5282:14;5262:18;5259:38;5256:218;;5330:77;5327:1;5320:88;5431:4;5428:1;5421:15;5459:4;5456:1;5449:15;5256:218;;5043:437;;;:::o;7494:496::-;7673:3;7711:6;7705:13;7727:66;7786:6;7781:3;7774:4;7766:6;7762:17;7727:66;:::i;:::-;7856:13;;7815:16;;;;7878:70;7856:13;7815:16;7925:4;7913:17;;7878:70;:::i;:::-;7964:20;;7494:496;-1:-1:-1;;;;7494:496:19:o;9768:512::-;9962:4;9991:42;10072:2;10064:6;10060:15;10049:9;10042:34;10124:2;10116:6;10112:15;10107:2;10096:9;10092:18;10085:43;;10164:6;10159:2;10148:9;10144:18;10137:34;10207:3;10202:2;10191:9;10187:18;10180:31;10228:46;10269:3;10258:9;10254:19;10246:6;10228:46;:::i;:::-;10220:54;9768:512;-1:-1:-1;;;;;;9768:512:19:o;10285:249::-;10354:6;10407:2;10395:9;10386:7;10382:23;10378:32;10375:52;;;10423:1;10420;10413:12;10375:52;10455:9;10449:16;10474:30;10498:5;10474:30;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"1132200","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"2598","getApproved(uint256)":"4756","isApprovedForAll(address,address)":"infinite","name()":"infinite","ownerOf(uint256)":"2543","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26654","supportsInterface(bytes4)":"456","symbol()":"infinite","tokenURI(uint256)":"infinite","transferFrom(address,address,uint256)":"infinite"},"internal":{"__unsafe_increaseBalance(address,uint256)":"infinite","_afterTokenTransfer(address,address,uint256,uint256)":"infinite","_approve(address,uint256)":"infinite","_baseURI()":"infinite","_beforeTokenTransfer(address,address,uint256,uint256)":"infinite","_burn(uint256)":"infinite","_checkOnERC721Received(address,address,uint256,bytes memory)":"infinite","_exists(uint256)":"infinite","_isApprovedOrOwner(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_ownerOf(uint256)":"infinite","_requireMinted(uint256)":"infinite","_safeMint(address,uint256)":"infinite","_safeMint(address,uint256,bytes memory)":"infinite","_safeTransfer(address,address,uint256,bytes memory)":"infinite","_setApprovalForAll(address,address,bool)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":140,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":144,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":148,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":152,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":158,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol":{"ERC721Enumerable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This implements an optional extension of {ERC721} defined in the EIP that adds enumerability of all the token ids in the contract as well as all token ids owned by each account.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenByIndex(uint256)":{"details":"See {IERC721Enumerable-tokenByIndex}."},"tokenOfOwnerByIndex(address,uint256)":{"details":"See {IERC721Enumerable-tokenOfOwnerByIndex}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"totalSupply()":{"details":"See {IERC721Enumerable-totalSupply}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenByIndex(uint256)":"4f6ccce7","tokenOfOwnerByIndex(address,uint256)":"2f745c59","tokenURI(uint256)":"c87b56dd","totalSupply()":"18160ddd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This implements an optional extension of {ERC721} defined in the EIP that adds enumerability of all the token ids in the contract as well as all token ids owned by each account.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":\"ERC721Enumerable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":140,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":144,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":148,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":152,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":158,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":1188,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable","label":"_ownedTokens","offset":0,"slot":"6","type":"t_mapping(t_address,t_mapping(t_uint256,t_uint256))"},{"astId":1192,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable","label":"_ownedTokensIndex","offset":0,"slot":"7","type":"t_mapping(t_uint256,t_uint256)"},{"astId":1195,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable","label":"_allTokens","offset":0,"slot":"8","type":"t_array(t_uint256)dyn_storage"},{"astId":1199,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable","label":"_allTokensIndex","offset":0,"slot":"9","type":"t_mapping(t_uint256,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)dyn_storage":{"base":"t_uint256","encoding":"dynamic_array","label":"uint256[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_mapping(t_uint256,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol":{"IERC721Enumerable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"tokenByIndex(uint256)":{"details":"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."},"tokenOfOwnerByIndex(address,uint256)":{"details":"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."},"totalSupply()":{"details":"Returns the total amount of tokens stored by the contract."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional enumeration extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","tokenByIndex(uint256)":"4f6ccce7","tokenOfOwnerByIndex(address,uint256)":"2f745c59","totalSupply()":"18160ddd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional enumeration extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":\"IERC721Enumerable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203a9c73918e174d64ea48fa68de688918a1de5964704229c443190bfc49128b6164736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GASPRICE SWAP13 PUSH20 0x918E174D64EA48FA68DE688918A1DE5964704229 0xC4 NUMBER NOT SIGNEXTEND 0xFC 0x49 SLT DUP12 PUSH2 0x6473 PUSH16 0x6C634300081400330000000000000000 ","sourceMap":"194:9169:7:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9169:7;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203a9c73918e174d64ea48fa68de688918a1de5964704229c443190bfc49128b6164736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GASPRICE SWAP13 PUSH20 0x918E174D64EA48FA68DE688918A1DE5964704229 0xC4 NUMBER NOT SIGNEXTEND 0xFC 0x49 SLT DUP12 PUSH2 0x6473 PUSH16 0x6C634300081400330000000000000000 ","sourceMap":"194:9169:7:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d62acb311ae751b964feb32b2fe3cc82303972ffc579eecff5e53fd09ac3c92d64736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD6 0x2A 0xCB BALANCE BYTE 0xE7 MLOAD 0xB9 PUSH5 0xFEB32B2FE3 0xCC DUP3 ADDRESS CODECOPY PUSH19 0xFFC579EECFF5E53FD09AC3C92D64736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"220:2559:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;220:2559:9;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d62acb311ae751b964feb32b2fe3cc82303972ffc579eecff5e53fd09ac3c92d64736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD6 0x2A 0xCB BALANCE BYTE 0xE7 MLOAD 0xB9 PUSH5 0xFEB32B2FE3 0xCC DUP3 ADDRESS CODECOPY PUSH19 0xFFC579EECFF5E53FD09AC3C92D64736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"220:2559:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ECDSA":{"abi":[],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f8260b559a8c3b0e0077e840d73673d6f6f73d515df05e387bc5ca7dae12a5e164736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF8 0x26 SIGNEXTEND SSTORE SWAP11 DUP13 EXTCODESIZE 0xE STOP PUSH24 0xE840D73673D6F6F73D515DF05E387BC5CA7DAE12A5E16473 PUSH16 0x6C634300081400330000000000000000 ","sourceMap":"369:8761:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;369:8761:10;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f8260b559a8c3b0e0077e840d73673d6f6f73d515df05e387bc5ca7dae12a5e164736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF8 0x26 SIGNEXTEND SSTORE SWAP11 DUP13 EXTCODESIZE 0xE STOP PUSH24 0xE840D73673D6F6F73D515DF05E387BC5CA7DAE12A5E16473 PUSH16 0x6C634300081400330000000000000000 ","sourceMap":"369:8761:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_throwError(enum ECDSA.RecoverError)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","toDataWithIntendedValidatorHash(address,bytes memory)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204f1a54fe591551d108e4c0f42f6ec789e6af1322393fdbb75499668722d49af064736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4F BYTE SLOAD INVALID MSIZE ISZERO MLOAD 0xD1 ADDMOD 0xE4 0xC0 DELEGATECALL 0x2F PUSH15 0xC789E6AF1322393FDBB75499668722 0xD4 SWAP11 CREATE PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"202:12582:13:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12582:13;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204f1a54fe591551d108e4c0f42f6ec789e6af1322393fdbb75499668722d49af064736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4F BYTE SLOAD INVALID MSIZE ISZERO MLOAD 0xD1 ADDMOD 0xE4 0xC0 DELEGATECALL 0x2F PUSH15 0xC789E6AF1322393FDBB75499668722 0xD4 SWAP11 CREATE PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"202:12582:13:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ea97c1df31b6df8316b66dd7306b251c217e7c39f684f39fec0ba0d3f573f74b64736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEA SWAP8 0xC1 0xDF BALANCE 0xB6 0xDF DUP4 AND 0xB6 PUSH14 0xD7306B251C217E7C39F684F39FEC SIGNEXTEND LOG0 0xD3 CREATE2 PUSH20 0xF74B64736F6C6343000814003300000000000000 ","sourceMap":"215:1047:14:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;215:1047:14;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ea97c1df31b6df8316b66dd7306b251c217e7c39f684f39fec0ba0d3f573f74b64736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEA SWAP8 0xC1 0xDF BALANCE 0xB6 0xDF DUP4 AND 0xB6 PUSH14 0xD7306B251C217E7C39F684F39FEC SIGNEXTEND LOG0 0xD3 CREATE2 PUSH20 0xF74B64736F6C6343000814003300000000000000 ","sourceMap":"215:1047:14:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/gitid/IGitIDMinter.sol":{"IGitIDMinter":{"abi":[{"inputs":[{"internalType":"string","name":"username","type":"string"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"address","name":"","type":"address"}],"name":"register","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"register(string,bytes,address)":"59d7eb8d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/gitid/IGitIDMinter.sol\":\"IGitIDMinter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/gitid/IGitIDMinter.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface IGitIDMinter {\\n    function register(\\n        string calldata username,\\n        bytes calldata signature,\\n        address\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x2134c39f299f65597e9fcc4206e93e3557e89a3febcd0418fa377d919b29bb59\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/gitid/Minter.sol":{"Minter":{"abi":[{"inputs":[{"internalType":"contract GitID","name":"_gitID","type":"address"},{"internalType":"address","name":"_signer","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"name","type":"string"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"cost","type":"uint256"}],"name":"NameRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"newSigner","type":"address"}],"name":"SignerUpdated","type":"event"},{"inputs":[{"internalType":"string","name":"username","type":"string"},{"internalType":"uint256","name":"price","type":"uint256"}],"name":"getMessageHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"username","type":"string"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"address","name":"owner","type":"address"}],"name":"register","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"signer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newSigner","type":"address"}],"name":"updateSigner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_23":{"entryPoint":null,"id":23,"parameterSlots":0,"returnSlots":0},"@_3599":{"entryPoint":null,"id":3599,"parameterSlots":2,"returnSlots":0},"@_msgSender_1927":{"entryPoint":null,"id":1927,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_111":{"entryPoint":105,"id":111,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_contract$_GitID_$4113t_address_fromMemory":{"entryPoint":209,"id":null,"parameterSlots":2,"returnSlots":2},"validator_revert_contract_GitID":{"entryPoint":185,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:572:19","statements":[{"nodeType":"YulBlock","src":"6:3:19","statements":[]},{"body":{"nodeType":"YulBlock","src":"66:86:19","statements":[{"body":{"nodeType":"YulBlock","src":"130:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"139:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"142:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"132:6:19"},"nodeType":"YulFunctionCall","src":"132:12:19"},"nodeType":"YulExpressionStatement","src":"132:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"89:5:19"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"100:5:19"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"115:3:19","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"120:1:19","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"111:3:19"},"nodeType":"YulFunctionCall","src":"111:11:19"},{"kind":"number","nodeType":"YulLiteral","src":"124:1:19","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"107:3:19"},"nodeType":"YulFunctionCall","src":"107:19:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"96:3:19"},"nodeType":"YulFunctionCall","src":"96:31:19"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"86:2:19"},"nodeType":"YulFunctionCall","src":"86:42:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"79:6:19"},"nodeType":"YulFunctionCall","src":"79:50:19"},"nodeType":"YulIf","src":"76:70:19"}]},"name":"validator_revert_contract_GitID","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"55:5:19","type":""}],"src":"14:138:19"},{"body":{"nodeType":"YulBlock","src":"269:301:19","statements":[{"body":{"nodeType":"YulBlock","src":"315:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"324:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"327:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"317:6:19"},"nodeType":"YulFunctionCall","src":"317:12:19"},"nodeType":"YulExpressionStatement","src":"317:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"290:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"299:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"286:3:19"},"nodeType":"YulFunctionCall","src":"286:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"311:2:19","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"282:3:19"},"nodeType":"YulFunctionCall","src":"282:32:19"},"nodeType":"YulIf","src":"279:52:19"},{"nodeType":"YulVariableDeclaration","src":"340:29:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"359:9:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"353:5:19"},"nodeType":"YulFunctionCall","src":"353:16:19"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"344:5:19","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"410:5:19"}],"functionName":{"name":"validator_revert_contract_GitID","nodeType":"YulIdentifier","src":"378:31:19"},"nodeType":"YulFunctionCall","src":"378:38:19"},"nodeType":"YulExpressionStatement","src":"378:38:19"},{"nodeType":"YulAssignment","src":"425:15:19","value":{"name":"value","nodeType":"YulIdentifier","src":"435:5:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"425:6:19"}]},{"nodeType":"YulVariableDeclaration","src":"449:40:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"474:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"485:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"470:3:19"},"nodeType":"YulFunctionCall","src":"470:18:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"464:5:19"},"nodeType":"YulFunctionCall","src":"464:25:19"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"453:7:19","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"530:7:19"}],"functionName":{"name":"validator_revert_contract_GitID","nodeType":"YulIdentifier","src":"498:31:19"},"nodeType":"YulFunctionCall","src":"498:40:19"},"nodeType":"YulExpressionStatement","src":"498:40:19"},{"nodeType":"YulAssignment","src":"547:17:19","value":{"name":"value_1","nodeType":"YulIdentifier","src":"557:7:19"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"547:6:19"}]}]},"name":"abi_decode_tuple_t_contract$_GitID_$4113t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"227:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"238:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"250:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"258:6:19","type":""}],"src":"157:413:19"}]},"contents":"{\n    { }\n    function validator_revert_contract_GitID(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_GitID_$4113t_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_GitID(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_contract_GitID(value_1)\n        value1 := value_1\n    }\n}","id":19,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b50604051610ed9380380610ed983398101604081905261002f916100d1565b61003833610069565b600180546001600160a01b039384166001600160a01b0319918216179091556002805492909316911617905561010b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146100ce57600080fd5b50565b600080604083850312156100e457600080fd5b82516100ef816100b9565b6020840151909250610100816100b9565b809150509250929050565b610dbf8061011a6000396000f3fe60806040526004361061007b5760003560e01c80638da5cb5b1161004e5780638da5cb5b14610116578063a7ecd37e14610141578063d4aa691614610161578063f2fde38b1461018f57600080fd5b8063238ac933146100805780633ccfd60b146100d757806359d7eb8d146100ee578063715018a614610101575b600080fd5b34801561008c57600080fd5b506002546100ad9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b3480156100e357600080fd5b506100ec6101af565b005b6100ec6100fc366004610aa0565b6101e6565b34801561010d57600080fd5b506100ec61048f565b34801561012257600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff166100ad565b34801561014d57600080fd5b506100ec61015c366004610b21565b6104a3565b34801561016d57600080fd5b5061018161017c366004610b72565b61051a565b6040519081526020016100ce565b34801561019b57600080fd5b506100ec6101aa366004610b21565b61054d565b6101b7610601565b60405133904780156108fc02916000818181858888f193505050501580156101e3573d6000803e3d6000fd5b50565b6000349050600061022e87878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525086925061051a915050565b9050600061027d86868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061027792508691506106829050565b906106b5565b60025490915073ffffffffffffffffffffffffffffffffffffffff808316911614610309576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e76616c6964207369676e617475726500000000000000000000000000000060448201526064015b60405180910390fd5b6001546040517f1e7663bc00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff1690631e7663bc90610362908c908c90600401610c8e565b602060405180830381865afa15801561037f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a39190610caa565b6001546040517f601219b700000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff169063601219b7906104009084908d908d908b90600401610cc3565b600060405180830381600087803b15801561041a57600080fd5b505af115801561042e573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff167f8a168ef997ae6a1723ef504e6a0205acfe336ccb522561e95accebadde414b878a8a8760405161047c93929190610d04565b60405180910390a2505050505050505050565b610497610601565b6104a160006106d9565b565b6104ab610601565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f5553331329228fbd4123164423717a4a7539f6dfa1c3279a923b98fd681a6c7390600090a250565b6000828260405160200161052f929190610d28565b60405160208183030381529060405280519060200120905092915050565b610555610601565b73ffffffffffffffffffffffffffffffffffffffff81166105f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610300565b6101e3816106d9565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610300565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b60008060006106c4858561074e565b915091506106d181610793565b509392505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008082516041036107845760208301516040840151606085015160001a61077887828585610946565b9450945050505061078c565b506000905060025b9250929050565b60008160048111156107a7576107a7610d5a565b036107af5750565b60018160048111156107c3576107c3610d5a565b0361082a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610300565b600281600481111561083e5761083e610d5a565b036108a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610300565b60038160048111156108b9576108b9610d5a565b036101e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610300565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561097d5750600090506003610a2c565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156109d1573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116610a2557600060019250925050610a2c565b9150600090505b94509492505050565b60008083601f840112610a4757600080fd5b50813567ffffffffffffffff811115610a5f57600080fd5b60208301915083602082850101111561078c57600080fd5b803573ffffffffffffffffffffffffffffffffffffffff81168114610a9b57600080fd5b919050565b600080600080600060608688031215610ab857600080fd5b853567ffffffffffffffff80821115610ad057600080fd5b610adc89838a01610a35565b90975095506020880135915080821115610af557600080fd5b50610b0288828901610a35565b9094509250610b15905060408701610a77565b90509295509295909350565b600060208284031215610b3357600080fd5b610b3c82610a77565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008060408385031215610b8557600080fd5b823567ffffffffffffffff80821115610b9d57600080fd5b818501915085601f830112610bb157600080fd5b813581811115610bc357610bc3610b43565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715610c0957610c09610b43565b81604052828152886020848701011115610c2257600080fd5b826020860160208301376000602093820184015298969091013596505050505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b602081526000610ca2602083018486610c45565b949350505050565b600060208284031215610cbc57600080fd5b5051919050565b848152606060208201526000610cdd606083018587610c45565b905073ffffffffffffffffffffffffffffffffffffffff8316604083015295945050505050565b604081526000610d18604083018587610c45565b9050826020830152949350505050565b6000835160005b81811015610d495760208187018101518583015201610d2f565b509190910191825250602001919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea26469706673582212208e285c7bbc171b151fb7e99f70210b10a4f53c307e00d13ea3cfc442e6f1ee8764736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xED9 CODESIZE SUB DUP1 PUSH2 0xED9 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0xD1 JUMP JUMPDEST PUSH2 0x38 CALLER PUSH2 0x69 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP3 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE PUSH2 0x10B JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xCE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH2 0xEF DUP2 PUSH2 0xB9 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x100 DUP2 PUSH2 0xB9 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xDBF DUP1 PUSH2 0x11A PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x4E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x116 JUMPI DUP1 PUSH4 0xA7ECD37E EQ PUSH2 0x141 JUMPI DUP1 PUSH4 0xD4AA6916 EQ PUSH2 0x161 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x18F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x238AC933 EQ PUSH2 0x80 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0xD7 JUMPI DUP1 PUSH4 0x59D7EB8D EQ PUSH2 0xEE JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x101 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH2 0xAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC PUSH2 0x1AF JUMP JUMPDEST STOP JUMPDEST PUSH2 0xEC PUSH2 0xFC CALLDATASIZE PUSH1 0x4 PUSH2 0xAA0 JUMP JUMPDEST PUSH2 0x1E6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC PUSH2 0x48F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x122 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xAD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC PUSH2 0x15C CALLDATASIZE PUSH1 0x4 PUSH2 0xB21 JUMP JUMPDEST PUSH2 0x4A3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH2 0x17C CALLDATASIZE PUSH1 0x4 PUSH2 0xB72 JUMP JUMPDEST PUSH2 0x51A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xCE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x19B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC PUSH2 0x1AA CALLDATASIZE PUSH1 0x4 PUSH2 0xB21 JUMP JUMPDEST PUSH2 0x54D JUMP JUMPDEST PUSH2 0x1B7 PUSH2 0x601 JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1E3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLVALUE SWAP1 POP PUSH1 0x0 PUSH2 0x22E DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP7 SWAP3 POP PUSH2 0x51A SWAP2 POP POP JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x27D DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x277 SWAP3 POP DUP7 SWAP2 POP PUSH2 0x682 SWAP1 POP JUMP JUMPDEST SWAP1 PUSH2 0x6B5 JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND SWAP2 AND EQ PUSH2 0x309 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C6964207369676E6174757265000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x1E7663BC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x1E7663BC SWAP1 PUSH2 0x362 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0xC8E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x37F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3A3 SWAP2 SWAP1 PUSH2 0xCAA JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x601219B700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x601219B7 SWAP1 PUSH2 0x400 SWAP1 DUP5 SWAP1 DUP14 SWAP1 DUP14 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xCC3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x41A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x42E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8A168EF997AE6A1723EF504E6A0205ACFE336CCB522561E95ACCEBADDE414B87 DUP11 DUP11 DUP8 PUSH1 0x40 MLOAD PUSH2 0x47C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xD04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x497 PUSH2 0x601 JUMP JUMPDEST PUSH2 0x4A1 PUSH1 0x0 PUSH2 0x6D9 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x4AB PUSH2 0x601 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0x5553331329228FBD4123164423717A4A7539F6DFA1C3279A923B98FD681A6C73 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x52F SWAP3 SWAP2 SWAP1 PUSH2 0xD28 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x555 PUSH2 0x601 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x5F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x300 JUMP JUMPDEST PUSH2 0x1E3 DUP2 PUSH2 0x6D9 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x4A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x300 JUMP JUMPDEST PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1C SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3C SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x6C4 DUP6 DUP6 PUSH2 0x74E JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x6D1 DUP2 PUSH2 0x793 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x41 SUB PUSH2 0x784 JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x0 BYTE PUSH2 0x778 DUP8 DUP3 DUP6 DUP6 PUSH2 0x946 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP PUSH2 0x78C JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH1 0x2 JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x7A7 JUMPI PUSH2 0x7A7 PUSH2 0xD5A JUMP JUMPDEST SUB PUSH2 0x7AF JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x7C3 JUMPI PUSH2 0x7C3 PUSH2 0xD5A JUMP JUMPDEST SUB PUSH2 0x82A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x300 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x83E JUMPI PUSH2 0x83E PUSH2 0xD5A JUMP JUMPDEST SUB PUSH2 0x8A5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x300 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x8B9 JUMPI PUSH2 0x8B9 PUSH2 0xD5A JUMP JUMPDEST SUB PUSH2 0x1E3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x300 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x97D JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0xA2C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9D1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD MLOAD SWAP2 POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xA25 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0xA2C JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xA47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x78C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xA9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xAB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xAD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xADC DUP10 DUP4 DUP11 ADD PUSH2 0xA35 JUMP JUMPDEST SWAP1 SWAP8 POP SWAP6 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xAF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB02 DUP9 DUP3 DUP10 ADD PUSH2 0xA35 JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP PUSH2 0xB15 SWAP1 POP PUSH1 0x40 DUP8 ADD PUSH2 0xA77 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB3C DUP3 PUSH2 0xA77 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xB9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xBB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xBC3 JUMPI PUSH2 0xBC3 PUSH2 0xB43 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xC09 JUMPI PUSH2 0xC09 PUSH2 0xB43 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0xC22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 SWAP4 DUP3 ADD DUP5 ADD MSTORE SWAP9 SWAP7 SWAP1 SWAP2 ADD CALLDATALOAD SWAP7 POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x0 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND DUP5 ADD ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xCA2 PUSH1 0x20 DUP4 ADD DUP5 DUP7 PUSH2 0xC45 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP5 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0xCDD PUSH1 0x60 DUP4 ADD DUP6 DUP8 PUSH2 0xC45 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0xD18 PUSH1 0x40 DUP4 ADD DUP6 DUP8 PUSH2 0xC45 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xD49 JUMPI PUSH1 0x20 DUP2 DUP8 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0xD2F JUMP JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD SWAP2 DUP3 MSTORE POP PUSH1 0x20 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP15 0x28 0x5C PUSH28 0xBC171B151FB7E99F70210B10A4F53C307E00D13EA3CFC442E6F1EE87 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"204:1375:16:-:0;;;485:107;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;936:32:0;719:10:8;936:18:0;:32::i;:::-;545:5:16;:14;;-1:-1:-1;;;;;545:14:16;;;-1:-1:-1;;;;;;545:14:16;;;;;;;569:6;:16;;;;;;;;;;;204:1375;;2426:187:0;2499:16;2518:6;;-1:-1:-1;;;;;2534:17:0;;;-1:-1:-1;;;;;;2534:17:0;;;;;;2566:40;;2518:6;;;;;;;2566:40;;2499:16;2566:40;2489:124;2426:187;:::o;14:138:19:-;-1:-1:-1;;;;;96:31:19;;86:42;;76:70;;142:1;139;132:12;76:70;14:138;:::o;157:413::-;250:6;258;311:2;299:9;290:7;286:23;282:32;279:52;;;327:1;324;317:12;279:52;359:9;353:16;378:38;410:5;378:38;:::i;:::-;485:2;470:18;;464:25;435:5;;-1:-1:-1;498:40:19;464:25;498:40;:::i;:::-;557:7;547:17;;;157:413;;;;;:::o;:::-;204:1375:16;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_checkOwner_54":{"entryPoint":1537,"id":54,"parameterSlots":0,"returnSlots":0},"@_msgSender_1927":{"entryPoint":null,"id":1927,"parameterSlots":0,"returnSlots":1},"@_throwError_2220":{"entryPoint":1939,"id":2220,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_111":{"entryPoint":1753,"id":111,"parameterSlots":1,"returnSlots":0},"@getMessageHash_3677":{"entryPoint":1306,"id":3677,"parameterSlots":2,"returnSlots":1},"@owner_40":{"entryPoint":null,"id":40,"parameterSlots":0,"returnSlots":1},"@recover_2293":{"entryPoint":1717,"id":2293,"parameterSlots":2,"returnSlots":1},"@register_3659":{"entryPoint":486,"id":3659,"parameterSlots":5,"returnSlots":0},"@renounceOwnership_68":{"entryPoint":1167,"id":68,"parameterSlots":0,"returnSlots":0},"@signer_3570":{"entryPoint":null,"id":3570,"parameterSlots":0,"returnSlots":0},"@toEthSignedMessageHash_2477":{"entryPoint":1666,"id":2477,"parameterSlots":1,"returnSlots":1},"@transferOwnership_91":{"entryPoint":1357,"id":91,"parameterSlots":1,"returnSlots":0},"@tryRecover_2266":{"entryPoint":1870,"id":2266,"parameterSlots":2,"returnSlots":2},"@tryRecover_2434":{"entryPoint":2374,"id":2434,"parameterSlots":4,"returnSlots":2},"@updateSigner_3712":{"entryPoint":1187,"id":3712,"parameterSlots":1,"returnSlots":0},"@withdraw_3696":{"entryPoint":431,"id":3696,"parameterSlots":0,"returnSlots":0},"abi_decode_address":{"entryPoint":2679,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_string_calldata":{"entryPoint":2613,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":2849,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_calldata_ptrt_bytes_calldata_ptrt_address":{"entryPoint":2720,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_string_memory_ptrt_uint256":{"entryPoint":2930,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":3242,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string_calldata":{"entryPoint":3141,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_uint256__to_t_string_memory_ptr_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":3368,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3214,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_string_calldata_ptr_t_uint256__to_t_string_memory_ptr_t_uint256__fromStack_reversed":{"entryPoint":3332,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4f2d7dfcb27c0aafa13ae8c400de482c7832204d194018b6e45bd2bf244c74e7__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256_t_string_calldata_ptr_t_address__to_t_uint256_t_string_memory_ptr_t_address__fromStack_reversed":{"entryPoint":3267,"id":null,"parameterSlots":5,"returnSlots":1},"panic_error_0x21":{"entryPoint":3418,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":2883,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:8044:19","statements":[{"nodeType":"YulBlock","src":"6:3:19","statements":[]},{"body":{"nodeType":"YulBlock","src":"115:125:19","statements":[{"nodeType":"YulAssignment","src":"125:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"137:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"148:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"133:3:19"},"nodeType":"YulFunctionCall","src":"133:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"125:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"167:9:19"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"182:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"190:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"178:3:19"},"nodeType":"YulFunctionCall","src":"178:55:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"160:6:19"},"nodeType":"YulFunctionCall","src":"160:74:19"},"nodeType":"YulExpressionStatement","src":"160:74:19"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"84:9:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"95:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"106:4:19","type":""}],"src":"14:226:19"},{"body":{"nodeType":"YulBlock","src":"318:275:19","statements":[{"body":{"nodeType":"YulBlock","src":"367:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"376:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"379:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"369:6:19"},"nodeType":"YulFunctionCall","src":"369:12:19"},"nodeType":"YulExpressionStatement","src":"369:12:19"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"346:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"354:4:19","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"342:3:19"},"nodeType":"YulFunctionCall","src":"342:17:19"},{"name":"end","nodeType":"YulIdentifier","src":"361:3:19"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"338:3:19"},"nodeType":"YulFunctionCall","src":"338:27:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"331:6:19"},"nodeType":"YulFunctionCall","src":"331:35:19"},"nodeType":"YulIf","src":"328:55:19"},{"nodeType":"YulAssignment","src":"392:30:19","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"415:6:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"402:12:19"},"nodeType":"YulFunctionCall","src":"402:20:19"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"392:6:19"}]},{"body":{"nodeType":"YulBlock","src":"465:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"474:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"477:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"467:6:19"},"nodeType":"YulFunctionCall","src":"467:12:19"},"nodeType":"YulExpressionStatement","src":"467:12:19"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"437:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"445:18:19","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"434:2:19"},"nodeType":"YulFunctionCall","src":"434:30:19"},"nodeType":"YulIf","src":"431:50:19"},{"nodeType":"YulAssignment","src":"490:29:19","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"506:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"514:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"502:3:19"},"nodeType":"YulFunctionCall","src":"502:17:19"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"490:8:19"}]},{"body":{"nodeType":"YulBlock","src":"571:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"580:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"583:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"573:6:19"},"nodeType":"YulFunctionCall","src":"573:12:19"},"nodeType":"YulExpressionStatement","src":"573:12:19"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"542:6:19"},{"name":"length","nodeType":"YulIdentifier","src":"550:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"538:3:19"},"nodeType":"YulFunctionCall","src":"538:19:19"},{"kind":"number","nodeType":"YulLiteral","src":"559:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"534:3:19"},"nodeType":"YulFunctionCall","src":"534:30:19"},{"name":"end","nodeType":"YulIdentifier","src":"566:3:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"531:2:19"},"nodeType":"YulFunctionCall","src":"531:39:19"},"nodeType":"YulIf","src":"528:59:19"}]},"name":"abi_decode_string_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"281:6:19","type":""},{"name":"end","nodeType":"YulTypedName","src":"289:3:19","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"297:8:19","type":""},{"name":"length","nodeType":"YulTypedName","src":"307:6:19","type":""}],"src":"245:348:19"},{"body":{"nodeType":"YulBlock","src":"647:147:19","statements":[{"nodeType":"YulAssignment","src":"657:29:19","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"679:6:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"666:12:19"},"nodeType":"YulFunctionCall","src":"666:20:19"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"657:5:19"}]},{"body":{"nodeType":"YulBlock","src":"772:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"781:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"784:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"774:6:19"},"nodeType":"YulFunctionCall","src":"774:12:19"},"nodeType":"YulExpressionStatement","src":"774:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"708:5:19"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"719:5:19"},{"kind":"number","nodeType":"YulLiteral","src":"726:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"715:3:19"},"nodeType":"YulFunctionCall","src":"715:54:19"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"705:2:19"},"nodeType":"YulFunctionCall","src":"705:65:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"698:6:19"},"nodeType":"YulFunctionCall","src":"698:73:19"},"nodeType":"YulIf","src":"695:93:19"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"626:6:19","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"637:5:19","type":""}],"src":"598:196:19"},{"body":{"nodeType":"YulBlock","src":"942:651:19","statements":[{"body":{"nodeType":"YulBlock","src":"988:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"997:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1000:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"990:6:19"},"nodeType":"YulFunctionCall","src":"990:12:19"},"nodeType":"YulExpressionStatement","src":"990:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"963:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"972:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"959:3:19"},"nodeType":"YulFunctionCall","src":"959:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"984:2:19","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"955:3:19"},"nodeType":"YulFunctionCall","src":"955:32:19"},"nodeType":"YulIf","src":"952:52:19"},{"nodeType":"YulVariableDeclaration","src":"1013:37:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1027:12:19"},"nodeType":"YulFunctionCall","src":"1027:23:19"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1017:6:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1059:28:19","value":{"kind":"number","nodeType":"YulLiteral","src":"1069:18:19","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1063:2:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"1114:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1123:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1126:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1116:6:19"},"nodeType":"YulFunctionCall","src":"1116:12:19"},"nodeType":"YulExpressionStatement","src":"1116:12:19"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1102:6:19"},{"name":"_1","nodeType":"YulIdentifier","src":"1110:2:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1099:2:19"},"nodeType":"YulFunctionCall","src":"1099:14:19"},"nodeType":"YulIf","src":"1096:34:19"},{"nodeType":"YulVariableDeclaration","src":"1139:85:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1196:9:19"},{"name":"offset","nodeType":"YulIdentifier","src":"1207:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1192:3:19"},"nodeType":"YulFunctionCall","src":"1192:22:19"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1216:7:19"}],"functionName":{"name":"abi_decode_string_calldata","nodeType":"YulIdentifier","src":"1165:26:19"},"nodeType":"YulFunctionCall","src":"1165:59:19"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"1143:8:19","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"1153:8:19","type":""}]},{"nodeType":"YulAssignment","src":"1233:18:19","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"1243:8:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1233:6:19"}]},{"nodeType":"YulAssignment","src":"1260:18:19","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"1270:8:19"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1260:6:19"}]},{"nodeType":"YulVariableDeclaration","src":"1287:48:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1320:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1331:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1316:3:19"},"nodeType":"YulFunctionCall","src":"1316:18:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1303:12:19"},"nodeType":"YulFunctionCall","src":"1303:32:19"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1291:8:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"1364:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1373:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1376:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1366:6:19"},"nodeType":"YulFunctionCall","src":"1366:12:19"},"nodeType":"YulExpressionStatement","src":"1366:12:19"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1350:8:19"},{"name":"_1","nodeType":"YulIdentifier","src":"1360:2:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1347:2:19"},"nodeType":"YulFunctionCall","src":"1347:16:19"},"nodeType":"YulIf","src":"1344:36:19"},{"nodeType":"YulVariableDeclaration","src":"1389:87:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1446:9:19"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1457:8:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1442:3:19"},"nodeType":"YulFunctionCall","src":"1442:24:19"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1468:7:19"}],"functionName":{"name":"abi_decode_string_calldata","nodeType":"YulIdentifier","src":"1415:26:19"},"nodeType":"YulFunctionCall","src":"1415:61:19"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"1393:8:19","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"1403:8:19","type":""}]},{"nodeType":"YulAssignment","src":"1485:18:19","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"1495:8:19"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1485:6:19"}]},{"nodeType":"YulAssignment","src":"1512:18:19","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"1522:8:19"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1512:6:19"}]},{"nodeType":"YulAssignment","src":"1539:48:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1572:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1583:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1568:3:19"},"nodeType":"YulFunctionCall","src":"1568:18:19"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1549:18:19"},"nodeType":"YulFunctionCall","src":"1549:38:19"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"1539:6:19"}]}]},"name":"abi_decode_tuple_t_string_calldata_ptrt_bytes_calldata_ptrt_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"876:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"887:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"899:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"907:6:19","type":""},{"name":"value2","nodeType":"YulTypedName","src":"915:6:19","type":""},{"name":"value3","nodeType":"YulTypedName","src":"923:6:19","type":""},{"name":"value4","nodeType":"YulTypedName","src":"931:6:19","type":""}],"src":"799:794:19"},{"body":{"nodeType":"YulBlock","src":"1668:116:19","statements":[{"body":{"nodeType":"YulBlock","src":"1714:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1723:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1726:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1716:6:19"},"nodeType":"YulFunctionCall","src":"1716:12:19"},"nodeType":"YulExpressionStatement","src":"1716:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1689:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"1698:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1685:3:19"},"nodeType":"YulFunctionCall","src":"1685:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"1710:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1681:3:19"},"nodeType":"YulFunctionCall","src":"1681:32:19"},"nodeType":"YulIf","src":"1678:52:19"},{"nodeType":"YulAssignment","src":"1739:39:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1768:9:19"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1749:18:19"},"nodeType":"YulFunctionCall","src":"1749:29:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1739:6:19"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1634:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1645:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1657:6:19","type":""}],"src":"1598:186:19"},{"body":{"nodeType":"YulBlock","src":"1821:152:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1838:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1841:77:19","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1831:6:19"},"nodeType":"YulFunctionCall","src":"1831:88:19"},"nodeType":"YulExpressionStatement","src":"1831:88:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1935:1:19","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1938:4:19","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1928:6:19"},"nodeType":"YulFunctionCall","src":"1928:15:19"},"nodeType":"YulExpressionStatement","src":"1928:15:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1959:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1962:4:19","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1952:6:19"},"nodeType":"YulFunctionCall","src":"1952:15:19"},"nodeType":"YulExpressionStatement","src":"1952:15:19"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"1789:184:19"},{"body":{"nodeType":"YulBlock","src":"2075:962:19","statements":[{"body":{"nodeType":"YulBlock","src":"2121:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2130:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2133:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2123:6:19"},"nodeType":"YulFunctionCall","src":"2123:12:19"},"nodeType":"YulExpressionStatement","src":"2123:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2096:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"2105:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2092:3:19"},"nodeType":"YulFunctionCall","src":"2092:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"2117:2:19","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2088:3:19"},"nodeType":"YulFunctionCall","src":"2088:32:19"},"nodeType":"YulIf","src":"2085:52:19"},{"nodeType":"YulVariableDeclaration","src":"2146:37:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2173:9:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2160:12:19"},"nodeType":"YulFunctionCall","src":"2160:23:19"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2150:6:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2192:28:19","value":{"kind":"number","nodeType":"YulLiteral","src":"2202:18:19","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2196:2:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"2247:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2256:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2259:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2249:6:19"},"nodeType":"YulFunctionCall","src":"2249:12:19"},"nodeType":"YulExpressionStatement","src":"2249:12:19"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2235:6:19"},{"name":"_1","nodeType":"YulIdentifier","src":"2243:2:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2232:2:19"},"nodeType":"YulFunctionCall","src":"2232:14:19"},"nodeType":"YulIf","src":"2229:34:19"},{"nodeType":"YulVariableDeclaration","src":"2272:32:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2286:9:19"},{"name":"offset","nodeType":"YulIdentifier","src":"2297:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2282:3:19"},"nodeType":"YulFunctionCall","src":"2282:22:19"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2276:2:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"2352:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2361:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2364:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2354:6:19"},"nodeType":"YulFunctionCall","src":"2354:12:19"},"nodeType":"YulExpressionStatement","src":"2354:12:19"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2331:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"2335:4:19","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2327:3:19"},"nodeType":"YulFunctionCall","src":"2327:13:19"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2342:7:19"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2323:3:19"},"nodeType":"YulFunctionCall","src":"2323:27:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2316:6:19"},"nodeType":"YulFunctionCall","src":"2316:35:19"},"nodeType":"YulIf","src":"2313:55:19"},{"nodeType":"YulVariableDeclaration","src":"2377:26:19","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2400:2:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2387:12:19"},"nodeType":"YulFunctionCall","src":"2387:16:19"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"2381:2:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"2426:22:19","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2428:16:19"},"nodeType":"YulFunctionCall","src":"2428:18:19"},"nodeType":"YulExpressionStatement","src":"2428:18:19"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2418:2:19"},{"name":"_1","nodeType":"YulIdentifier","src":"2422:2:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2415:2:19"},"nodeType":"YulFunctionCall","src":"2415:10:19"},"nodeType":"YulIf","src":"2412:36:19"},{"nodeType":"YulVariableDeclaration","src":"2457:76:19","value":{"kind":"number","nodeType":"YulLiteral","src":"2467:66:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"2461:2:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2542:23:19","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2562:2:19","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2556:5:19"},"nodeType":"YulFunctionCall","src":"2556:9:19"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"2546:6:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2574:71:19","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2596:6:19"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2620:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"2624:4:19","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2616:3:19"},"nodeType":"YulFunctionCall","src":"2616:13:19"},{"name":"_4","nodeType":"YulIdentifier","src":"2631:2:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2612:3:19"},"nodeType":"YulFunctionCall","src":"2612:22:19"},{"kind":"number","nodeType":"YulLiteral","src":"2636:2:19","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2608:3:19"},"nodeType":"YulFunctionCall","src":"2608:31:19"},{"name":"_4","nodeType":"YulIdentifier","src":"2641:2:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2604:3:19"},"nodeType":"YulFunctionCall","src":"2604:40:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2592:3:19"},"nodeType":"YulFunctionCall","src":"2592:53:19"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2578:10:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"2704:22:19","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2706:16:19"},"nodeType":"YulFunctionCall","src":"2706:18:19"},"nodeType":"YulExpressionStatement","src":"2706:18:19"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2663:10:19"},{"name":"_1","nodeType":"YulIdentifier","src":"2675:2:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2660:2:19"},"nodeType":"YulFunctionCall","src":"2660:18:19"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2683:10:19"},{"name":"memPtr","nodeType":"YulIdentifier","src":"2695:6:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2680:2:19"},"nodeType":"YulFunctionCall","src":"2680:22:19"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2657:2:19"},"nodeType":"YulFunctionCall","src":"2657:46:19"},"nodeType":"YulIf","src":"2654:72:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2742:2:19","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2746:10:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2735:6:19"},"nodeType":"YulFunctionCall","src":"2735:22:19"},"nodeType":"YulExpressionStatement","src":"2735:22:19"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2773:6:19"},{"name":"_3","nodeType":"YulIdentifier","src":"2781:2:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2766:6:19"},"nodeType":"YulFunctionCall","src":"2766:18:19"},"nodeType":"YulExpressionStatement","src":"2766:18:19"},{"body":{"nodeType":"YulBlock","src":"2832:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2841:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2844:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2834:6:19"},"nodeType":"YulFunctionCall","src":"2834:12:19"},"nodeType":"YulExpressionStatement","src":"2834:12:19"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2807:2:19"},{"name":"_3","nodeType":"YulIdentifier","src":"2811:2:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2803:3:19"},"nodeType":"YulFunctionCall","src":"2803:11:19"},{"kind":"number","nodeType":"YulLiteral","src":"2816:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2799:3:19"},"nodeType":"YulFunctionCall","src":"2799:22:19"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2823:7:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2796:2:19"},"nodeType":"YulFunctionCall","src":"2796:35:19"},"nodeType":"YulIf","src":"2793:55:19"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2874:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"2882:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2870:3:19"},"nodeType":"YulFunctionCall","src":"2870:17:19"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2893:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"2897:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2889:3:19"},"nodeType":"YulFunctionCall","src":"2889:13:19"},{"name":"_3","nodeType":"YulIdentifier","src":"2904:2:19"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"2857:12:19"},"nodeType":"YulFunctionCall","src":"2857:50:19"},"nodeType":"YulExpressionStatement","src":"2857:50:19"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2931:6:19"},{"name":"_3","nodeType":"YulIdentifier","src":"2939:2:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2927:3:19"},"nodeType":"YulFunctionCall","src":"2927:15:19"},{"kind":"number","nodeType":"YulLiteral","src":"2944:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2923:3:19"},"nodeType":"YulFunctionCall","src":"2923:26:19"},{"kind":"number","nodeType":"YulLiteral","src":"2951:1:19","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2916:6:19"},"nodeType":"YulFunctionCall","src":"2916:37:19"},"nodeType":"YulExpressionStatement","src":"2916:37:19"},{"nodeType":"YulAssignment","src":"2962:16:19","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"2972:6:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2962:6:19"}]},{"nodeType":"YulAssignment","src":"2987:44:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3014:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"3025:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3010:3:19"},"nodeType":"YulFunctionCall","src":"3010:20:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2997:12:19"},"nodeType":"YulFunctionCall","src":"2997:34:19"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2987:6:19"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2033:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2044:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2056:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2064:6:19","type":""}],"src":"1978:1059:19"},{"body":{"nodeType":"YulBlock","src":"3143:76:19","statements":[{"nodeType":"YulAssignment","src":"3153:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3165:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"3176:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3161:3:19"},"nodeType":"YulFunctionCall","src":"3161:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3153:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3195:9:19"},{"name":"value0","nodeType":"YulIdentifier","src":"3206:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3188:6:19"},"nodeType":"YulFunctionCall","src":"3188:25:19"},"nodeType":"YulExpressionStatement","src":"3188:25:19"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3112:9:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3123:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3134:4:19","type":""}],"src":"3042:177:19"},{"body":{"nodeType":"YulBlock","src":"3398:167:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3415:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"3426:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3408:6:19"},"nodeType":"YulFunctionCall","src":"3408:21:19"},"nodeType":"YulExpressionStatement","src":"3408:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3449:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"3460:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3445:3:19"},"nodeType":"YulFunctionCall","src":"3445:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"3465:2:19","type":"","value":"17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3438:6:19"},"nodeType":"YulFunctionCall","src":"3438:30:19"},"nodeType":"YulExpressionStatement","src":"3438:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3488:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"3499:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3484:3:19"},"nodeType":"YulFunctionCall","src":"3484:18:19"},{"hexValue":"496e76616c6964207369676e6174757265","kind":"string","nodeType":"YulLiteral","src":"3504:19:19","type":"","value":"Invalid signature"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3477:6:19"},"nodeType":"YulFunctionCall","src":"3477:47:19"},"nodeType":"YulExpressionStatement","src":"3477:47:19"},{"nodeType":"YulAssignment","src":"3533:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3545:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"3556:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3541:3:19"},"nodeType":"YulFunctionCall","src":"3541:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3533:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_4f2d7dfcb27c0aafa13ae8c400de482c7832204d194018b6e45bd2bf244c74e7__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3375:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3389:4:19","type":""}],"src":"3224:341:19"},{"body":{"nodeType":"YulBlock","src":"3637:259:19","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3654:3:19"},{"name":"length","nodeType":"YulIdentifier","src":"3659:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3647:6:19"},"nodeType":"YulFunctionCall","src":"3647:19:19"},"nodeType":"YulExpressionStatement","src":"3647:19:19"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3692:3:19"},{"kind":"number","nodeType":"YulLiteral","src":"3697:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3688:3:19"},"nodeType":"YulFunctionCall","src":"3688:14:19"},{"name":"start","nodeType":"YulIdentifier","src":"3704:5:19"},{"name":"length","nodeType":"YulIdentifier","src":"3711:6:19"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"3675:12:19"},"nodeType":"YulFunctionCall","src":"3675:43:19"},"nodeType":"YulExpressionStatement","src":"3675:43:19"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3742:3:19"},{"name":"length","nodeType":"YulIdentifier","src":"3747:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3738:3:19"},"nodeType":"YulFunctionCall","src":"3738:16:19"},{"kind":"number","nodeType":"YulLiteral","src":"3756:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3734:3:19"},"nodeType":"YulFunctionCall","src":"3734:27:19"},{"kind":"number","nodeType":"YulLiteral","src":"3763:1:19","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3727:6:19"},"nodeType":"YulFunctionCall","src":"3727:38:19"},"nodeType":"YulExpressionStatement","src":"3727:38:19"},{"nodeType":"YulAssignment","src":"3774:116:19","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3789:3:19"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3802:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"3810:2:19","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3798:3:19"},"nodeType":"YulFunctionCall","src":"3798:15:19"},{"kind":"number","nodeType":"YulLiteral","src":"3815:66:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3794:3:19"},"nodeType":"YulFunctionCall","src":"3794:88:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3785:3:19"},"nodeType":"YulFunctionCall","src":"3785:98:19"},{"kind":"number","nodeType":"YulLiteral","src":"3885:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3781:3:19"},"nodeType":"YulFunctionCall","src":"3781:109:19"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3774:3:19"}]}]},"name":"abi_encode_string_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"3606:5:19","type":""},{"name":"length","nodeType":"YulTypedName","src":"3613:6:19","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3621:3:19","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3629:3:19","type":""}],"src":"3570:326:19"},{"body":{"nodeType":"YulBlock","src":"4032:116:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4049:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"4060:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4042:6:19"},"nodeType":"YulFunctionCall","src":"4042:21:19"},"nodeType":"YulExpressionStatement","src":"4042:21:19"},{"nodeType":"YulAssignment","src":"4072:70:19","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4107:6:19"},{"name":"value1","nodeType":"YulIdentifier","src":"4115:6:19"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4127:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"4138:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4123:3:19"},"nodeType":"YulFunctionCall","src":"4123:18:19"}],"functionName":{"name":"abi_encode_string_calldata","nodeType":"YulIdentifier","src":"4080:26:19"},"nodeType":"YulFunctionCall","src":"4080:62:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4072:4:19"}]}]},"name":"abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3993:9:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4004:6:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4012:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4023:4:19","type":""}],"src":"3901:247:19"},{"body":{"nodeType":"YulBlock","src":"4234:103:19","statements":[{"body":{"nodeType":"YulBlock","src":"4280:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4289:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4292:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4282:6:19"},"nodeType":"YulFunctionCall","src":"4282:12:19"},"nodeType":"YulExpressionStatement","src":"4282:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4255:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"4264:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4251:3:19"},"nodeType":"YulFunctionCall","src":"4251:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"4276:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4247:3:19"},"nodeType":"YulFunctionCall","src":"4247:32:19"},"nodeType":"YulIf","src":"4244:52:19"},{"nodeType":"YulAssignment","src":"4305:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4321:9:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4315:5:19"},"nodeType":"YulFunctionCall","src":"4315:16:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4305:6:19"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4200:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4211:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4223:6:19","type":""}],"src":"4153:184:19"},{"body":{"nodeType":"YulBlock","src":"4529:251:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4546:9:19"},{"name":"value0","nodeType":"YulIdentifier","src":"4557:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4539:6:19"},"nodeType":"YulFunctionCall","src":"4539:25:19"},"nodeType":"YulExpressionStatement","src":"4539:25:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4584:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"4595:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4580:3:19"},"nodeType":"YulFunctionCall","src":"4580:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"4600:2:19","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4573:6:19"},"nodeType":"YulFunctionCall","src":"4573:30:19"},"nodeType":"YulExpressionStatement","src":"4573:30:19"},{"nodeType":"YulAssignment","src":"4612:70:19","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"4647:6:19"},{"name":"value2","nodeType":"YulIdentifier","src":"4655:6:19"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4667:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"4678:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4663:3:19"},"nodeType":"YulFunctionCall","src":"4663:18:19"}],"functionName":{"name":"abi_encode_string_calldata","nodeType":"YulIdentifier","src":"4620:26:19"},"nodeType":"YulFunctionCall","src":"4620:62:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4612:4:19"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4702:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"4713:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4698:3:19"},"nodeType":"YulFunctionCall","src":"4698:18:19"},{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"4722:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"4730:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4718:3:19"},"nodeType":"YulFunctionCall","src":"4718:55:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4691:6:19"},"nodeType":"YulFunctionCall","src":"4691:83:19"},"nodeType":"YulExpressionStatement","src":"4691:83:19"}]},"name":"abi_encode_tuple_t_uint256_t_string_calldata_ptr_t_address__to_t_uint256_t_string_memory_ptr_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4474:9:19","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4485:6:19","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4493:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4501:6:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4509:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4520:4:19","type":""}],"src":"4342:438:19"},{"body":{"nodeType":"YulBlock","src":"4944:159:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4961:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"4972:2:19","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4954:6:19"},"nodeType":"YulFunctionCall","src":"4954:21:19"},"nodeType":"YulExpressionStatement","src":"4954:21:19"},{"nodeType":"YulAssignment","src":"4984:70:19","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5019:6:19"},{"name":"value1","nodeType":"YulIdentifier","src":"5027:6:19"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5039:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"5050:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5035:3:19"},"nodeType":"YulFunctionCall","src":"5035:18:19"}],"functionName":{"name":"abi_encode_string_calldata","nodeType":"YulIdentifier","src":"4992:26:19"},"nodeType":"YulFunctionCall","src":"4992:62:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4984:4:19"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5074:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"5085:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5070:3:19"},"nodeType":"YulFunctionCall","src":"5070:18:19"},{"name":"value2","nodeType":"YulIdentifier","src":"5090:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5063:6:19"},"nodeType":"YulFunctionCall","src":"5063:34:19"},"nodeType":"YulExpressionStatement","src":"5063:34:19"}]},"name":"abi_encode_tuple_t_string_calldata_ptr_t_uint256__to_t_string_memory_ptr_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4897:9:19","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4908:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4916:6:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4924:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4935:4:19","type":""}],"src":"4785:318:19"},{"body":{"nodeType":"YulBlock","src":"5275:291:19","statements":[{"nodeType":"YulVariableDeclaration","src":"5285:27:19","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5305:6:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5299:5:19"},"nodeType":"YulFunctionCall","src":"5299:13:19"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5289:6:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5321:10:19","value":{"kind":"number","nodeType":"YulLiteral","src":"5330:1:19","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"5325:1:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"5392:77:19","statements":[{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5417:3:19"},{"name":"i","nodeType":"YulIdentifier","src":"5422:1:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5413:3:19"},"nodeType":"YulFunctionCall","src":"5413:11:19"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5440:6:19"},{"name":"i","nodeType":"YulIdentifier","src":"5448:1:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5436:3:19"},"nodeType":"YulFunctionCall","src":"5436:14:19"},{"kind":"number","nodeType":"YulLiteral","src":"5452:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5432:3:19"},"nodeType":"YulFunctionCall","src":"5432:25:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5426:5:19"},"nodeType":"YulFunctionCall","src":"5426:32:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5406:6:19"},"nodeType":"YulFunctionCall","src":"5406:53:19"},"nodeType":"YulExpressionStatement","src":"5406:53:19"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5351:1:19"},{"name":"length","nodeType":"YulIdentifier","src":"5354:6:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5348:2:19"},"nodeType":"YulFunctionCall","src":"5348:13:19"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5362:21:19","statements":[{"nodeType":"YulAssignment","src":"5364:17:19","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5373:1:19"},{"kind":"number","nodeType":"YulLiteral","src":"5376:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5369:3:19"},"nodeType":"YulFunctionCall","src":"5369:12:19"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"5364:1:19"}]}]},"pre":{"nodeType":"YulBlock","src":"5344:3:19","statements":[]},"src":"5340:129:19"},{"nodeType":"YulVariableDeclaration","src":"5478:26:19","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5492:3:19"},{"name":"length","nodeType":"YulIdentifier","src":"5497:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5488:3:19"},"nodeType":"YulFunctionCall","src":"5488:16:19"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5482:2:19","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"5520:2:19"},{"name":"value1","nodeType":"YulIdentifier","src":"5524:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5513:6:19"},"nodeType":"YulFunctionCall","src":"5513:18:19"},"nodeType":"YulExpressionStatement","src":"5513:18:19"},{"nodeType":"YulAssignment","src":"5540:20:19","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"5551:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"5555:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5547:3:19"},"nodeType":"YulFunctionCall","src":"5547:13:19"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5540:3:19"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_uint256__to_t_string_memory_ptr_t_uint256__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5243:3:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5248:6:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5256:6:19","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5267:3:19","type":""}],"src":"5108:458:19"},{"body":{"nodeType":"YulBlock","src":"5745:228:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5762:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"5773:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5755:6:19"},"nodeType":"YulFunctionCall","src":"5755:21:19"},"nodeType":"YulExpressionStatement","src":"5755:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5796:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"5807:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5792:3:19"},"nodeType":"YulFunctionCall","src":"5792:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"5812:2:19","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5785:6:19"},"nodeType":"YulFunctionCall","src":"5785:30:19"},"nodeType":"YulExpressionStatement","src":"5785:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5835:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"5846:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5831:3:19"},"nodeType":"YulFunctionCall","src":"5831:18:19"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"5851:34:19","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5824:6:19"},"nodeType":"YulFunctionCall","src":"5824:62:19"},"nodeType":"YulExpressionStatement","src":"5824:62:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5906:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"5917:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5902:3:19"},"nodeType":"YulFunctionCall","src":"5902:18:19"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"5922:8:19","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5895:6:19"},"nodeType":"YulFunctionCall","src":"5895:36:19"},"nodeType":"YulExpressionStatement","src":"5895:36:19"},{"nodeType":"YulAssignment","src":"5940:27:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5952:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"5963:3:19","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5948:3:19"},"nodeType":"YulFunctionCall","src":"5948:19:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5940:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5722:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5736:4:19","type":""}],"src":"5571:402:19"},{"body":{"nodeType":"YulBlock","src":"6152:182:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6169:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6180:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6162:6:19"},"nodeType":"YulFunctionCall","src":"6162:21:19"},"nodeType":"YulExpressionStatement","src":"6162:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6203:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6214:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6199:3:19"},"nodeType":"YulFunctionCall","src":"6199:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"6219:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6192:6:19"},"nodeType":"YulFunctionCall","src":"6192:30:19"},"nodeType":"YulExpressionStatement","src":"6192:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6242:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6253:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6238:3:19"},"nodeType":"YulFunctionCall","src":"6238:18:19"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"6258:34:19","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6231:6:19"},"nodeType":"YulFunctionCall","src":"6231:62:19"},"nodeType":"YulExpressionStatement","src":"6231:62:19"},{"nodeType":"YulAssignment","src":"6302:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6314:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6325:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6310:3:19"},"nodeType":"YulFunctionCall","src":"6310:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6302:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6129:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6143:4:19","type":""}],"src":"5978:356:19"},{"body":{"nodeType":"YulBlock","src":"6371:152:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6388:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6391:77:19","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6381:6:19"},"nodeType":"YulFunctionCall","src":"6381:88:19"},"nodeType":"YulExpressionStatement","src":"6381:88:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6485:1:19","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6488:4:19","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6478:6:19"},"nodeType":"YulFunctionCall","src":"6478:15:19"},"nodeType":"YulExpressionStatement","src":"6478:15:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6509:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6512:4:19","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6502:6:19"},"nodeType":"YulFunctionCall","src":"6502:15:19"},"nodeType":"YulExpressionStatement","src":"6502:15:19"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"6339:184:19"},{"body":{"nodeType":"YulBlock","src":"6702:174:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6719:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6730:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6712:6:19"},"nodeType":"YulFunctionCall","src":"6712:21:19"},"nodeType":"YulExpressionStatement","src":"6712:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6753:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6764:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6749:3:19"},"nodeType":"YulFunctionCall","src":"6749:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"6769:2:19","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6742:6:19"},"nodeType":"YulFunctionCall","src":"6742:30:19"},"nodeType":"YulExpressionStatement","src":"6742:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6792:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6803:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6788:3:19"},"nodeType":"YulFunctionCall","src":"6788:18:19"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","kind":"string","nodeType":"YulLiteral","src":"6808:26:19","type":"","value":"ECDSA: invalid signature"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6781:6:19"},"nodeType":"YulFunctionCall","src":"6781:54:19"},"nodeType":"YulExpressionStatement","src":"6781:54:19"},{"nodeType":"YulAssignment","src":"6844:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6856:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6867:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6852:3:19"},"nodeType":"YulFunctionCall","src":"6852:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6844:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6679:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6693:4:19","type":""}],"src":"6528:348:19"},{"body":{"nodeType":"YulBlock","src":"7055:181:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7072:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7083:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7065:6:19"},"nodeType":"YulFunctionCall","src":"7065:21:19"},"nodeType":"YulExpressionStatement","src":"7065:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7106:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7117:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7102:3:19"},"nodeType":"YulFunctionCall","src":"7102:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"7122:2:19","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7095:6:19"},"nodeType":"YulFunctionCall","src":"7095:30:19"},"nodeType":"YulExpressionStatement","src":"7095:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7145:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7156:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7141:3:19"},"nodeType":"YulFunctionCall","src":"7141:18:19"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","kind":"string","nodeType":"YulLiteral","src":"7161:33:19","type":"","value":"ECDSA: invalid signature length"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7134:6:19"},"nodeType":"YulFunctionCall","src":"7134:61:19"},"nodeType":"YulExpressionStatement","src":"7134:61:19"},{"nodeType":"YulAssignment","src":"7204:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7216:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7227:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7212:3:19"},"nodeType":"YulFunctionCall","src":"7212:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7204:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7032:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7046:4:19","type":""}],"src":"6881:355:19"},{"body":{"nodeType":"YulBlock","src":"7415:224:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7432:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7443:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7425:6:19"},"nodeType":"YulFunctionCall","src":"7425:21:19"},"nodeType":"YulExpressionStatement","src":"7425:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7466:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7477:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7462:3:19"},"nodeType":"YulFunctionCall","src":"7462:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"7482:2:19","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7455:6:19"},"nodeType":"YulFunctionCall","src":"7455:30:19"},"nodeType":"YulExpressionStatement","src":"7455:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7505:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7516:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7501:3:19"},"nodeType":"YulFunctionCall","src":"7501:18:19"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c","kind":"string","nodeType":"YulLiteral","src":"7521:34:19","type":"","value":"ECDSA: invalid signature 's' val"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7494:6:19"},"nodeType":"YulFunctionCall","src":"7494:62:19"},"nodeType":"YulExpressionStatement","src":"7494:62:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7576:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7587:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7572:3:19"},"nodeType":"YulFunctionCall","src":"7572:18:19"},{"hexValue":"7565","kind":"string","nodeType":"YulLiteral","src":"7592:4:19","type":"","value":"ue"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7565:6:19"},"nodeType":"YulFunctionCall","src":"7565:32:19"},"nodeType":"YulExpressionStatement","src":"7565:32:19"},{"nodeType":"YulAssignment","src":"7606:27:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7618:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7629:3:19","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7614:3:19"},"nodeType":"YulFunctionCall","src":"7614:19:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7606:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7392:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7406:4:19","type":""}],"src":"7241:398:19"},{"body":{"nodeType":"YulBlock","src":"7825:217:19","statements":[{"nodeType":"YulAssignment","src":"7835:27:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7847:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7858:3:19","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7843:3:19"},"nodeType":"YulFunctionCall","src":"7843:19:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7835:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7878:9:19"},{"name":"value0","nodeType":"YulIdentifier","src":"7889:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7871:6:19"},"nodeType":"YulFunctionCall","src":"7871:25:19"},"nodeType":"YulExpressionStatement","src":"7871:25:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7916:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7927:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7912:3:19"},"nodeType":"YulFunctionCall","src":"7912:18:19"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7936:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"7944:4:19","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7932:3:19"},"nodeType":"YulFunctionCall","src":"7932:17:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7905:6:19"},"nodeType":"YulFunctionCall","src":"7905:45:19"},"nodeType":"YulExpressionStatement","src":"7905:45:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7970:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7981:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7966:3:19"},"nodeType":"YulFunctionCall","src":"7966:18:19"},{"name":"value2","nodeType":"YulIdentifier","src":"7986:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7959:6:19"},"nodeType":"YulFunctionCall","src":"7959:34:19"},"nodeType":"YulExpressionStatement","src":"7959:34:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8013:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"8024:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8009:3:19"},"nodeType":"YulFunctionCall","src":"8009:18:19"},{"name":"value3","nodeType":"YulIdentifier","src":"8029:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8002:6:19"},"nodeType":"YulFunctionCall","src":"8002:34:19"},"nodeType":"YulExpressionStatement","src":"8002:34:19"}]},"name":"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7770:9:19","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7781:6:19","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7789:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7797:6:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7805:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7816:4:19","type":""}],"src":"7644:398:19"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_string_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_string_calldata_ptrt_bytes_calldata_ptrt_address(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_string_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_string_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        value4 := abi_decode_address(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 0x20), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), add(_2, 0x20), _3)\n        mstore(add(add(memPtr, _3), 0x20), 0)\n        value0 := memPtr\n        value1 := calldataload(add(headStart, 0x20))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_stringliteral_4f2d7dfcb27c0aafa13ae8c400de482c7832204d194018b6e45bd2bf244c74e7__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Invalid signature\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_string_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        calldatacopy(add(pos, 0x20), start, length)\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 0x20)\n    }\n    function abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string_calldata(value0, value1, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_uint256_t_string_calldata_ptr_t_address__to_t_uint256_t_string_memory_ptr_t_address__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), 96)\n        tail := abi_encode_string_calldata(value1, value2, add(headStart, 96))\n        mstore(add(headStart, 64), and(value3, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_string_calldata_ptr_t_uint256__to_t_string_memory_ptr_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        tail := abi_encode_string_calldata(value0, value1, add(headStart, 64))\n        mstore(add(headStart, 32), value2)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_uint256__to_t_string_memory_ptr_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            mstore(add(pos, i), mload(add(add(value0, i), 0x20)))\n        }\n        let _1 := add(pos, length)\n        mstore(_1, value1)\n        end := add(_1, 0x20)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature length\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature 's' val\")\n        mstore(add(headStart, 96), \"ue\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n}","id":19,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"60806040526004361061007b5760003560e01c80638da5cb5b1161004e5780638da5cb5b14610116578063a7ecd37e14610141578063d4aa691614610161578063f2fde38b1461018f57600080fd5b8063238ac933146100805780633ccfd60b146100d757806359d7eb8d146100ee578063715018a614610101575b600080fd5b34801561008c57600080fd5b506002546100ad9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b3480156100e357600080fd5b506100ec6101af565b005b6100ec6100fc366004610aa0565b6101e6565b34801561010d57600080fd5b506100ec61048f565b34801561012257600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff166100ad565b34801561014d57600080fd5b506100ec61015c366004610b21565b6104a3565b34801561016d57600080fd5b5061018161017c366004610b72565b61051a565b6040519081526020016100ce565b34801561019b57600080fd5b506100ec6101aa366004610b21565b61054d565b6101b7610601565b60405133904780156108fc02916000818181858888f193505050501580156101e3573d6000803e3d6000fd5b50565b6000349050600061022e87878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525086925061051a915050565b9050600061027d86868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061027792508691506106829050565b906106b5565b60025490915073ffffffffffffffffffffffffffffffffffffffff808316911614610309576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e76616c6964207369676e617475726500000000000000000000000000000060448201526064015b60405180910390fd5b6001546040517f1e7663bc00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff1690631e7663bc90610362908c908c90600401610c8e565b602060405180830381865afa15801561037f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a39190610caa565b6001546040517f601219b700000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff169063601219b7906104009084908d908d908b90600401610cc3565b600060405180830381600087803b15801561041a57600080fd5b505af115801561042e573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff167f8a168ef997ae6a1723ef504e6a0205acfe336ccb522561e95accebadde414b878a8a8760405161047c93929190610d04565b60405180910390a2505050505050505050565b610497610601565b6104a160006106d9565b565b6104ab610601565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f5553331329228fbd4123164423717a4a7539f6dfa1c3279a923b98fd681a6c7390600090a250565b6000828260405160200161052f929190610d28565b60405160208183030381529060405280519060200120905092915050565b610555610601565b73ffffffffffffffffffffffffffffffffffffffff81166105f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610300565b6101e3816106d9565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610300565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b60008060006106c4858561074e565b915091506106d181610793565b509392505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008082516041036107845760208301516040840151606085015160001a61077887828585610946565b9450945050505061078c565b506000905060025b9250929050565b60008160048111156107a7576107a7610d5a565b036107af5750565b60018160048111156107c3576107c3610d5a565b0361082a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610300565b600281600481111561083e5761083e610d5a565b036108a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610300565b60038160048111156108b9576108b9610d5a565b036101e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610300565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561097d5750600090506003610a2c565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156109d1573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116610a2557600060019250925050610a2c565b9150600090505b94509492505050565b60008083601f840112610a4757600080fd5b50813567ffffffffffffffff811115610a5f57600080fd5b60208301915083602082850101111561078c57600080fd5b803573ffffffffffffffffffffffffffffffffffffffff81168114610a9b57600080fd5b919050565b600080600080600060608688031215610ab857600080fd5b853567ffffffffffffffff80821115610ad057600080fd5b610adc89838a01610a35565b90975095506020880135915080821115610af557600080fd5b50610b0288828901610a35565b9094509250610b15905060408701610a77565b90509295509295909350565b600060208284031215610b3357600080fd5b610b3c82610a77565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008060408385031215610b8557600080fd5b823567ffffffffffffffff80821115610b9d57600080fd5b818501915085601f830112610bb157600080fd5b813581811115610bc357610bc3610b43565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715610c0957610c09610b43565b81604052828152886020848701011115610c2257600080fd5b826020860160208301376000602093820184015298969091013596505050505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b602081526000610ca2602083018486610c45565b949350505050565b600060208284031215610cbc57600080fd5b5051919050565b848152606060208201526000610cdd606083018587610c45565b905073ffffffffffffffffffffffffffffffffffffffff8316604083015295945050505050565b604081526000610d18604083018587610c45565b9050826020830152949350505050565b6000835160005b81811015610d495760208187018101518583015201610d2f565b509190910191825250602001919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea26469706673582212208e285c7bbc171b151fb7e99f70210b10a4f53c307e00d13ea3cfc442e6f1ee8764736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x4E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x116 JUMPI DUP1 PUSH4 0xA7ECD37E EQ PUSH2 0x141 JUMPI DUP1 PUSH4 0xD4AA6916 EQ PUSH2 0x161 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x18F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x238AC933 EQ PUSH2 0x80 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0xD7 JUMPI DUP1 PUSH4 0x59D7EB8D EQ PUSH2 0xEE JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x101 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH2 0xAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC PUSH2 0x1AF JUMP JUMPDEST STOP JUMPDEST PUSH2 0xEC PUSH2 0xFC CALLDATASIZE PUSH1 0x4 PUSH2 0xAA0 JUMP JUMPDEST PUSH2 0x1E6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC PUSH2 0x48F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x122 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xAD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC PUSH2 0x15C CALLDATASIZE PUSH1 0x4 PUSH2 0xB21 JUMP JUMPDEST PUSH2 0x4A3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH2 0x17C CALLDATASIZE PUSH1 0x4 PUSH2 0xB72 JUMP JUMPDEST PUSH2 0x51A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xCE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x19B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC PUSH2 0x1AA CALLDATASIZE PUSH1 0x4 PUSH2 0xB21 JUMP JUMPDEST PUSH2 0x54D JUMP JUMPDEST PUSH2 0x1B7 PUSH2 0x601 JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1E3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLVALUE SWAP1 POP PUSH1 0x0 PUSH2 0x22E DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP7 SWAP3 POP PUSH2 0x51A SWAP2 POP POP JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x27D DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x277 SWAP3 POP DUP7 SWAP2 POP PUSH2 0x682 SWAP1 POP JUMP JUMPDEST SWAP1 PUSH2 0x6B5 JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND SWAP2 AND EQ PUSH2 0x309 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C6964207369676E6174757265000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x1E7663BC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x1E7663BC SWAP1 PUSH2 0x362 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0xC8E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x37F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3A3 SWAP2 SWAP1 PUSH2 0xCAA JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x601219B700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x601219B7 SWAP1 PUSH2 0x400 SWAP1 DUP5 SWAP1 DUP14 SWAP1 DUP14 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xCC3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x41A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x42E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8A168EF997AE6A1723EF504E6A0205ACFE336CCB522561E95ACCEBADDE414B87 DUP11 DUP11 DUP8 PUSH1 0x40 MLOAD PUSH2 0x47C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xD04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x497 PUSH2 0x601 JUMP JUMPDEST PUSH2 0x4A1 PUSH1 0x0 PUSH2 0x6D9 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x4AB PUSH2 0x601 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0x5553331329228FBD4123164423717A4A7539F6DFA1C3279A923B98FD681A6C73 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x52F SWAP3 SWAP2 SWAP1 PUSH2 0xD28 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x555 PUSH2 0x601 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x5F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x300 JUMP JUMPDEST PUSH2 0x1E3 DUP2 PUSH2 0x6D9 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x4A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x300 JUMP JUMPDEST PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1C SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3C SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x6C4 DUP6 DUP6 PUSH2 0x74E JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x6D1 DUP2 PUSH2 0x793 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x41 SUB PUSH2 0x784 JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x0 BYTE PUSH2 0x778 DUP8 DUP3 DUP6 DUP6 PUSH2 0x946 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP PUSH2 0x78C JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH1 0x2 JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x7A7 JUMPI PUSH2 0x7A7 PUSH2 0xD5A JUMP JUMPDEST SUB PUSH2 0x7AF JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x7C3 JUMPI PUSH2 0x7C3 PUSH2 0xD5A JUMP JUMPDEST SUB PUSH2 0x82A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x300 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x83E JUMPI PUSH2 0x83E PUSH2 0xD5A JUMP JUMPDEST SUB PUSH2 0x8A5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x300 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x8B9 JUMPI PUSH2 0x8B9 PUSH2 0xD5A JUMP JUMPDEST SUB PUSH2 0x1E3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x300 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x97D JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0xA2C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9D1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD MLOAD SWAP2 POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xA25 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0xA2C JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xA47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x78C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xA9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xAB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xAD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xADC DUP10 DUP4 DUP11 ADD PUSH2 0xA35 JUMP JUMPDEST SWAP1 SWAP8 POP SWAP6 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xAF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB02 DUP9 DUP3 DUP10 ADD PUSH2 0xA35 JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP PUSH2 0xB15 SWAP1 POP PUSH1 0x40 DUP8 ADD PUSH2 0xA77 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB3C DUP3 PUSH2 0xA77 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xB9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xBB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xBC3 JUMPI PUSH2 0xBC3 PUSH2 0xB43 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xC09 JUMPI PUSH2 0xC09 PUSH2 0xB43 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0xC22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 SWAP4 DUP3 ADD DUP5 ADD MSTORE SWAP9 SWAP7 SWAP1 SWAP2 ADD CALLDATALOAD SWAP7 POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x0 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND DUP5 ADD ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xCA2 PUSH1 0x20 DUP4 ADD DUP5 DUP7 PUSH2 0xC45 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP5 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0xCDD PUSH1 0x60 DUP4 ADD DUP6 DUP8 PUSH2 0xC45 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0xD18 PUSH1 0x40 DUP4 ADD DUP6 DUP8 PUSH2 0xC45 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xD49 JUMPI PUSH1 0x20 DUP2 DUP8 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0xD2F JUMP JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD SWAP2 DUP3 MSTORE POP PUSH1 0x20 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP15 0x28 0x5C PUSH28 0xBC171B151FB7E99F70210B10A4F53C307E00D13EA3CFC442E6F1EE87 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"204:1375:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;297:21;;;;;;;;;;-1:-1:-1;297:21:16;;;;;;;;;;;190:42:19;178:55;;;160:74;;148:2;133:18;297:21:16;;;;;;;;1332:105;;;;;;;;;;;;;:::i;:::-;;598:561;;;;;;:::i;:::-;;:::i;1824:101:0:-;;;;;;;;;;;;;:::i;1201:85::-;;;;;;;;;;-1:-1:-1;1247:7:0;1273:6;;;1201:85;;1443:134:16;;;;;;;;;;-1:-1:-1;1443:134:16;;;;;:::i;:::-;;:::i;1165:161::-;;;;;;;;;;-1:-1:-1;1165:161:16;;;;;:::i;:::-;;:::i;:::-;;;3188:25:19;;;3176:2;3161:18;1165:161:16;3042:177:19;2074:198:0;;;;;;;;;;-1:-1:-1;2074:198:0;;;;;:::i;:::-;;:::i;1332:105:16:-;1094:13:0;:11;:13::i;:::-;1379:51:16::1;::::0;1387:10:::1;::::0;1408:21:::1;1379:51:::0;::::1;;;::::0;::::1;::::0;;;1408:21;1387:10;1379:51;::::1;;;;;;;;;;;;;::::0;::::1;;;;;;1332:105::o:0;598:561::-;746:13;762:9;746:25;;782:19;804:31;819:8;;804:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;829:5:16;;-1:-1:-1;804:14:16;;-1:-1:-1;;804:31:16:i;:::-;782:53;;845:23;871:55;916:9;;871:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;871:36:16;;-1:-1:-1;871:11:16;;-1:-1:-1;871:34:16;;-1:-1:-1;871:36:16:i;:::-;:44;;:55::i;:::-;964:6;;845:81;;-1:-1:-1;964:6:16;945:25;;;964:6;;945:25;937:55;;;;;;;3426:2:19;937:55:16;;;3408:21:19;3465:2;3445:18;;;3438:30;3504:19;3484:18;;;3477:47;3541:18;;937:55:16;;;;;;;;;1021:5;;:26;;;;;1003:15;;1021:5;;;:16;;:26;;1038:8;;;;1021:26;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1058:5;;:40;;;;;1003:44;;-1:-1:-1;1058:5:16;;;:14;;:40;;1003:44;;1082:8;;;;1092:5;;1058:40;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1139:5;1114:38;;;1129:8;;1146:5;1114:38;;;;;;;;:::i;:::-;;;;;;;;736:423;;;;598:561;;;;;:::o;1824:101:0:-;1094:13;:11;:13::i;:::-;1888:30:::1;1915:1;1888:18;:30::i;:::-;1824:101::o:0;1443:134:16:-;1094:13:0;:11;:13::i;:::-;1513:6:16::1;:18:::0;;;::::1;;::::0;::::1;::::0;;::::1;::::0;;;1546:24:::1;::::0;::::1;::::0;-1:-1:-1;;1546:24:16::1;1443:134:::0;:::o;1165:161::-;1249:7;1302:8;1312:5;1285:33;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1275:44;;;;;;1268:51;;1165:161;;;;:::o;2074:198:0:-;1094:13;:11;:13::i;:::-;2162:22:::1;::::0;::::1;2154:73;;;::::0;::::1;::::0;;5773:2:19;2154:73:0::1;::::0;::::1;5755:21:19::0;5812:2;5792:18;;;5785:30;5851:34;5831:18;;;5824:62;5922:8;5902:18;;;5895:36;5948:19;;2154:73:0::1;5571:402:19::0;2154:73:0::1;2237:28;2256:8;2237:18;:28::i;1359:130::-:0;1247:7;1273:6;1422:23;1273:6;719:10:8;1422:23:0;1414:68;;;;;;;6180:2:19;1414:68:0;;;6162:21:19;;;6199:18;;;6192:30;6258:34;6238:18;;;6231:62;6310:18;;1414:68:0;5978:356:19;7120:396:10;7389:34;7189:15;7376:48;;;7444:4;7437:18;;;;7495:4;7479:21;;;7120:396::o;3661:227::-;3739:7;3759:17;3778:18;3800:27;3811:4;3817:9;3800:10;:27::i;:::-;3758:69;;;;3837:18;3849:5;3837:11;:18::i;:::-;-1:-1:-1;3872:9:10;3661:227;-1:-1:-1;;;3661:227:10:o;2426:187:0:-;2499:16;2518:6;;;2534:17;;;;;;;;;;2566:40;;2518:6;;;;;;;2566:40;;2499:16;2566:40;2489:124;2426:187;:::o;2145:730:10:-;2226:7;2235:12;2263:9;:16;2283:2;2263:22;2259:610;;2599:4;2584:20;;2578:27;2648:4;2633:20;;2627:27;2705:4;2690:20;;2684:27;2301:9;2676:36;2746:25;2757:4;2676:36;2578:27;2627;2746:10;:25::i;:::-;2739:32;;;;;;;;;2259:610;-1:-1:-1;2818:1:10;;-1:-1:-1;2822:35:10;2259:610;2145:730;;;;;:::o;570:511::-;647:20;638:5;:29;;;;;;;;:::i;:::-;;634:441;;570:511;:::o;634:441::-;743:29;734:5;:38;;;;;;;;:::i;:::-;;730:345;;788:34;;;;;6730:2:19;788:34:10;;;6712:21:19;6769:2;6749:18;;;6742:30;6808:26;6788:18;;;6781:54;6852:18;;788:34:10;6528:348:19;730:345:10;852:35;843:5;:44;;;;;;;;:::i;:::-;;839:236;;903:41;;;;;7083:2:19;903:41:10;;;7065:21:19;7122:2;7102:18;;;7095:30;7161:33;7141:18;;;7134:61;7212:18;;903:41:10;6881:355:19;839:236:10;974:30;965:5;:39;;;;;;;;:::i;:::-;;961:114;;1020:44;;;;;7443:2:19;1020:44:10;;;7425:21:19;7482:2;7462:18;;;7455:30;7521:34;7501:18;;;7494:62;7592:4;7572:18;;;7565:32;7614:19;;1020:44:10;7241:398:19;5009:1456:10;5097:7;;6021:66;6008:79;;6004:161;;;-1:-1:-1;6119:1:10;;-1:-1:-1;6123:30:10;6103:51;;6004:161;6276:24;;;6259:14;6276:24;;;;;;;;;7871:25:19;;;7944:4;7932:17;;7912:18;;;7905:45;;;;7966:18;;;7959:34;;;8009:18;;;8002:34;;;6276:24:10;;7843:19:19;;6276:24:10;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6276:24:10;;;;;;-1:-1:-1;;6314:20:10;;;6310:101;;6366:1;6370:29;6350:50;;;;;;;6310:101;6429:6;-1:-1:-1;6437:20:10;;-1:-1:-1;5009:1456:10;;;;;;;;:::o;245:348:19:-;297:8;307:6;361:3;354:4;346:6;342:17;338:27;328:55;;379:1;376;369:12;328:55;-1:-1:-1;402:20:19;;445:18;434:30;;431:50;;;477:1;474;467:12;431:50;514:4;506:6;502:17;490:29;;566:3;559:4;550:6;542;538:19;534:30;531:39;528:59;;;583:1;580;573:12;598:196;666:20;;726:42;715:54;;705:65;;695:93;;784:1;781;774:12;695:93;598:196;;;:::o;799:794::-;899:6;907;915;923;931;984:2;972:9;963:7;959:23;955:32;952:52;;;1000:1;997;990:12;952:52;1040:9;1027:23;1069:18;1110:2;1102:6;1099:14;1096:34;;;1126:1;1123;1116:12;1096:34;1165:59;1216:7;1207:6;1196:9;1192:22;1165:59;:::i;:::-;1243:8;;-1:-1:-1;1139:85:19;-1:-1:-1;1331:2:19;1316:18;;1303:32;;-1:-1:-1;1347:16:19;;;1344:36;;;1376:1;1373;1366:12;1344:36;;1415:61;1468:7;1457:8;1446:9;1442:24;1415:61;:::i;:::-;1495:8;;-1:-1:-1;1389:87:19;-1:-1:-1;1549:38:19;;-1:-1:-1;1583:2:19;1568:18;;1549:38;:::i;:::-;1539:48;;799:794;;;;;;;;:::o;1598:186::-;1657:6;1710:2;1698:9;1689:7;1685:23;1681:32;1678:52;;;1726:1;1723;1716:12;1678:52;1749:29;1768:9;1749:29;:::i;:::-;1739:39;1598:186;-1:-1:-1;;;1598:186:19:o;1789:184::-;1841:77;1838:1;1831:88;1938:4;1935:1;1928:15;1962:4;1959:1;1952:15;1978:1059;2056:6;2064;2117:2;2105:9;2096:7;2092:23;2088:32;2085:52;;;2133:1;2130;2123:12;2085:52;2173:9;2160:23;2202:18;2243:2;2235:6;2232:14;2229:34;;;2259:1;2256;2249:12;2229:34;2297:6;2286:9;2282:22;2272:32;;2342:7;2335:4;2331:2;2327:13;2323:27;2313:55;;2364:1;2361;2354:12;2313:55;2400:2;2387:16;2422:2;2418;2415:10;2412:36;;;2428:18;;:::i;:::-;2562:2;2556:9;2624:4;2616:13;;2467:66;2612:22;;;2636:2;2608:31;2604:40;2592:53;;;2660:18;;;2680:22;;;2657:46;2654:72;;;2706:18;;:::i;:::-;2746:10;2742:2;2735:22;2781:2;2773:6;2766:18;2823:7;2816:4;2811:2;2807;2803:11;2799:22;2796:35;2793:55;;;2844:1;2841;2834:12;2793:55;2904:2;2897:4;2893:2;2889:13;2882:4;2874:6;2870:17;2857:50;2951:1;2944:4;2927:15;;;2923:26;;2916:37;2927:15;3010:20;;;;2997:34;;-1:-1:-1;;;;;;1978:1059:19:o;3570:326::-;3659:6;3654:3;3647:19;3711:6;3704:5;3697:4;3692:3;3688:14;3675:43;;3763:1;3756:4;3747:6;3742:3;3738:16;3734:27;3727:38;3629:3;3885:4;3815:66;3810:2;3802:6;3798:15;3794:88;3789:3;3785:98;3781:109;3774:116;;3570:326;;;;:::o;3901:247::-;4060:2;4049:9;4042:21;4023:4;4080:62;4138:2;4127:9;4123:18;4115:6;4107;4080:62;:::i;:::-;4072:70;3901:247;-1:-1:-1;;;;3901:247:19:o;4153:184::-;4223:6;4276:2;4264:9;4255:7;4251:23;4247:32;4244:52;;;4292:1;4289;4282:12;4244:52;-1:-1:-1;4315:16:19;;4153:184;-1:-1:-1;4153:184:19:o;4342:438::-;4557:6;4546:9;4539:25;4600:2;4595;4584:9;4580:18;4573:30;4520:4;4620:62;4678:2;4667:9;4663:18;4655:6;4647;4620:62;:::i;:::-;4612:70;;4730:42;4722:6;4718:55;4713:2;4702:9;4698:18;4691:83;4342:438;;;;;;;:::o;4785:318::-;4972:2;4961:9;4954:21;4935:4;4992:62;5050:2;5039:9;5035:18;5027:6;5019;4992:62;:::i;:::-;4984:70;;5090:6;5085:2;5074:9;5070:18;5063:34;4785:318;;;;;;:::o;5108:458::-;5267:3;5305:6;5299:13;5330:1;5340:129;5354:6;5351:1;5348:13;5340:129;;;5452:4;5436:14;;;5432:25;;5426:32;5413:11;;;5406:53;5369:12;5340:129;;;-1:-1:-1;5488:16:19;;;;5513:18;;;-1:-1:-1;5555:4:19;5547:13;;5108:458;-1:-1:-1;5108:458:19:o;6339:184::-;6391:77;6388:1;6381:88;6488:4;6485:1;6478:15;6512:4;6509:1;6502:15"},"gasEstimates":{"creation":{"codeDepositCost":"703800","executionCost":"infinite","totalCost":"infinite"},"external":{"getMessageHash(string,uint256)":"infinite","owner()":"2296","register(string,bytes,address)":"infinite","renounceOwnership()":"infinite","signer()":"2303","transferOwnership(address)":"28336","updateSigner(address)":"27845","withdraw()":"infinite"}},"methodIdentifiers":{"getMessageHash(string,uint256)":"d4aa6916","owner()":"8da5cb5b","register(string,bytes,address)":"59d7eb8d","renounceOwnership()":"715018a6","signer()":"238ac933","transferOwnership(address)":"f2fde38b","updateSigner(address)":"a7ecd37e","withdraw()":"3ccfd60b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract GitID\",\"name\":\"_gitID\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"NameRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"SignerUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"getMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"updateSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/gitid/Minter.sol\":\"Minter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/gitid/IGitIDMinter.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface IGitIDMinter {\\n    function register(\\n        string calldata username,\\n        bytes calldata signature,\\n        address\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x2134c39f299f65597e9fcc4206e93e3557e89a3febcd0418fa377d919b29bb59\"},\"contracts/gitid/Minter.sol\":{\"content\":\"\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport { IGitIDMinter } from \\\"./IGitIDMinter.sol\\\";\\nimport {GitID} from \\\"./gitid.sol\\\";\\n\\ncontract Minter is Ownable, IGitIDMinter {\\n    using ECDSA for bytes32;\\n    GitID gitID;\\n    address public signer;\\n\\n    event SignerUpdated(address indexed newSigner);\\n\\n    event NameRegistered(\\n        string name,\\n        address indexed owner,\\n        uint256 cost\\n    );\\n\\n    constructor(GitID _gitID, address _signer) public {\\n        gitID = _gitID;\\n        signer = _signer;\\n    }\\n\\n    function register(\\n        string calldata username,\\n        bytes calldata signature,\\n        address owner\\n    ) public payable override{\\n        uint256 price = msg.value;\\n\\n        bytes32 messageHash = getMessageHash(username, price);\\n        address recoveredSigner = messageHash.toEthSignedMessageHash().recover(signature);\\n\\n        require(recoveredSigner == signer, \\\"Invalid signature\\\");\\n\\n        uint256 tokenId = gitID.getTokenId(username);\\n\\n        gitID.register(tokenId, username, owner);\\n\\n        emit NameRegistered(username, owner, price);\\n    }\\n\\n    function getMessageHash(string memory username, uint256 price) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(username, price));\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    function updateSigner(address newSigner) external onlyOwner {\\n        signer = newSigner;\\n        emit SignerUpdated(newSigner);\\n    }\\n}\\n\",\"keccak256\":\"0x8fdc53bfe087f66bb5412c26821439824e39ce85995bfdc7d6bbe92e1191066e\"},\"contracts/gitid/gitid.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n\\ncontract GitID is Ownable, ERC721, ERC721Enumerable  {\\n\\n    // basename '.gitid'\\n    string public baseName;\\n    string public baseURI;\\n\\n    // A map of tokenId to name\\n    mapping(uint256=>string) public names;\\n\\n    // A map of addresses that are authorised to register and renew names.\\n    mapping(address=>bool) public minters;\\n\\n\\n    event MinterAdded(address indexed minter);\\n    event MinterRemoved(address indexed minter);\\n    event NameRegistered(uint256 indexed id, address indexed owner);\\n\\n\\n    constructor(string memory _name, string memory _symbol, string memory _baseName) ERC721(_name, _symbol) {\\n        baseName = _baseName;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC721Enumerable) returns (bool) {\\n        bool result = super.supportsInterface(interfaceId);\\n        if (result) {\\n            return true;\\n        }\\n        if (interfaceId == type(IERC721Enumerable).interfaceId) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    modifier onlyMinter {\\n        require(minters[msg.sender]);\\n        _;\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId, uint256 batchSize) internal override(ERC721, ERC721Enumerable) {\\n        require(balanceOf(to) == 0);\\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\\n    }\\n\\n    function addMinter(address minter) external onlyOwner {\\n        minters[minter] = true;\\n        emit MinterAdded(minter);\\n    }\\n\\n    // Revoke minter permission for an address.\\n    function removeMinter(address minter) external onlyOwner {\\n        minters[minter] = false;\\n        emit MinterRemoved(minter);\\n    }\\n\\n\\n    /**\\n     * @dev Register a name.\\n     * @param id The token ID (keccak256 of the label).\\n     * @param owner The address that should own the registration.\\n     */\\n    function register(uint256 id, string memory name, address owner) external onlyMinter {\\n        return _register(id, name, owner);\\n    }\\n\\n\\n    function _register(uint256 id, string memory name, address owner) internal {\\n        require(!_exists(id), 'Already registered');\\n\\n        _mint(owner, id);\\n        names[id] = name;\\n\\n        emit NameRegistered(id, owner);\\n    }\\n\\n    function getTokenId(string memory username) public pure returns (uint256) {\\n        bytes32 label = keccak256(bytes(username));\\n        uint256 tokenId = uint256(label);\\n        return tokenId;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        _requireMinted(tokenId);\\n        string memory name = getName(tokenId);\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, name)) : \\\"\\\";\\n    }\\n\\n    function setBaseURI(string calldata uri) public onlyOwner {\\n        baseURI = uri;\\n    }\\n\\n    function getName(uint256 tokenId) public view returns(string memory) {\\n        string memory name = names[tokenId];\\n        return name;\\n    }\\n}\\n\",\"keccak256\":\"0x63e00a8c0d65be5888f1ed5ac15f45a7ef7a6868cf989bff3951f2d3de59593f\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"contracts/gitid/Minter.sol:Minter","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":3568,"contract":"contracts/gitid/Minter.sol:Minter","label":"gitID","offset":0,"slot":"1","type":"t_contract(GitID)4113"},{"astId":3570,"contract":"contracts/gitid/Minter.sol:Minter","label":"signer","offset":0,"slot":"2","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_contract(GitID)4113":{"encoding":"inplace","label":"contract GitID","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/gitid/UniversalResolver.sol":{"UniversalResolver":{"abi":[{"inputs":[{"internalType":"contract GitID","name":"_gitID","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"string","name":"username","type":"string"}],"name":"_resolveSingle","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"getGitHubUserName","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"username","type":"string"}],"name":"resolve","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_3730":{"entryPoint":null,"id":3730,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_contract$_GitID_$4113_fromMemory":{"entryPoint":84,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:320:19","statements":[{"nodeType":"YulBlock","src":"6:3:19","statements":[]},{"body":{"nodeType":"YulBlock","src":"109:209:19","statements":[{"body":{"nodeType":"YulBlock","src":"155:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"164:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"167:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"157:6:19"},"nodeType":"YulFunctionCall","src":"157:12:19"},"nodeType":"YulExpressionStatement","src":"157:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"130:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"139:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"126:3:19"},"nodeType":"YulFunctionCall","src":"126:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"151:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"122:3:19"},"nodeType":"YulFunctionCall","src":"122:32:19"},"nodeType":"YulIf","src":"119:52:19"},{"nodeType":"YulVariableDeclaration","src":"180:29:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"199:9:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"193:5:19"},"nodeType":"YulFunctionCall","src":"193:16:19"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"184:5:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"272:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"281:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"284:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"274:6:19"},"nodeType":"YulFunctionCall","src":"274:12:19"},"nodeType":"YulExpressionStatement","src":"274:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"231:5:19"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"242:5:19"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"257:3:19","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"262:1:19","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"253:3:19"},"nodeType":"YulFunctionCall","src":"253:11:19"},{"kind":"number","nodeType":"YulLiteral","src":"266:1:19","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"249:3:19"},"nodeType":"YulFunctionCall","src":"249:19:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"238:3:19"},"nodeType":"YulFunctionCall","src":"238:31:19"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"228:2:19"},"nodeType":"YulFunctionCall","src":"228:42:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"221:6:19"},"nodeType":"YulFunctionCall","src":"221:50:19"},"nodeType":"YulIf","src":"218:70:19"},{"nodeType":"YulAssignment","src":"297:15:19","value":{"name":"value","nodeType":"YulIdentifier","src":"307:5:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"297:6:19"}]}]},"name":"abi_decode_tuple_t_contract$_GitID_$4113_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"75:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"86:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"98:6:19","type":""}],"src":"14:304:19"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_contract$_GitID_$4113_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n}","id":19,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b506040516107c73803806107c783398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610734806100936000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630112f82214610046578063461a447814610083578063c88cae0c14610096575b600080fd5b610059610054366004610458565b6100b6565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b610059610091366004610458565b6101ec565b6100a96100a43660046104ef565b6101ff565b60405161007a9190610530565b600080546040517f1e7663bc000000000000000000000000000000000000000000000000000000008152829173ffffffffffffffffffffffffffffffffffffffff1690631e7663bc9061010f9087908790600401610581565b602060405180830381865afa15801561012c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015091906105ce565b6000546040517f6352211e0000000000000000000000000000000000000000000000000000000081526004810183905291925073ffffffffffffffffffffffffffffffffffffffff1690636352211e90602401602060405180830381865afa1580156101c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e491906105e7565b949350505050565b60006101f883836100b6565b9392505050565b600080546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526060939216906370a0823190602401602060405180830381865afa158015610272573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029691906105ce565b905060008111610306576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f55534552204e4f20474954494400000000000000000000000000000000000000604482015260640160405180910390fd5b600080546040517f2f745c5900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301526024820184905290911690632f745c5990604401602060405180830381865afa15801561037e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a291906105ce565b6000546040517f6b8ff5740000000000000000000000000000000000000000000000000000000081526004810183905291925073ffffffffffffffffffffffffffffffffffffffff1690636b8ff57490602401600060405180830381865afa158015610412573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526101e49190810190610633565b6000806020838503121561046b57600080fd5b823567ffffffffffffffff8082111561048357600080fd5b818501915085601f83011261049757600080fd5b8135818111156104a657600080fd5b8660208285010111156104b857600080fd5b60209290920196919550909350505050565b73ffffffffffffffffffffffffffffffffffffffff811681146104ec57600080fd5b50565b60006020828403121561050157600080fd5b81356101f8816104ca565b60005b8381101561052757818101518382015260200161050f565b50506000910152565b602081526000825180602084015261054f81604085016020870161050c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b6000602082840312156105e057600080fd5b5051919050565b6000602082840312156105f957600080fd5b81516101f8816104ca565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561064557600080fd5b815167ffffffffffffffff8082111561065d57600080fd5b818401915084601f83011261067157600080fd5b81518181111561068357610683610604565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156106c9576106c9610604565b816040528281528760208487010111156106e257600080fd5b6106f383602083016020880161050c565b97965050505050505056fea26469706673582212203aa6b0e34c6c90a78d7490615da3f6e3e792695bade3aa5019f764f928d3e39d64736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x7C7 CODESIZE SUB DUP1 PUSH2 0x7C7 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x54 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x734 DUP1 PUSH2 0x93 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x112F822 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x461A4478 EQ PUSH2 0x83 JUMPI DUP1 PUSH4 0xC88CAE0C EQ PUSH2 0x96 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0x54 CALLDATASIZE PUSH1 0x4 PUSH2 0x458 JUMP JUMPDEST PUSH2 0xB6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x59 PUSH2 0x91 CALLDATASIZE PUSH1 0x4 PUSH2 0x458 JUMP JUMPDEST PUSH2 0x1EC JUMP JUMPDEST PUSH2 0xA9 PUSH2 0xA4 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EF JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7A SWAP2 SWAP1 PUSH2 0x530 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x1E7663BC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x1E7663BC SWAP1 PUSH2 0x10F SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x581 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x150 SWAP2 SWAP1 PUSH2 0x5CE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x6352211E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1C0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E4 SWAP2 SWAP1 PUSH2 0x5E7 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F8 DUP4 DUP4 PUSH2 0xB6 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x60 SWAP4 SWAP3 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x272 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x296 SWAP2 SWAP1 PUSH2 0x5CE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x306 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x55534552204E4F20474954494400000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x2F745C5900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x2F745C59 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x37E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3A2 SWAP2 SWAP1 PUSH2 0x5CE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x6B8FF57400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x6B8FF574 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x412 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1E4 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x633 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x46B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x483 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x497 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x4A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x4B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x4EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x501 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1F8 DUP2 PUSH2 0x4CA JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x527 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x50F JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x54F DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x50C JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1F8 DUP2 PUSH2 0x4CA JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x645 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x65D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP DUP5 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x671 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x683 JUMPI PUSH2 0x683 PUSH2 0x604 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x6C9 JUMPI PUSH2 0x6C9 PUSH2 0x604 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP8 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x6E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6F3 DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x50C JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GASPRICE 0xA6 0xB0 0xE3 0x4C PUSH13 0x90A78D7490615DA3F6E3E79269 JUMPDEST 0xAD 0xE3 0xAA POP NOT 0xF7 PUSH5 0xF928D3E39D PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"36:785:17:-:0;;;88:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;131:5;:14;;-1:-1:-1;;;;;;131:14:17;-1:-1:-1;;;;;131:14:17;;;;;;;;;;36:785;;14:304:19;98:6;151:2;139:9;130:7;126:23;122:32;119:52;;;167:1;164;157:12;119:52;193:16;;-1:-1:-1;;;;;238:31:19;;228:42;;218:70;;284:1;281;274:12;218:70;307:5;14:304;-1:-1:-1;;;14:304:19:o;:::-;36:785:17;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_resolveSingle_3762":{"entryPoint":182,"id":3762,"parameterSlots":2,"returnSlots":1},"@getGitHubUserName_3797":{"entryPoint":511,"id":3797,"parameterSlots":1,"returnSlots":1},"@resolve_3742":{"entryPoint":492,"id":3742,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":1263,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":1511,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_calldata_ptr":{"entryPoint":1112,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_string_memory_ptr_fromMemory":{"entryPoint":1587,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":1486,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_rational_0_by_1__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1409,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1328,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c4af7ab84eb4a3131119479cb7c99963fdb71676dfeb1728d0189cc016188ed7__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":1292,"id":null,"parameterSlots":3,"returnSlots":0},"panic_error_0x41":{"entryPoint":1540,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":1226,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4848:19","statements":[{"nodeType":"YulBlock","src":"6:3:19","statements":[]},{"body":{"nodeType":"YulBlock","src":"104:502:19","statements":[{"body":{"nodeType":"YulBlock","src":"150:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"159:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"162:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"152:6:19"},"nodeType":"YulFunctionCall","src":"152:12:19"},"nodeType":"YulExpressionStatement","src":"152:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"125:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"134:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"121:3:19"},"nodeType":"YulFunctionCall","src":"121:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"146:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"117:3:19"},"nodeType":"YulFunctionCall","src":"117:32:19"},"nodeType":"YulIf","src":"114:52:19"},{"nodeType":"YulVariableDeclaration","src":"175:37:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"202:9:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"189:12:19"},"nodeType":"YulFunctionCall","src":"189:23:19"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"179:6:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"221:28:19","value":{"kind":"number","nodeType":"YulLiteral","src":"231:18:19","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"225:2:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"276:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"285:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"288:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"278:6:19"},"nodeType":"YulFunctionCall","src":"278:12:19"},"nodeType":"YulExpressionStatement","src":"278:12:19"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"264:6:19"},{"name":"_1","nodeType":"YulIdentifier","src":"272:2:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"261:2:19"},"nodeType":"YulFunctionCall","src":"261:14:19"},"nodeType":"YulIf","src":"258:34:19"},{"nodeType":"YulVariableDeclaration","src":"301:32:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"315:9:19"},{"name":"offset","nodeType":"YulIdentifier","src":"326:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"311:3:19"},"nodeType":"YulFunctionCall","src":"311:22:19"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"305:2:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"381:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"390:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"393:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"383:6:19"},"nodeType":"YulFunctionCall","src":"383:12:19"},"nodeType":"YulExpressionStatement","src":"383:12:19"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"360:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"364:4:19","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"356:3:19"},"nodeType":"YulFunctionCall","src":"356:13:19"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"371:7:19"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"352:3:19"},"nodeType":"YulFunctionCall","src":"352:27:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"345:6:19"},"nodeType":"YulFunctionCall","src":"345:35:19"},"nodeType":"YulIf","src":"342:55:19"},{"nodeType":"YulVariableDeclaration","src":"406:30:19","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"433:2:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"420:12:19"},"nodeType":"YulFunctionCall","src":"420:16:19"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"410:6:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"463:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"472:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"475:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"465:6:19"},"nodeType":"YulFunctionCall","src":"465:12:19"},"nodeType":"YulExpressionStatement","src":"465:12:19"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"451:6:19"},{"name":"_1","nodeType":"YulIdentifier","src":"459:2:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"448:2:19"},"nodeType":"YulFunctionCall","src":"448:14:19"},"nodeType":"YulIf","src":"445:34:19"},{"body":{"nodeType":"YulBlock","src":"529:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"538:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"541:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"531:6:19"},"nodeType":"YulFunctionCall","src":"531:12:19"},"nodeType":"YulExpressionStatement","src":"531:12:19"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"502:2:19"},{"name":"length","nodeType":"YulIdentifier","src":"506:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"498:3:19"},"nodeType":"YulFunctionCall","src":"498:15:19"},{"kind":"number","nodeType":"YulLiteral","src":"515:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"494:3:19"},"nodeType":"YulFunctionCall","src":"494:24:19"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"520:7:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"491:2:19"},"nodeType":"YulFunctionCall","src":"491:37:19"},"nodeType":"YulIf","src":"488:57:19"},{"nodeType":"YulAssignment","src":"554:21:19","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"568:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"572:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"564:3:19"},"nodeType":"YulFunctionCall","src":"564:11:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"554:6:19"}]},{"nodeType":"YulAssignment","src":"584:16:19","value":{"name":"length","nodeType":"YulIdentifier","src":"594:6:19"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"584:6:19"}]}]},"name":"abi_decode_tuple_t_string_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"62:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"73:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"85:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"93:6:19","type":""}],"src":"14:592:19"},{"body":{"nodeType":"YulBlock","src":"712:125:19","statements":[{"nodeType":"YulAssignment","src":"722:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"734:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"745:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"730:3:19"},"nodeType":"YulFunctionCall","src":"730:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"722:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"764:9:19"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"779:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"787:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"775:3:19"},"nodeType":"YulFunctionCall","src":"775:55:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"757:6:19"},"nodeType":"YulFunctionCall","src":"757:74:19"},"nodeType":"YulExpressionStatement","src":"757:74:19"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"681:9:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"692:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"703:4:19","type":""}],"src":"611:226:19"},{"body":{"nodeType":"YulBlock","src":"887:109:19","statements":[{"body":{"nodeType":"YulBlock","src":"974:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"983:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"986:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"976:6:19"},"nodeType":"YulFunctionCall","src":"976:12:19"},"nodeType":"YulExpressionStatement","src":"976:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"910:5:19"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"921:5:19"},{"kind":"number","nodeType":"YulLiteral","src":"928:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"917:3:19"},"nodeType":"YulFunctionCall","src":"917:54:19"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"907:2:19"},"nodeType":"YulFunctionCall","src":"907:65:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"900:6:19"},"nodeType":"YulFunctionCall","src":"900:73:19"},"nodeType":"YulIf","src":"897:93:19"}]},"name":"validator_revert_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"876:5:19","type":""}],"src":"842:154:19"},{"body":{"nodeType":"YulBlock","src":"1071:177:19","statements":[{"body":{"nodeType":"YulBlock","src":"1117:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1126:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1129:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1119:6:19"},"nodeType":"YulFunctionCall","src":"1119:12:19"},"nodeType":"YulExpressionStatement","src":"1119:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1092:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"1101:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1088:3:19"},"nodeType":"YulFunctionCall","src":"1088:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"1113:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1084:3:19"},"nodeType":"YulFunctionCall","src":"1084:32:19"},"nodeType":"YulIf","src":"1081:52:19"},{"nodeType":"YulVariableDeclaration","src":"1142:36:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1168:9:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1155:12:19"},"nodeType":"YulFunctionCall","src":"1155:23:19"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1146:5:19","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1212:5:19"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"1187:24:19"},"nodeType":"YulFunctionCall","src":"1187:31:19"},"nodeType":"YulExpressionStatement","src":"1187:31:19"},{"nodeType":"YulAssignment","src":"1227:15:19","value":{"name":"value","nodeType":"YulIdentifier","src":"1237:5:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1227:6:19"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1037:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1048:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1060:6:19","type":""}],"src":"1001:247:19"},{"body":{"nodeType":"YulBlock","src":"1319:184:19","statements":[{"nodeType":"YulVariableDeclaration","src":"1329:10:19","value":{"kind":"number","nodeType":"YulLiteral","src":"1338:1:19","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1333:1:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"1398:63:19","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1423:3:19"},{"name":"i","nodeType":"YulIdentifier","src":"1428:1:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1419:3:19"},"nodeType":"YulFunctionCall","src":"1419:11:19"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1442:3:19"},{"name":"i","nodeType":"YulIdentifier","src":"1447:1:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1438:3:19"},"nodeType":"YulFunctionCall","src":"1438:11:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1432:5:19"},"nodeType":"YulFunctionCall","src":"1432:18:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1412:6:19"},"nodeType":"YulFunctionCall","src":"1412:39:19"},"nodeType":"YulExpressionStatement","src":"1412:39:19"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1359:1:19"},{"name":"length","nodeType":"YulIdentifier","src":"1362:6:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1356:2:19"},"nodeType":"YulFunctionCall","src":"1356:13:19"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1370:19:19","statements":[{"nodeType":"YulAssignment","src":"1372:15:19","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1381:1:19"},{"kind":"number","nodeType":"YulLiteral","src":"1384:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1377:3:19"},"nodeType":"YulFunctionCall","src":"1377:10:19"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1372:1:19"}]}]},"pre":{"nodeType":"YulBlock","src":"1352:3:19","statements":[]},"src":"1348:113:19"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1481:3:19"},{"name":"length","nodeType":"YulIdentifier","src":"1486:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1477:3:19"},"nodeType":"YulFunctionCall","src":"1477:16:19"},{"kind":"number","nodeType":"YulLiteral","src":"1495:1:19","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1470:6:19"},"nodeType":"YulFunctionCall","src":"1470:27:19"},"nodeType":"YulExpressionStatement","src":"1470:27:19"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1297:3:19","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1302:3:19","type":""},{"name":"length","nodeType":"YulTypedName","src":"1307:6:19","type":""}],"src":"1253:250:19"},{"body":{"nodeType":"YulBlock","src":"1629:334:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1646:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1657:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1639:6:19"},"nodeType":"YulFunctionCall","src":"1639:21:19"},"nodeType":"YulExpressionStatement","src":"1639:21:19"},{"nodeType":"YulVariableDeclaration","src":"1669:27:19","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1689:6:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1683:5:19"},"nodeType":"YulFunctionCall","src":"1683:13:19"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1673:6:19","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1716:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1727:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1712:3:19"},"nodeType":"YulFunctionCall","src":"1712:18:19"},{"name":"length","nodeType":"YulIdentifier","src":"1732:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1705:6:19"},"nodeType":"YulFunctionCall","src":"1705:34:19"},"nodeType":"YulExpressionStatement","src":"1705:34:19"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1787:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"1795:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1783:3:19"},"nodeType":"YulFunctionCall","src":"1783:15:19"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1804:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1815:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1800:3:19"},"nodeType":"YulFunctionCall","src":"1800:18:19"},{"name":"length","nodeType":"YulIdentifier","src":"1820:6:19"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"1748:34:19"},"nodeType":"YulFunctionCall","src":"1748:79:19"},"nodeType":"YulExpressionStatement","src":"1748:79:19"},{"nodeType":"YulAssignment","src":"1836:121:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1852:9:19"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1871:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"1879:2:19","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1867:3:19"},"nodeType":"YulFunctionCall","src":"1867:15:19"},{"kind":"number","nodeType":"YulLiteral","src":"1884:66:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1863:3:19"},"nodeType":"YulFunctionCall","src":"1863:88:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1848:3:19"},"nodeType":"YulFunctionCall","src":"1848:104:19"},{"kind":"number","nodeType":"YulLiteral","src":"1954:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1844:3:19"},"nodeType":"YulFunctionCall","src":"1844:113:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1836:4:19"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1598:9:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1609:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1620:4:19","type":""}],"src":"1508:455:19"},{"body":{"nodeType":"YulBlock","src":"2099:318:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2116:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"2127:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2109:6:19"},"nodeType":"YulFunctionCall","src":"2109:21:19"},"nodeType":"YulExpressionStatement","src":"2109:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2150:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"2161:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2146:3:19"},"nodeType":"YulFunctionCall","src":"2146:18:19"},{"name":"value1","nodeType":"YulIdentifier","src":"2166:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2139:6:19"},"nodeType":"YulFunctionCall","src":"2139:34:19"},"nodeType":"YulExpressionStatement","src":"2139:34:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2199:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"2210:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2195:3:19"},"nodeType":"YulFunctionCall","src":"2195:18:19"},{"name":"value0","nodeType":"YulIdentifier","src":"2215:6:19"},{"name":"value1","nodeType":"YulIdentifier","src":"2223:6:19"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"2182:12:19"},"nodeType":"YulFunctionCall","src":"2182:48:19"},"nodeType":"YulExpressionStatement","src":"2182:48:19"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2254:9:19"},{"name":"value1","nodeType":"YulIdentifier","src":"2265:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2250:3:19"},"nodeType":"YulFunctionCall","src":"2250:22:19"},{"kind":"number","nodeType":"YulLiteral","src":"2274:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2246:3:19"},"nodeType":"YulFunctionCall","src":"2246:31:19"},{"kind":"number","nodeType":"YulLiteral","src":"2279:1:19","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2239:6:19"},"nodeType":"YulFunctionCall","src":"2239:42:19"},"nodeType":"YulExpressionStatement","src":"2239:42:19"},{"nodeType":"YulAssignment","src":"2290:121:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2306:9:19"},{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"2325:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"2333:2:19","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2321:3:19"},"nodeType":"YulFunctionCall","src":"2321:15:19"},{"kind":"number","nodeType":"YulLiteral","src":"2338:66:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2317:3:19"},"nodeType":"YulFunctionCall","src":"2317:88:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2302:3:19"},"nodeType":"YulFunctionCall","src":"2302:104:19"},{"kind":"number","nodeType":"YulLiteral","src":"2408:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2298:3:19"},"nodeType":"YulFunctionCall","src":"2298:113:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2290:4:19"}]}]},"name":"abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2060:9:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2071:6:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2079:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2090:4:19","type":""}],"src":"1968:449:19"},{"body":{"nodeType":"YulBlock","src":"2503:103:19","statements":[{"body":{"nodeType":"YulBlock","src":"2549:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2558:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2561:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2551:6:19"},"nodeType":"YulFunctionCall","src":"2551:12:19"},"nodeType":"YulExpressionStatement","src":"2551:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2524:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"2533:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2520:3:19"},"nodeType":"YulFunctionCall","src":"2520:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"2545:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2516:3:19"},"nodeType":"YulFunctionCall","src":"2516:32:19"},"nodeType":"YulIf","src":"2513:52:19"},{"nodeType":"YulAssignment","src":"2574:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2590:9:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2584:5:19"},"nodeType":"YulFunctionCall","src":"2584:16:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2574:6:19"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2469:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2480:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2492:6:19","type":""}],"src":"2422:184:19"},{"body":{"nodeType":"YulBlock","src":"2712:76:19","statements":[{"nodeType":"YulAssignment","src":"2722:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2734:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"2745:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2730:3:19"},"nodeType":"YulFunctionCall","src":"2730:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2722:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2764:9:19"},{"name":"value0","nodeType":"YulIdentifier","src":"2775:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2757:6:19"},"nodeType":"YulFunctionCall","src":"2757:25:19"},"nodeType":"YulExpressionStatement","src":"2757:25:19"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2681:9:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2692:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2703:4:19","type":""}],"src":"2611:177:19"},{"body":{"nodeType":"YulBlock","src":"2874:170:19","statements":[{"body":{"nodeType":"YulBlock","src":"2920:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2929:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2932:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2922:6:19"},"nodeType":"YulFunctionCall","src":"2922:12:19"},"nodeType":"YulExpressionStatement","src":"2922:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2895:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"2904:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2891:3:19"},"nodeType":"YulFunctionCall","src":"2891:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"2916:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2887:3:19"},"nodeType":"YulFunctionCall","src":"2887:32:19"},"nodeType":"YulIf","src":"2884:52:19"},{"nodeType":"YulVariableDeclaration","src":"2945:29:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2964:9:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2958:5:19"},"nodeType":"YulFunctionCall","src":"2958:16:19"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2949:5:19","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3008:5:19"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"2983:24:19"},"nodeType":"YulFunctionCall","src":"2983:31:19"},"nodeType":"YulExpressionStatement","src":"2983:31:19"},{"nodeType":"YulAssignment","src":"3023:15:19","value":{"name":"value","nodeType":"YulIdentifier","src":"3033:5:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3023:6:19"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2840:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2851:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2863:6:19","type":""}],"src":"2793:251:19"},{"body":{"nodeType":"YulBlock","src":"3223:163:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3240:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"3251:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3233:6:19"},"nodeType":"YulFunctionCall","src":"3233:21:19"},"nodeType":"YulExpressionStatement","src":"3233:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3274:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"3285:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3270:3:19"},"nodeType":"YulFunctionCall","src":"3270:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"3290:2:19","type":"","value":"13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3263:6:19"},"nodeType":"YulFunctionCall","src":"3263:30:19"},"nodeType":"YulExpressionStatement","src":"3263:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3313:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"3324:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3309:3:19"},"nodeType":"YulFunctionCall","src":"3309:18:19"},{"hexValue":"55534552204e4f204749544944","kind":"string","nodeType":"YulLiteral","src":"3329:15:19","type":"","value":"USER NO GITID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3302:6:19"},"nodeType":"YulFunctionCall","src":"3302:43:19"},"nodeType":"YulExpressionStatement","src":"3302:43:19"},{"nodeType":"YulAssignment","src":"3354:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3366:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"3377:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3362:3:19"},"nodeType":"YulFunctionCall","src":"3362:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3354:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_c4af7ab84eb4a3131119479cb7c99963fdb71676dfeb1728d0189cc016188ed7__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3200:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3214:4:19","type":""}],"src":"3049:337:19"},{"body":{"nodeType":"YulBlock","src":"3528:168:19","statements":[{"nodeType":"YulAssignment","src":"3538:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3550:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"3561:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3546:3:19"},"nodeType":"YulFunctionCall","src":"3546:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3538:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3580:9:19"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3595:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"3603:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3591:3:19"},"nodeType":"YulFunctionCall","src":"3591:55:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3573:6:19"},"nodeType":"YulFunctionCall","src":"3573:74:19"},"nodeType":"YulExpressionStatement","src":"3573:74:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3667:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"3678:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3663:3:19"},"nodeType":"YulFunctionCall","src":"3663:18:19"},{"name":"value1","nodeType":"YulIdentifier","src":"3683:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3656:6:19"},"nodeType":"YulFunctionCall","src":"3656:34:19"},"nodeType":"YulExpressionStatement","src":"3656:34:19"}]},"name":"abi_encode_tuple_t_address_t_rational_0_by_1__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3489:9:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3500:6:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3508:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3519:4:19","type":""}],"src":"3391:305:19"},{"body":{"nodeType":"YulBlock","src":"3733:152:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3750:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3753:77:19","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3743:6:19"},"nodeType":"YulFunctionCall","src":"3743:88:19"},"nodeType":"YulExpressionStatement","src":"3743:88:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3847:1:19","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3850:4:19","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3840:6:19"},"nodeType":"YulFunctionCall","src":"3840:15:19"},"nodeType":"YulExpressionStatement","src":"3840:15:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3871:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3874:4:19","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3864:6:19"},"nodeType":"YulFunctionCall","src":"3864:15:19"},"nodeType":"YulExpressionStatement","src":"3864:15:19"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3701:184:19"},{"body":{"nodeType":"YulBlock","src":"3981:865:19","statements":[{"body":{"nodeType":"YulBlock","src":"4027:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4036:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4039:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4029:6:19"},"nodeType":"YulFunctionCall","src":"4029:12:19"},"nodeType":"YulExpressionStatement","src":"4029:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4002:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"4011:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3998:3:19"},"nodeType":"YulFunctionCall","src":"3998:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"4023:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3994:3:19"},"nodeType":"YulFunctionCall","src":"3994:32:19"},"nodeType":"YulIf","src":"3991:52:19"},{"nodeType":"YulVariableDeclaration","src":"4052:30:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4072:9:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4066:5:19"},"nodeType":"YulFunctionCall","src":"4066:16:19"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4056:6:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4091:28:19","value":{"kind":"number","nodeType":"YulLiteral","src":"4101:18:19","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4095:2:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"4146:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4155:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4158:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4148:6:19"},"nodeType":"YulFunctionCall","src":"4148:12:19"},"nodeType":"YulExpressionStatement","src":"4148:12:19"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4134:6:19"},{"name":"_1","nodeType":"YulIdentifier","src":"4142:2:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4131:2:19"},"nodeType":"YulFunctionCall","src":"4131:14:19"},"nodeType":"YulIf","src":"4128:34:19"},{"nodeType":"YulVariableDeclaration","src":"4171:32:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4185:9:19"},{"name":"offset","nodeType":"YulIdentifier","src":"4196:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4181:3:19"},"nodeType":"YulFunctionCall","src":"4181:22:19"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"4175:2:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"4251:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4260:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4263:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4253:6:19"},"nodeType":"YulFunctionCall","src":"4253:12:19"},"nodeType":"YulExpressionStatement","src":"4253:12:19"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4230:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"4234:4:19","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4226:3:19"},"nodeType":"YulFunctionCall","src":"4226:13:19"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4241:7:19"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4222:3:19"},"nodeType":"YulFunctionCall","src":"4222:27:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4215:6:19"},"nodeType":"YulFunctionCall","src":"4215:35:19"},"nodeType":"YulIf","src":"4212:55:19"},{"nodeType":"YulVariableDeclaration","src":"4276:19:19","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4292:2:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4286:5:19"},"nodeType":"YulFunctionCall","src":"4286:9:19"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"4280:2:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"4318:22:19","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4320:16:19"},"nodeType":"YulFunctionCall","src":"4320:18:19"},"nodeType":"YulExpressionStatement","src":"4320:18:19"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4310:2:19"},{"name":"_1","nodeType":"YulIdentifier","src":"4314:2:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4307:2:19"},"nodeType":"YulFunctionCall","src":"4307:10:19"},"nodeType":"YulIf","src":"4304:36:19"},{"nodeType":"YulVariableDeclaration","src":"4349:76:19","value":{"kind":"number","nodeType":"YulLiteral","src":"4359:66:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"4353:2:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4434:23:19","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4454:2:19","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4448:5:19"},"nodeType":"YulFunctionCall","src":"4448:9:19"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4438:6:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4466:71:19","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4488:6:19"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4512:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"4516:4:19","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4508:3:19"},"nodeType":"YulFunctionCall","src":"4508:13:19"},{"name":"_4","nodeType":"YulIdentifier","src":"4523:2:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4504:3:19"},"nodeType":"YulFunctionCall","src":"4504:22:19"},{"kind":"number","nodeType":"YulLiteral","src":"4528:2:19","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4500:3:19"},"nodeType":"YulFunctionCall","src":"4500:31:19"},{"name":"_4","nodeType":"YulIdentifier","src":"4533:2:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4496:3:19"},"nodeType":"YulFunctionCall","src":"4496:40:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4484:3:19"},"nodeType":"YulFunctionCall","src":"4484:53:19"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"4470:10:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"4596:22:19","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4598:16:19"},"nodeType":"YulFunctionCall","src":"4598:18:19"},"nodeType":"YulExpressionStatement","src":"4598:18:19"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4555:10:19"},{"name":"_1","nodeType":"YulIdentifier","src":"4567:2:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4552:2:19"},"nodeType":"YulFunctionCall","src":"4552:18:19"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4575:10:19"},{"name":"memPtr","nodeType":"YulIdentifier","src":"4587:6:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4572:2:19"},"nodeType":"YulFunctionCall","src":"4572:22:19"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4549:2:19"},"nodeType":"YulFunctionCall","src":"4549:46:19"},"nodeType":"YulIf","src":"4546:72:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4634:2:19","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4638:10:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4627:6:19"},"nodeType":"YulFunctionCall","src":"4627:22:19"},"nodeType":"YulExpressionStatement","src":"4627:22:19"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4665:6:19"},{"name":"_3","nodeType":"YulIdentifier","src":"4673:2:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4658:6:19"},"nodeType":"YulFunctionCall","src":"4658:18:19"},"nodeType":"YulExpressionStatement","src":"4658:18:19"},{"body":{"nodeType":"YulBlock","src":"4722:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4731:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4734:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4724:6:19"},"nodeType":"YulFunctionCall","src":"4724:12:19"},"nodeType":"YulExpressionStatement","src":"4724:12:19"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4699:2:19"},{"name":"_3","nodeType":"YulIdentifier","src":"4703:2:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4695:3:19"},"nodeType":"YulFunctionCall","src":"4695:11:19"},{"kind":"number","nodeType":"YulLiteral","src":"4708:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4691:3:19"},"nodeType":"YulFunctionCall","src":"4691:20:19"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4713:7:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4688:2:19"},"nodeType":"YulFunctionCall","src":"4688:33:19"},"nodeType":"YulIf","src":"4685:53:19"},{"expression":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4786:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"4790:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4782:3:19"},"nodeType":"YulFunctionCall","src":"4782:11:19"},{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4799:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"4807:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4795:3:19"},"nodeType":"YulFunctionCall","src":"4795:15:19"},{"name":"_3","nodeType":"YulIdentifier","src":"4812:2:19"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"4747:34:19"},"nodeType":"YulFunctionCall","src":"4747:68:19"},"nodeType":"YulExpressionStatement","src":"4747:68:19"},{"nodeType":"YulAssignment","src":"4824:16:19","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4834:6:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4824:6:19"}]}]},"name":"abi_decode_tuple_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3947:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3958:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3970:6:19","type":""}],"src":"3890:956:19"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_string_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n    function abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), value1)\n        calldatacopy(add(headStart, 64), value0, value1)\n        mstore(add(add(headStart, value1), 64), 0)\n        tail := add(add(headStart, and(add(value1, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_c4af7ab84eb4a3131119479cb7c99963fdb71676dfeb1728d0189cc016188ed7__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 13)\n        mstore(add(headStart, 64), \"USER NO GITID\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_rational_0_by_1__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := mload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        copy_memory_to_memory_with_cleanup(add(_2, 32), add(memPtr, 32), _3)\n        value0 := memPtr\n    }\n}","id":19,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c80630112f82214610046578063461a447814610083578063c88cae0c14610096575b600080fd5b610059610054366004610458565b6100b6565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b610059610091366004610458565b6101ec565b6100a96100a43660046104ef565b6101ff565b60405161007a9190610530565b600080546040517f1e7663bc000000000000000000000000000000000000000000000000000000008152829173ffffffffffffffffffffffffffffffffffffffff1690631e7663bc9061010f9087908790600401610581565b602060405180830381865afa15801561012c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015091906105ce565b6000546040517f6352211e0000000000000000000000000000000000000000000000000000000081526004810183905291925073ffffffffffffffffffffffffffffffffffffffff1690636352211e90602401602060405180830381865afa1580156101c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e491906105e7565b949350505050565b60006101f883836100b6565b9392505050565b600080546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526060939216906370a0823190602401602060405180830381865afa158015610272573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029691906105ce565b905060008111610306576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f55534552204e4f20474954494400000000000000000000000000000000000000604482015260640160405180910390fd5b600080546040517f2f745c5900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301526024820184905290911690632f745c5990604401602060405180830381865afa15801561037e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a291906105ce565b6000546040517f6b8ff5740000000000000000000000000000000000000000000000000000000081526004810183905291925073ffffffffffffffffffffffffffffffffffffffff1690636b8ff57490602401600060405180830381865afa158015610412573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526101e49190810190610633565b6000806020838503121561046b57600080fd5b823567ffffffffffffffff8082111561048357600080fd5b818501915085601f83011261049757600080fd5b8135818111156104a657600080fd5b8660208285010111156104b857600080fd5b60209290920196919550909350505050565b73ffffffffffffffffffffffffffffffffffffffff811681146104ec57600080fd5b50565b60006020828403121561050157600080fd5b81356101f8816104ca565b60005b8381101561052757818101518382015260200161050f565b50506000910152565b602081526000825180602084015261054f81604085016020870161050c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b6000602082840312156105e057600080fd5b5051919050565b6000602082840312156105f957600080fd5b81516101f8816104ca565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561064557600080fd5b815167ffffffffffffffff8082111561065d57600080fd5b818401915084601f83011261067157600080fd5b81518181111561068357610683610604565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156106c9576106c9610604565b816040528281528760208487010111156106e257600080fd5b6106f383602083016020880161050c565b97965050505050505056fea26469706673582212203aa6b0e34c6c90a78d7490615da3f6e3e792695bade3aa5019f764f928d3e39d64736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x112F822 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x461A4478 EQ PUSH2 0x83 JUMPI DUP1 PUSH4 0xC88CAE0C EQ PUSH2 0x96 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0x54 CALLDATASIZE PUSH1 0x4 PUSH2 0x458 JUMP JUMPDEST PUSH2 0xB6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x59 PUSH2 0x91 CALLDATASIZE PUSH1 0x4 PUSH2 0x458 JUMP JUMPDEST PUSH2 0x1EC JUMP JUMPDEST PUSH2 0xA9 PUSH2 0xA4 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EF JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7A SWAP2 SWAP1 PUSH2 0x530 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x1E7663BC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x1E7663BC SWAP1 PUSH2 0x10F SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x581 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x150 SWAP2 SWAP1 PUSH2 0x5CE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x6352211E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1C0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E4 SWAP2 SWAP1 PUSH2 0x5E7 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F8 DUP4 DUP4 PUSH2 0xB6 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x60 SWAP4 SWAP3 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x272 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x296 SWAP2 SWAP1 PUSH2 0x5CE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x306 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x55534552204E4F20474954494400000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x2F745C5900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x2F745C59 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x37E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3A2 SWAP2 SWAP1 PUSH2 0x5CE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x6B8FF57400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x6B8FF574 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x412 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1E4 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x633 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x46B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x483 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x497 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x4A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x4B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x4EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x501 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1F8 DUP2 PUSH2 0x4CA JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x527 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x50F JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x54F DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x50C JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1F8 DUP2 PUSH2 0x4CA JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x645 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x65D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP DUP5 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x671 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x683 JUMPI PUSH2 0x683 PUSH2 0x604 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x6C9 JUMPI PUSH2 0x6C9 PUSH2 0x604 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP8 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x6E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6F3 DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x50C JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GASPRICE 0xA6 0xB0 0xE3 0x4C PUSH13 0x90A78D7490615DA3F6E3E79269 JUMPDEST 0xAD 0xE3 0xAA POP NOT 0xF7 PUSH5 0xF928D3E39D PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"36:785:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;301:194;;;;;;:::i;:::-;;:::i;:::-;;;787:42:19;775:55;;;757:74;;745:2;730:18;301:194:17;;;;;;;;158:137;;;;;;:::i;:::-;;:::i;501:317::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;301:194::-;386:7;423:5;;:26;;;;;386:7;;423:5;;;:16;;:26;;440:8;;;;423:26;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;466:5;;:22;;;;;;;;2757:25:19;;;405:44:17;;-1:-1:-1;466:5:17;;;:13;;2730:18:19;;466:22:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;459:29;301:194;-1:-1:-1;;;;301:194:17:o;158:137::-;238:7;264:24;279:8;;264:14;:24::i;:::-;257:31;158:137;-1:-1:-1;;;158:137:17:o;501:317::-;610:15;628:5;;:28;;;;;:5;775:55:19;;;628:28:17;;;757:74:19;585:13:17;;610:15;628:5;;:15;;730:18:19;;628:28:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;610:46;;684:1;674:7;:11;666:37;;;;;;;3251:2:19;666:37:17;;;3233:21:19;3290:2;3270:18;;;3263:30;3329:15;3309:18;;;3302:43;3362:18;;666:37:17;;;;;;;;713:15;731:5;;:41;;;;;:5;3591:55:19;;;731:41:17;;;3573:74:19;3663:18;;;3656:34;;;731:5:17;;;;:25;;3546:18:19;;731:41:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;789:5;;:22;;;;;;;;2757:25:19;;;713:59:17;;-1:-1:-1;789:5:17;;;:13;;2730:18:19;;789:22:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;14:592:19:-;85:6;93;146:2;134:9;125:7;121:23;117:32;114:52;;;162:1;159;152:12;114:52;202:9;189:23;231:18;272:2;264:6;261:14;258:34;;;288:1;285;278:12;258:34;326:6;315:9;311:22;301:32;;371:7;364:4;360:2;356:13;352:27;342:55;;393:1;390;383:12;342:55;433:2;420:16;459:2;451:6;448:14;445:34;;;475:1;472;465:12;445:34;520:7;515:2;506:6;502:2;498:15;494:24;491:37;488:57;;;541:1;538;531:12;488:57;572:2;564:11;;;;;594:6;;-1:-1:-1;14:592:19;;-1:-1:-1;;;;14:592:19:o;842:154::-;928:42;921:5;917:54;910:5;907:65;897:93;;986:1;983;976:12;897:93;842:154;:::o;1001:247::-;1060:6;1113:2;1101:9;1092:7;1088:23;1084:32;1081:52;;;1129:1;1126;1119:12;1081:52;1168:9;1155:23;1187:31;1212:5;1187:31;:::i;1253:250::-;1338:1;1348:113;1362:6;1359:1;1356:13;1348:113;;;1438:11;;;1432:18;1419:11;;;1412:39;1384:2;1377:10;1348:113;;;-1:-1:-1;;1495:1:19;1477:16;;1470:27;1253:250::o;1508:455::-;1657:2;1646:9;1639:21;1620:4;1689:6;1683:13;1732:6;1727:2;1716:9;1712:18;1705:34;1748:79;1820:6;1815:2;1804:9;1800:18;1795:2;1787:6;1783:15;1748:79;:::i;:::-;1879:2;1867:15;1884:66;1863:88;1848:104;;;;1954:2;1844:113;;1508:455;-1:-1:-1;;1508:455:19:o;1968:449::-;2127:2;2116:9;2109:21;2166:6;2161:2;2150:9;2146:18;2139:34;2223:6;2215;2210:2;2199:9;2195:18;2182:48;2279:1;2250:22;;;2274:2;2246:31;;;2239:42;;;;2333:2;2321:15;;;2338:66;2317:88;2302:104;2298:113;;1968:449;-1:-1:-1;1968:449:19:o;2422:184::-;2492:6;2545:2;2533:9;2524:7;2520:23;2516:32;2513:52;;;2561:1;2558;2551:12;2513:52;-1:-1:-1;2584:16:19;;2422:184;-1:-1:-1;2422:184:19:o;2793:251::-;2863:6;2916:2;2904:9;2895:7;2891:23;2887:32;2884:52;;;2932:1;2929;2922:12;2884:52;2964:9;2958:16;2983:31;3008:5;2983:31;:::i;3701:184::-;3753:77;3750:1;3743:88;3850:4;3847:1;3840:15;3874:4;3871:1;3864:15;3890:956;3970:6;4023:2;4011:9;4002:7;3998:23;3994:32;3991:52;;;4039:1;4036;4029:12;3991:52;4072:9;4066:16;4101:18;4142:2;4134:6;4131:14;4128:34;;;4158:1;4155;4148:12;4128:34;4196:6;4185:9;4181:22;4171:32;;4241:7;4234:4;4230:2;4226:13;4222:27;4212:55;;4263:1;4260;4253:12;4212:55;4292:2;4286:9;4314:2;4310;4307:10;4304:36;;;4320:18;;:::i;:::-;4454:2;4448:9;4516:4;4508:13;;4359:66;4504:22;;;4528:2;4500:31;4496:40;4484:53;;;4552:18;;;4572:22;;;4549:46;4546:72;;;4598:18;;:::i;:::-;4638:10;4634:2;4627:22;4673:2;4665:6;4658:18;4713:7;4708:2;4703;4699;4695:11;4691:20;4688:33;4685:53;;;4734:1;4731;4724:12;4685:53;4747:68;4812:2;4807;4799:6;4795:15;4790:2;4786;4782:11;4747:68;:::i;:::-;4834:6;3890:956;-1:-1:-1;;;;;;;3890:956:19:o"},"gasEstimates":{"creation":{"codeDepositCost":"368800","executionCost":"infinite","totalCost":"infinite"},"external":{"_resolveSingle(string)":"infinite","getGitHubUserName(address)":"infinite","resolve(string)":"infinite"}},"methodIdentifiers":{"_resolveSingle(string)":"0112f822","getGitHubUserName(address)":"c88cae0c","resolve(string)":"461a4478"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract GitID\",\"name\":\"_gitID\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"_resolveSingle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getGitHubUserName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/gitid/UniversalResolver.sol\":\"UniversalResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/gitid/UniversalResolver.sol\":{\"content\":\"import {GitID} from \\\"./gitid.sol\\\";\\n\\ncontract UniversalResolver {\\n\\n    GitID gitID;\\n\\n    constructor(GitID _gitID) public {\\n        gitID = _gitID;\\n    }\\n\\n    function resolve(\\n        string calldata username\\n    ) external view returns (address) {\\n        return _resolveSingle(username);\\n    }\\n\\n    function _resolveSingle(\\n        string calldata username\\n    ) public view returns (address) {\\n        uint256 tokenId = gitID.getTokenId(username);\\n        return gitID.ownerOf(tokenId);\\n    }\\n\\n    function getGitHubUserName(\\n       address userAddress\\n    ) external view returns (string memory) {\\n        uint256 balance = gitID.balanceOf(userAddress);\\n        require(balance > 0, 'USER NO GITID');\\n        uint256 tokenId = gitID.tokenOfOwnerByIndex(userAddress, 0);\\n        return gitID.getName(tokenId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x32c07a61392f784860ba84051870e12ee31300da3a968bb22743a80d94b8b71a\"},\"contracts/gitid/gitid.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n\\ncontract GitID is Ownable, ERC721, ERC721Enumerable  {\\n\\n    // basename '.gitid'\\n    string public baseName;\\n    string public baseURI;\\n\\n    // A map of tokenId to name\\n    mapping(uint256=>string) public names;\\n\\n    // A map of addresses that are authorised to register and renew names.\\n    mapping(address=>bool) public minters;\\n\\n\\n    event MinterAdded(address indexed minter);\\n    event MinterRemoved(address indexed minter);\\n    event NameRegistered(uint256 indexed id, address indexed owner);\\n\\n\\n    constructor(string memory _name, string memory _symbol, string memory _baseName) ERC721(_name, _symbol) {\\n        baseName = _baseName;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC721Enumerable) returns (bool) {\\n        bool result = super.supportsInterface(interfaceId);\\n        if (result) {\\n            return true;\\n        }\\n        if (interfaceId == type(IERC721Enumerable).interfaceId) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    modifier onlyMinter {\\n        require(minters[msg.sender]);\\n        _;\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId, uint256 batchSize) internal override(ERC721, ERC721Enumerable) {\\n        require(balanceOf(to) == 0);\\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\\n    }\\n\\n    function addMinter(address minter) external onlyOwner {\\n        minters[minter] = true;\\n        emit MinterAdded(minter);\\n    }\\n\\n    // Revoke minter permission for an address.\\n    function removeMinter(address minter) external onlyOwner {\\n        minters[minter] = false;\\n        emit MinterRemoved(minter);\\n    }\\n\\n\\n    /**\\n     * @dev Register a name.\\n     * @param id The token ID (keccak256 of the label).\\n     * @param owner The address that should own the registration.\\n     */\\n    function register(uint256 id, string memory name, address owner) external onlyMinter {\\n        return _register(id, name, owner);\\n    }\\n\\n\\n    function _register(uint256 id, string memory name, address owner) internal {\\n        require(!_exists(id), 'Already registered');\\n\\n        _mint(owner, id);\\n        names[id] = name;\\n\\n        emit NameRegistered(id, owner);\\n    }\\n\\n    function getTokenId(string memory username) public pure returns (uint256) {\\n        bytes32 label = keccak256(bytes(username));\\n        uint256 tokenId = uint256(label);\\n        return tokenId;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        _requireMinted(tokenId);\\n        string memory name = getName(tokenId);\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, name)) : \\\"\\\";\\n    }\\n\\n    function setBaseURI(string calldata uri) public onlyOwner {\\n        baseURI = uri;\\n    }\\n\\n    function getName(uint256 tokenId) public view returns(string memory) {\\n        string memory name = names[tokenId];\\n        return name;\\n    }\\n}\\n\",\"keccak256\":\"0x63e00a8c0d65be5888f1ed5ac15f45a7ef7a6868cf989bff3951f2d3de59593f\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3719,"contract":"contracts/gitid/UniversalResolver.sol:UniversalResolver","label":"gitID","offset":0,"slot":"0","type":"t_contract(GitID)4113"}],"types":{"t_contract(GitID)4113":{"encoding":"inplace","label":"contract GitID","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/gitid/gitid.sol":{"GitID":{"abi":[{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_symbol","type":"string"},{"internalType":"string","name":"_baseName","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"minter","type":"address"}],"name":"MinterAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"minter","type":"address"}],"name":"MinterRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"NameRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"minter","type":"address"}],"name":"addMinter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"baseName","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"baseURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getName","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"username","type":"string"}],"name":"getTokenId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"minters","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"names","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"owner","type":"address"}],"name":"register","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"minter","type":"address"}],"name":"removeMinter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"uri","type":"string"}],"name":"setBaseURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"owner()":{"details":"Returns the address of the current owner."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"register(uint256,string,address)":{"details":"Register a name.","params":{"id":"The token ID (keccak256 of the label).","owner":"The address that should own the registration."}},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenByIndex(uint256)":{"details":"See {IERC721Enumerable-tokenByIndex}."},"tokenOfOwnerByIndex(address,uint256)":{"details":"See {IERC721Enumerable-tokenOfOwnerByIndex}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"totalSupply()":{"details":"See {IERC721Enumerable-totalSupply}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_175":{"entryPoint":null,"id":175,"parameterSlots":2,"returnSlots":0},"@_23":{"entryPoint":null,"id":23,"parameterSlots":0,"returnSlots":0},"@_3854":{"entryPoint":null,"id":3854,"parameterSlots":3,"returnSlots":0},"@_msgSender_1927":{"entryPoint":null,"id":1927,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_111":{"entryPoint":123,"id":111,"parameterSlots":1,"returnSlots":0},"abi_decode_string_fromMemory":{"entryPoint":225,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":400,"id":null,"parameterSlots":2,"returnSlots":3},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":605,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":688,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":545,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":203,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4348:19","statements":[{"nodeType":"YulBlock","src":"6:3:19","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:19","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:19","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:19","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:19"},"nodeType":"YulFunctionCall","src":"66:20:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:19"},"nodeType":"YulFunctionCall","src":"56:31:19"},"nodeType":"YulExpressionStatement","src":"56:31:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:19","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:19","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:19"},"nodeType":"YulFunctionCall","src":"96:15:19"},"nodeType":"YulExpressionStatement","src":"96:15:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:19","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:19"},"nodeType":"YulFunctionCall","src":"120:15:19"},"nodeType":"YulExpressionStatement","src":"120:15:19"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:19"},{"body":{"nodeType":"YulBlock","src":"210:776:19","statements":[{"body":{"nodeType":"YulBlock","src":"259:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"268:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"271:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"261:6:19"},"nodeType":"YulFunctionCall","src":"261:12:19"},"nodeType":"YulExpressionStatement","src":"261:12:19"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"238:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"246:4:19","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"234:3:19"},"nodeType":"YulFunctionCall","src":"234:17:19"},{"name":"end","nodeType":"YulIdentifier","src":"253:3:19"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"230:3:19"},"nodeType":"YulFunctionCall","src":"230:27:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"223:6:19"},"nodeType":"YulFunctionCall","src":"223:35:19"},"nodeType":"YulIf","src":"220:55:19"},{"nodeType":"YulVariableDeclaration","src":"284:23:19","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"300:6:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"294:5:19"},"nodeType":"YulFunctionCall","src":"294:13:19"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"288:2:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"316:28:19","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"334:2:19","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"338:1:19","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"330:3:19"},"nodeType":"YulFunctionCall","src":"330:10:19"},{"kind":"number","nodeType":"YulLiteral","src":"342:1:19","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"326:3:19"},"nodeType":"YulFunctionCall","src":"326:18:19"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"320:2:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"367:22:19","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"369:16:19"},"nodeType":"YulFunctionCall","src":"369:18:19"},"nodeType":"YulExpressionStatement","src":"369:18:19"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"359:2:19"},{"name":"_2","nodeType":"YulIdentifier","src":"363:2:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"356:2:19"},"nodeType":"YulFunctionCall","src":"356:10:19"},"nodeType":"YulIf","src":"353:36:19"},{"nodeType":"YulVariableDeclaration","src":"398:17:19","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"412:2:19","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"408:3:19"},"nodeType":"YulFunctionCall","src":"408:7:19"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"402:2:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"424:23:19","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"444:2:19","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"438:5:19"},"nodeType":"YulFunctionCall","src":"438:9:19"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"428:6:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"456:71:19","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"478:6:19"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"502:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"506:4:19","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"498:3:19"},"nodeType":"YulFunctionCall","src":"498:13:19"},{"name":"_3","nodeType":"YulIdentifier","src":"513:2:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"494:3:19"},"nodeType":"YulFunctionCall","src":"494:22:19"},{"kind":"number","nodeType":"YulLiteral","src":"518:2:19","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"490:3:19"},"nodeType":"YulFunctionCall","src":"490:31:19"},{"name":"_3","nodeType":"YulIdentifier","src":"523:2:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"486:3:19"},"nodeType":"YulFunctionCall","src":"486:40:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"474:3:19"},"nodeType":"YulFunctionCall","src":"474:53:19"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"460:10:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"586:22:19","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"588:16:19"},"nodeType":"YulFunctionCall","src":"588:18:19"},"nodeType":"YulExpressionStatement","src":"588:18:19"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"545:10:19"},{"name":"_2","nodeType":"YulIdentifier","src":"557:2:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"542:2:19"},"nodeType":"YulFunctionCall","src":"542:18:19"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"565:10:19"},{"name":"memPtr","nodeType":"YulIdentifier","src":"577:6:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"562:2:19"},"nodeType":"YulFunctionCall","src":"562:22:19"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"539:2:19"},"nodeType":"YulFunctionCall","src":"539:46:19"},"nodeType":"YulIf","src":"536:72:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"624:2:19","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"628:10:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"617:6:19"},"nodeType":"YulFunctionCall","src":"617:22:19"},"nodeType":"YulExpressionStatement","src":"617:22:19"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"655:6:19"},{"name":"_1","nodeType":"YulIdentifier","src":"663:2:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"648:6:19"},"nodeType":"YulFunctionCall","src":"648:18:19"},"nodeType":"YulExpressionStatement","src":"648:18:19"},{"nodeType":"YulVariableDeclaration","src":"675:14:19","value":{"kind":"number","nodeType":"YulLiteral","src":"685:4:19","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"679:2:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"735:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"744:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"747:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"737:6:19"},"nodeType":"YulFunctionCall","src":"737:12:19"},"nodeType":"YulExpressionStatement","src":"737:12:19"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"712:6:19"},{"name":"_1","nodeType":"YulIdentifier","src":"720:2:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"708:3:19"},"nodeType":"YulFunctionCall","src":"708:15:19"},{"name":"_4","nodeType":"YulIdentifier","src":"725:2:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"704:3:19"},"nodeType":"YulFunctionCall","src":"704:24:19"},{"name":"end","nodeType":"YulIdentifier","src":"730:3:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"701:2:19"},"nodeType":"YulFunctionCall","src":"701:33:19"},"nodeType":"YulIf","src":"698:53:19"},{"nodeType":"YulVariableDeclaration","src":"760:10:19","value":{"kind":"number","nodeType":"YulLiteral","src":"769:1:19","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"764:1:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"825:87:19","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"854:6:19"},{"name":"i","nodeType":"YulIdentifier","src":"862:1:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"850:3:19"},"nodeType":"YulFunctionCall","src":"850:14:19"},{"name":"_4","nodeType":"YulIdentifier","src":"866:2:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"846:3:19"},"nodeType":"YulFunctionCall","src":"846:23:19"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"885:6:19"},{"name":"i","nodeType":"YulIdentifier","src":"893:1:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"881:3:19"},"nodeType":"YulFunctionCall","src":"881:14:19"},{"name":"_4","nodeType":"YulIdentifier","src":"897:2:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"877:3:19"},"nodeType":"YulFunctionCall","src":"877:23:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"871:5:19"},"nodeType":"YulFunctionCall","src":"871:30:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"839:6:19"},"nodeType":"YulFunctionCall","src":"839:63:19"},"nodeType":"YulExpressionStatement","src":"839:63:19"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"790:1:19"},{"name":"_1","nodeType":"YulIdentifier","src":"793:2:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"787:2:19"},"nodeType":"YulFunctionCall","src":"787:9:19"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"797:19:19","statements":[{"nodeType":"YulAssignment","src":"799:15:19","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"808:1:19"},{"name":"_4","nodeType":"YulIdentifier","src":"811:2:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"804:3:19"},"nodeType":"YulFunctionCall","src":"804:10:19"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"799:1:19"}]}]},"pre":{"nodeType":"YulBlock","src":"783:3:19","statements":[]},"src":"779:133:19"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"936:6:19"},{"name":"_1","nodeType":"YulIdentifier","src":"944:2:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"932:3:19"},"nodeType":"YulFunctionCall","src":"932:15:19"},{"name":"_4","nodeType":"YulIdentifier","src":"949:2:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"928:3:19"},"nodeType":"YulFunctionCall","src":"928:24:19"},{"kind":"number","nodeType":"YulLiteral","src":"954:1:19","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"921:6:19"},"nodeType":"YulFunctionCall","src":"921:35:19"},"nodeType":"YulExpressionStatement","src":"921:35:19"},{"nodeType":"YulAssignment","src":"965:15:19","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"974:6:19"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"965:5:19"}]}]},"name":"abi_decode_string_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"184:6:19","type":""},{"name":"end","nodeType":"YulTypedName","src":"192:3:19","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"200:5:19","type":""}],"src":"146:840:19"},{"body":{"nodeType":"YulBlock","src":"1136:621:19","statements":[{"body":{"nodeType":"YulBlock","src":"1182:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1191:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1194:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1184:6:19"},"nodeType":"YulFunctionCall","src":"1184:12:19"},"nodeType":"YulExpressionStatement","src":"1184:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1157:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"1166:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1153:3:19"},"nodeType":"YulFunctionCall","src":"1153:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"1178:2:19","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1149:3:19"},"nodeType":"YulFunctionCall","src":"1149:32:19"},"nodeType":"YulIf","src":"1146:52:19"},{"nodeType":"YulVariableDeclaration","src":"1207:30:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1227:9:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1221:5:19"},"nodeType":"YulFunctionCall","src":"1221:16:19"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1211:6:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1246:28:19","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1264:2:19","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1268:1:19","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1260:3:19"},"nodeType":"YulFunctionCall","src":"1260:10:19"},{"kind":"number","nodeType":"YulLiteral","src":"1272:1:19","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1256:3:19"},"nodeType":"YulFunctionCall","src":"1256:18:19"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1250:2:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"1301:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1310:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1313:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1303:6:19"},"nodeType":"YulFunctionCall","src":"1303:12:19"},"nodeType":"YulExpressionStatement","src":"1303:12:19"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1289:6:19"},{"name":"_1","nodeType":"YulIdentifier","src":"1297:2:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1286:2:19"},"nodeType":"YulFunctionCall","src":"1286:14:19"},"nodeType":"YulIf","src":"1283:34:19"},{"nodeType":"YulAssignment","src":"1326:71:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1369:9:19"},{"name":"offset","nodeType":"YulIdentifier","src":"1380:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1365:3:19"},"nodeType":"YulFunctionCall","src":"1365:22:19"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1389:7:19"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1336:28:19"},"nodeType":"YulFunctionCall","src":"1336:61:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1326:6:19"}]},{"nodeType":"YulVariableDeclaration","src":"1406:41:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1432:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1443:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1428:3:19"},"nodeType":"YulFunctionCall","src":"1428:18:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1422:5:19"},"nodeType":"YulFunctionCall","src":"1422:25:19"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1410:8:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"1476:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1485:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1488:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1478:6:19"},"nodeType":"YulFunctionCall","src":"1478:12:19"},"nodeType":"YulExpressionStatement","src":"1478:12:19"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1462:8:19"},{"name":"_1","nodeType":"YulIdentifier","src":"1472:2:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1459:2:19"},"nodeType":"YulFunctionCall","src":"1459:16:19"},"nodeType":"YulIf","src":"1456:36:19"},{"nodeType":"YulAssignment","src":"1501:73:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1544:9:19"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1555:8:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1540:3:19"},"nodeType":"YulFunctionCall","src":"1540:24:19"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1566:7:19"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1511:28:19"},"nodeType":"YulFunctionCall","src":"1511:63:19"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1501:6:19"}]},{"nodeType":"YulVariableDeclaration","src":"1583:41:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1609:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1620:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1605:3:19"},"nodeType":"YulFunctionCall","src":"1605:18:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1599:5:19"},"nodeType":"YulFunctionCall","src":"1599:25:19"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"1587:8:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"1653:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1662:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1665:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1655:6:19"},"nodeType":"YulFunctionCall","src":"1655:12:19"},"nodeType":"YulExpressionStatement","src":"1655:12:19"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"1639:8:19"},{"name":"_1","nodeType":"YulIdentifier","src":"1649:2:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1636:2:19"},"nodeType":"YulFunctionCall","src":"1636:16:19"},"nodeType":"YulIf","src":"1633:36:19"},{"nodeType":"YulAssignment","src":"1678:73:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1721:9:19"},{"name":"offset_2","nodeType":"YulIdentifier","src":"1732:8:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1717:3:19"},"nodeType":"YulFunctionCall","src":"1717:24:19"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1743:7:19"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1688:28:19"},"nodeType":"YulFunctionCall","src":"1688:63:19"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1678:6:19"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1086:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1097:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1109:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1117:6:19","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1125:6:19","type":""}],"src":"991:766:19"},{"body":{"nodeType":"YulBlock","src":"1817:325:19","statements":[{"nodeType":"YulAssignment","src":"1827:22:19","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1841:1:19","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"1844:4:19"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1837:3:19"},"nodeType":"YulFunctionCall","src":"1837:12:19"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1827:6:19"}]},{"nodeType":"YulVariableDeclaration","src":"1858:38:19","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1888:4:19"},{"kind":"number","nodeType":"YulLiteral","src":"1894:1:19","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1884:3:19"},"nodeType":"YulFunctionCall","src":"1884:12:19"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"1862:18:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"1935:31:19","statements":[{"nodeType":"YulAssignment","src":"1937:27:19","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1951:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"1959:4:19","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1947:3:19"},"nodeType":"YulFunctionCall","src":"1947:17:19"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1937:6:19"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1915:18:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1908:6:19"},"nodeType":"YulFunctionCall","src":"1908:26:19"},"nodeType":"YulIf","src":"1905:61:19"},{"body":{"nodeType":"YulBlock","src":"2025:111:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2046:1:19","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2053:3:19","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2058:10:19","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2049:3:19"},"nodeType":"YulFunctionCall","src":"2049:20:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2039:6:19"},"nodeType":"YulFunctionCall","src":"2039:31:19"},"nodeType":"YulExpressionStatement","src":"2039:31:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2090:1:19","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2093:4:19","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2083:6:19"},"nodeType":"YulFunctionCall","src":"2083:15:19"},"nodeType":"YulExpressionStatement","src":"2083:15:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2118:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2121:4:19","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2111:6:19"},"nodeType":"YulFunctionCall","src":"2111:15:19"},"nodeType":"YulExpressionStatement","src":"2111:15:19"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1981:18:19"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2004:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"2012:2:19","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2001:2:19"},"nodeType":"YulFunctionCall","src":"2001:14:19"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1978:2:19"},"nodeType":"YulFunctionCall","src":"1978:38:19"},"nodeType":"YulIf","src":"1975:161:19"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1797:4:19","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1806:6:19","type":""}],"src":"1762:380:19"},{"body":{"nodeType":"YulBlock","src":"2203:65:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2220:1:19","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"2223:3:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2213:6:19"},"nodeType":"YulFunctionCall","src":"2213:14:19"},"nodeType":"YulExpressionStatement","src":"2213:14:19"},{"nodeType":"YulAssignment","src":"2236:26:19","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2254:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2257:4:19","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2244:9:19"},"nodeType":"YulFunctionCall","src":"2244:18:19"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"2236:4:19"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"2186:3:19","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"2194:4:19","type":""}],"src":"2147:121:19"},{"body":{"nodeType":"YulBlock","src":"2354:464:19","statements":[{"body":{"nodeType":"YulBlock","src":"2387:425:19","statements":[{"nodeType":"YulVariableDeclaration","src":"2401:11:19","value":{"kind":"number","nodeType":"YulLiteral","src":"2411:1:19","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2405:2:19","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2432:2:19"},{"name":"array","nodeType":"YulIdentifier","src":"2436:5:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2425:6:19"},"nodeType":"YulFunctionCall","src":"2425:17:19"},"nodeType":"YulExpressionStatement","src":"2425:17:19"},{"nodeType":"YulVariableDeclaration","src":"2455:31:19","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2477:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"2481:4:19","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2467:9:19"},"nodeType":"YulFunctionCall","src":"2467:19:19"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"2459:4:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2499:57:19","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2522:4:19"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2532:1:19","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2539:10:19"},{"kind":"number","nodeType":"YulLiteral","src":"2551:2:19","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2535:3:19"},"nodeType":"YulFunctionCall","src":"2535:19:19"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2528:3:19"},"nodeType":"YulFunctionCall","src":"2528:27:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2518:3:19"},"nodeType":"YulFunctionCall","src":"2518:38:19"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"2503:11:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"2593:23:19","statements":[{"nodeType":"YulAssignment","src":"2595:19:19","value":{"name":"data","nodeType":"YulIdentifier","src":"2610:4:19"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"2595:11:19"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2575:10:19"},{"kind":"number","nodeType":"YulLiteral","src":"2587:4:19","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2572:2:19"},"nodeType":"YulFunctionCall","src":"2572:20:19"},"nodeType":"YulIf","src":"2569:47:19"},{"nodeType":"YulVariableDeclaration","src":"2629:41:19","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2643:4:19"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2653:1:19","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2660:3:19"},{"kind":"number","nodeType":"YulLiteral","src":"2665:2:19","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2656:3:19"},"nodeType":"YulFunctionCall","src":"2656:12:19"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2649:3:19"},"nodeType":"YulFunctionCall","src":"2649:20:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2639:3:19"},"nodeType":"YulFunctionCall","src":"2639:31:19"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2633:2:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2683:24:19","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"2696:11:19"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"2687:5:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"2781:21:19","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2790:5:19"},{"name":"_1","nodeType":"YulIdentifier","src":"2797:2:19"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2783:6:19"},"nodeType":"YulFunctionCall","src":"2783:17:19"},"nodeType":"YulExpressionStatement","src":"2783:17:19"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2731:5:19"},{"name":"_2","nodeType":"YulIdentifier","src":"2738:2:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2728:2:19"},"nodeType":"YulFunctionCall","src":"2728:13:19"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2742:26:19","statements":[{"nodeType":"YulAssignment","src":"2744:22:19","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2757:5:19"},{"kind":"number","nodeType":"YulLiteral","src":"2764:1:19","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2753:3:19"},"nodeType":"YulFunctionCall","src":"2753:13:19"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"2744:5:19"}]}]},"pre":{"nodeType":"YulBlock","src":"2724:3:19","statements":[]},"src":"2720:82:19"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2370:3:19"},{"kind":"number","nodeType":"YulLiteral","src":"2375:2:19","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2367:2:19"},"nodeType":"YulFunctionCall","src":"2367:11:19"},"nodeType":"YulIf","src":"2364:448:19"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"2326:5:19","type":""},{"name":"len","nodeType":"YulTypedName","src":"2333:3:19","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"2338:10:19","type":""}],"src":"2273:545:19"},{"body":{"nodeType":"YulBlock","src":"2908:81:19","statements":[{"nodeType":"YulAssignment","src":"2918:65:19","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2933:4:19"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2951:1:19","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"2954:3:19"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2947:3:19"},"nodeType":"YulFunctionCall","src":"2947:11:19"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2964:1:19","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2960:3:19"},"nodeType":"YulFunctionCall","src":"2960:6:19"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2943:3:19"},"nodeType":"YulFunctionCall","src":"2943:24:19"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2939:3:19"},"nodeType":"YulFunctionCall","src":"2939:29:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2929:3:19"},"nodeType":"YulFunctionCall","src":"2929:40:19"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2975:1:19","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"2978:3:19"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2971:3:19"},"nodeType":"YulFunctionCall","src":"2971:11:19"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2926:2:19"},"nodeType":"YulFunctionCall","src":"2926:57:19"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"2918:4:19"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2885:4:19","type":""},{"name":"len","nodeType":"YulTypedName","src":"2891:3:19","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"2899:4:19","type":""}],"src":"2823:166:19"},{"body":{"nodeType":"YulBlock","src":"3090:1256:19","statements":[{"nodeType":"YulVariableDeclaration","src":"3100:24:19","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3120:3:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3114:5:19"},"nodeType":"YulFunctionCall","src":"3114:10:19"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"3104:6:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"3167:22:19","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3169:16:19"},"nodeType":"YulFunctionCall","src":"3169:18:19"},"nodeType":"YulExpressionStatement","src":"3169:18:19"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3139:6:19"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3155:2:19","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"3159:1:19","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3151:3:19"},"nodeType":"YulFunctionCall","src":"3151:10:19"},{"kind":"number","nodeType":"YulLiteral","src":"3163:1:19","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3147:3:19"},"nodeType":"YulFunctionCall","src":"3147:18:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3136:2:19"},"nodeType":"YulFunctionCall","src":"3136:30:19"},"nodeType":"YulIf","src":"3133:56:19"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3242:4:19"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3280:4:19"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"3274:5:19"},"nodeType":"YulFunctionCall","src":"3274:11:19"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"3248:25:19"},"nodeType":"YulFunctionCall","src":"3248:38:19"},{"name":"newLen","nodeType":"YulIdentifier","src":"3288:6:19"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"3198:43:19"},"nodeType":"YulFunctionCall","src":"3198:97:19"},"nodeType":"YulExpressionStatement","src":"3198:97:19"},{"nodeType":"YulVariableDeclaration","src":"3304:18:19","value":{"kind":"number","nodeType":"YulLiteral","src":"3321:1:19","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"3308:9:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3331:23:19","value":{"kind":"number","nodeType":"YulLiteral","src":"3350:4:19","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"3335:11:19","type":""}]},{"nodeType":"YulAssignment","src":"3363:24:19","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3376:11:19"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3363:9:19"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"3433:656:19","statements":[{"nodeType":"YulVariableDeclaration","src":"3447:35:19","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3466:6:19"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3478:2:19","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3474:3:19"},"nodeType":"YulFunctionCall","src":"3474:7:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3462:3:19"},"nodeType":"YulFunctionCall","src":"3462:20:19"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"3451:7:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3495:49:19","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3539:4:19"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"3509:29:19"},"nodeType":"YulFunctionCall","src":"3509:35:19"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"3499:6:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3557:10:19","value":{"kind":"number","nodeType":"YulLiteral","src":"3566:1:19","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3561:1:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"3644:172:19","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3669:6:19"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3687:3:19"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3692:9:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3683:3:19"},"nodeType":"YulFunctionCall","src":"3683:19:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3677:5:19"},"nodeType":"YulFunctionCall","src":"3677:26:19"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3662:6:19"},"nodeType":"YulFunctionCall","src":"3662:42:19"},"nodeType":"YulExpressionStatement","src":"3662:42:19"},{"nodeType":"YulAssignment","src":"3721:24:19","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3735:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"3743:1:19","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3731:3:19"},"nodeType":"YulFunctionCall","src":"3731:14:19"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3721:6:19"}]},{"nodeType":"YulAssignment","src":"3762:40:19","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3779:9:19"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3790:11:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3775:3:19"},"nodeType":"YulFunctionCall","src":"3775:27:19"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3762:9:19"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3591:1:19"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"3594:7:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3588:2:19"},"nodeType":"YulFunctionCall","src":"3588:14:19"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3603:28:19","statements":[{"nodeType":"YulAssignment","src":"3605:24:19","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3614:1:19"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3617:11:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3610:3:19"},"nodeType":"YulFunctionCall","src":"3610:19:19"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3605:1:19"}]}]},"pre":{"nodeType":"YulBlock","src":"3584:3:19","statements":[]},"src":"3580:236:19"},{"body":{"nodeType":"YulBlock","src":"3864:166:19","statements":[{"nodeType":"YulVariableDeclaration","src":"3882:43:19","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3909:3:19"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3914:9:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3905:3:19"},"nodeType":"YulFunctionCall","src":"3905:19:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3899:5:19"},"nodeType":"YulFunctionCall","src":"3899:26:19"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"3886:9:19","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3949:6:19"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"3961:9:19"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3988:1:19","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"3991:6:19"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3984:3:19"},"nodeType":"YulFunctionCall","src":"3984:14:19"},{"kind":"number","nodeType":"YulLiteral","src":"4000:3:19","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3980:3:19"},"nodeType":"YulFunctionCall","src":"3980:24:19"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4010:1:19","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4006:3:19"},"nodeType":"YulFunctionCall","src":"4006:6:19"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3976:3:19"},"nodeType":"YulFunctionCall","src":"3976:37:19"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3972:3:19"},"nodeType":"YulFunctionCall","src":"3972:42:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3957:3:19"},"nodeType":"YulFunctionCall","src":"3957:58:19"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3942:6:19"},"nodeType":"YulFunctionCall","src":"3942:74:19"},"nodeType":"YulExpressionStatement","src":"3942:74:19"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"3835:7:19"},{"name":"newLen","nodeType":"YulIdentifier","src":"3844:6:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3832:2:19"},"nodeType":"YulFunctionCall","src":"3832:19:19"},"nodeType":"YulIf","src":"3829:201:19"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4050:4:19"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4064:1:19","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"4067:6:19"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4060:3:19"},"nodeType":"YulFunctionCall","src":"4060:14:19"},{"kind":"number","nodeType":"YulLiteral","src":"4076:1:19","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4056:3:19"},"nodeType":"YulFunctionCall","src":"4056:22:19"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4043:6:19"},"nodeType":"YulFunctionCall","src":"4043:36:19"},"nodeType":"YulExpressionStatement","src":"4043:36:19"}]},"nodeType":"YulCase","src":"3426:663:19","value":{"kind":"number","nodeType":"YulLiteral","src":"3431:1:19","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"4106:234:19","statements":[{"nodeType":"YulVariableDeclaration","src":"4120:14:19","value":{"kind":"number","nodeType":"YulLiteral","src":"4133:1:19","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4124:5:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"4169:67:19","statements":[{"nodeType":"YulAssignment","src":"4187:35:19","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4206:3:19"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4211:9:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4202:3:19"},"nodeType":"YulFunctionCall","src":"4202:19:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4196:5:19"},"nodeType":"YulFunctionCall","src":"4196:26:19"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4187:5:19"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"4150:6:19"},"nodeType":"YulIf","src":"4147:89:19"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4256:4:19"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4315:5:19"},{"name":"newLen","nodeType":"YulIdentifier","src":"4322:6:19"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"4262:52:19"},"nodeType":"YulFunctionCall","src":"4262:67:19"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4249:6:19"},"nodeType":"YulFunctionCall","src":"4249:81:19"},"nodeType":"YulExpressionStatement","src":"4249:81:19"}]},"nodeType":"YulCase","src":"4098:242:19","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3406:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"3414:2:19","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3403:2:19"},"nodeType":"YulFunctionCall","src":"3403:14:19"},"nodeType":"YulSwitch","src":"3396:944:19"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"3075:4:19","type":""},{"name":"src","nodeType":"YulTypedName","src":"3081:3:19","type":""}],"src":"2994:1352:19"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        mstore(add(add(memPtr, _1), _4), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n        let offset_2 := mload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value2 := abi_decode_string_fromMemory(add(headStart, offset_2), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":19,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b50604051620028a3380380620028a3833981016040819052620000349162000190565b828262000041336200007b565b60016200004f8382620002b0565b5060026200005e8282620002b0565b50600b91506200007190508282620002b0565b505050506200037c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620000f357600080fd5b81516001600160401b0380821115620001105762000110620000cb565b604051601f8301601f19908116603f011681019082821181831017156200013b576200013b620000cb565b816040528381526020925086838588010111156200015857600080fd5b600091505b838210156200017c57858201830151818301840152908201906200015d565b600093810190920192909252949350505050565b600080600060608486031215620001a657600080fd5b83516001600160401b0380821115620001be57600080fd5b620001cc87838801620000e1565b94506020860151915080821115620001e357600080fd5b620001f187838801620000e1565b935060408601519150808211156200020857600080fd5b506200021786828701620000e1565b9150509250925092565b600181811c908216806200023657607f821691505b6020821081036200025757634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002ab57600081815260208120601f850160051c81016020861015620002865750805b601f850160051c820191505b81811015620002a75782815560010162000292565b5050505b505050565b81516001600160401b03811115620002cc57620002cc620000cb565b620002e481620002dd845462000221565b846200025d565b602080601f8311600181146200031c5760008415620003035750858301515b600019600386901b1c1916600185901b178555620002a7565b600085815260208120601f198616915b828110156200034d578886015182559484019460019091019084016200032c565b50858210156200036c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612517806200038c6000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063601219b71161010457806395d89b41116100a2578063c87b56dd11610071578063c87b56dd146103b7578063e985e9c5146103ca578063f2fde38b14610406578063f46eccc41461041957600080fd5b806395d89b4114610376578063983b2d561461037e578063a22cb46514610391578063b88d4fde146103a457600080fd5b80636c0360eb116100de5780636c0360eb1461034257806370a082311461034a578063715018a61461035d5780638da5cb5b1461036557600080fd5b8063601219b7146103095780636352211e1461031c5780636b8ff5741461032f57600080fd5b806323b872dd1161017157806342842e0e1161014b57806342842e0e146102bd5780634622ab03146102d05780634f6ccce7146102e357806355f804b3146102f657600080fd5b806323b872dd146102845780632f745c59146102975780633092afd5146102aa57600080fd5b8063095ea7b3116101ad578063095ea7b31461023c578063150306331461025157806318160ddd146102595780631e7663bc1461026b57600080fd5b806301ffc9a7146101d457806306fdde03146101fc578063081812fc14610211575b600080fd5b6101e76101e2366004611c56565b61043c565b60405190151581526020015b60405180910390f35b6102046104b4565b6040516101f39190611ce1565b61022461021f366004611cf4565b610546565b6040516001600160a01b0390911681526020016101f3565b61024f61024a366004611d29565b61056d565b005b6102046106a3565b6009545b6040519081526020016101f3565b61025d610279366004611e36565b805160209091012090565b61024f610292366004611e6b565b610731565b61025d6102a5366004611d29565b6107b8565b61024f6102b8366004611ea7565b610863565b61024f6102cb366004611e6b565b6108d2565b6102046102de366004611cf4565b6108ed565b61025d6102f1366004611cf4565b610906565b61024f610304366004611ec2565b6109aa565b61024f610317366004611f34565b6109bf565b61022461032a366004611cf4565b6109e6565b61020461033d366004611cf4565b610a4b565b610204610aef565b61025d610358366004611ea7565b610afc565b61024f610b96565b6000546001600160a01b0316610224565b610204610baa565b61024f61038c366004611ea7565b610bb9565b61024f61039f366004611f8b565b610c2b565b61024f6103b2366004611fc7565b610c3a565b6102046103c5366004611cf4565b610cc8565b6101e76103d8366004612043565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b61024f610414366004611ea7565b610d36565b6101e7610427366004611ea7565b600e6020526000908152604090205460ff1681565b60008061044883610dc6565b905080156104595750600192915050565b7f87f1629d000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008416016104ab5750600192915050565b50600092915050565b6060600180546104c390612076565b80601f01602080910402602001604051908101604052809291908181526020018280546104ef90612076565b801561053c5780601f106105115761010080835404028352916020019161053c565b820191906000526020600020905b81548152906001019060200180831161051f57829003601f168201915b5050505050905090565b600061055182610e1c565b506000908152600560205260409020546001600160a01b031690565b6000610578826109e6565b9050806001600160a01b0316836001600160a01b0316036106065760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b0382161480610622575061062281336103d8565b6106945760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016105fd565b61069e8383610e80565b505050565b600b80546106b090612076565b80601f01602080910402602001604051908101604052809291908181526020018280546106dc90612076565b80156107295780601f106106fe57610100808354040283529160200191610729565b820191906000526020600020905b81548152906001019060200180831161070c57829003601f168201915b505050505081565b61073b3382610f06565b6107ad5760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f7665640000000000000000000000000000000000000060648201526084016105fd565b61069e838383610f85565b60006107c383610afc565b82106108375760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e647300000000000000000000000000000000000000000060648201526084016105fd565b506001600160a01b03821660009081526007602090815260408083208484529091529020545b92915050565b61086b6111f1565b6001600160a01b0381166000818152600e602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055517fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb666929190a250565b61069e83838360405180602001604052806000815250610c3a565b600d60205260009081526040902080546106b090612076565b600061091160095490565b82106109855760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e6473000000000000000000000000000000000000000060648201526084016105fd565b60098281548110610998576109986120c9565b90600052602060002001549050919050565b6109b26111f1565b600c61069e828483612146565b336000908152600e602052604090205460ff166109db57600080fd5b61069e83838361124b565b6000818152600360205260408120546001600160a01b03168061085d5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016105fd565b6000818152600d6020526040812080546060929190610a6990612076565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9590612076565b8015610ae25780601f10610ab757610100808354040283529160200191610ae2565b820191906000526020600020905b815481529060010190602001808311610ac557829003601f168201915b5093979650505050505050565b600c80546106b090612076565b60006001600160a01b038216610b7a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e6572000000000000000000000000000000000000000000000060648201526084016105fd565b506001600160a01b031660009081526004602052604090205490565b610b9e6111f1565b610ba8600061130d565b565b6060600280546104c390612076565b610bc16111f1565b6001600160a01b0381166000818152600e602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f69190a250565b610c36338383611375565b5050565b610c443383610f06565b610cb65760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f7665640000000000000000000000000000000000000060648201526084016105fd565b610cc284848484611461565b50505050565b6060610cd382610e1c565b6000610cde83610a4b565b90506000600c8054610cef90612076565b905011610d0b5760405180602001604052806000815250610d2f565b600c81604051602001610d1f929190612260565b6040516020818303038152906040525b9392505050565b610d3e6111f1565b6001600160a01b038116610dba5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016105fd565b610dc38161130d565b50565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d6300000000000000000000000000000000000000000000000000000000148061085d575061085d826114ea565b6000818152600360205260409020546001600160a01b0316610dc35760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016105fd565b600081815260056020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384169081179091558190610ecd826109e6565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610f12836109e6565b9050806001600160a01b0316846001600160a01b03161480610f5957506001600160a01b0380821660009081526006602090815260408083209388168352929052205460ff165b80610f7d5750836001600160a01b0316610f7284610546565b6001600160a01b0316145b949350505050565b826001600160a01b0316610f98826109e6565b6001600160a01b0316146110145760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016105fd565b6001600160a01b03821661108f5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016105fd565b61109c83838360016115cd565b826001600160a01b03166110af826109e6565b6001600160a01b03161461112b5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016105fd565b600081815260056020908152604080832080547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001600160a01b038781168086526004855283862080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01905590871680865283862080546001019055868652600390945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000546001600160a01b03163314610ba85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105fd565b6000838152600360205260409020546001600160a01b0316156112b05760405162461bcd60e51b815260206004820152601260248201527f416c72656164792072656769737465726564000000000000000000000000000060448201526064016105fd565b6112ba81846115ec565b6000838152600d602052604090206112d28382612305565b506040516001600160a01b0382169084907e834ad8d7a1d8421d149549c7292d11385f5a042a008771d26ffd2d76db6e7490600090a3505050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b816001600160a01b0316836001600160a01b0316036113d65760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016105fd565b6001600160a01b0383811660008181526006602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61146c848484610f85565b6114788484848461179d565b610cc25760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016105fd565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061157d57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061085d57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083161461085d565b6115d683610afc565b156115e057600080fd5b610cc28484848461195c565b6001600160a01b0382166116425760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016105fd565b6000818152600360205260409020546001600160a01b0316156116a75760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016105fd565b6116b56000838360016115cd565b6000818152600360205260409020546001600160a01b03161561171a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016105fd565b6001600160a01b038216600081815260046020908152604080832080546001019055848352600390915280822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b15611951576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a02906117fa90339089908890889060040161241f565b6020604051808303816000875af1925050508015611853575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526118509181019061245b565b60015b611906573d808015611881576040519150601f19603f3d011682016040523d82523d6000602084013e611886565b606091505b5080516000036118fe5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016105fd565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050610f7d565b506001949350505050565b60018111156119d35760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e736563757469766520747260448201527f616e7366657273206e6f7420737570706f72746564000000000000000000000060648201526084016105fd565b816001600160a01b038516611a2f57611a2a81600980546000838152600a60205260408120829055600182018355919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0155565b611a52565b836001600160a01b0316856001600160a01b031614611a5257611a528582611a98565b6001600160a01b038416611a6e57611a6981611b35565b611a91565b846001600160a01b0316846001600160a01b031614611a9157611a918482611be4565b5050505050565b60006001611aa584610afc565b611aaf9190612478565b600083815260086020526040902054909150808214611b02576001600160a01b03841660009081526007602090815260408083208584528252808320548484528184208190558352600890915290208190555b5060009182526008602090815260408084208490556001600160a01b039094168352600781528383209183525290812055565b600954600090611b4790600190612478565b6000838152600a602052604081205460098054939450909284908110611b6f57611b6f6120c9565b906000526020600020015490508060098381548110611b9057611b906120c9565b6000918252602080832090910192909255828152600a90915260408082208490558582528120556009805480611bc857611bc86124b2565b6001900381819060005260206000200160009055905550505050565b6000611bef83610afc565b6001600160a01b039093166000908152600760209081526040808320868452825280832085905593825260089052919091209190915550565b7fffffffff0000000000000000000000000000000000000000000000000000000081168114610dc357600080fd5b600060208284031215611c6857600080fd5b8135610d2f81611c28565b60005b83811015611c8e578181015183820152602001611c76565b50506000910152565b60008151808452611caf816020860160208601611c73565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610d2f6020830184611c97565b600060208284031215611d0657600080fd5b5035919050565b80356001600160a01b0381168114611d2457600080fd5b919050565b60008060408385031215611d3c57600080fd5b611d4583611d0d565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600067ffffffffffffffff80841115611d9d57611d9d611d53565b604051601f85017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715611de357611de3611d53565b81604052809350858152868686011115611dfc57600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112611e2757600080fd5b610d2f83833560208501611d82565b600060208284031215611e4857600080fd5b813567ffffffffffffffff811115611e5f57600080fd5b610f7d84828501611e16565b600080600060608486031215611e8057600080fd5b611e8984611d0d565b9250611e9760208501611d0d565b9150604084013590509250925092565b600060208284031215611eb957600080fd5b610d2f82611d0d565b60008060208385031215611ed557600080fd5b823567ffffffffffffffff80821115611eed57600080fd5b818501915085601f830112611f0157600080fd5b813581811115611f1057600080fd5b866020828501011115611f2257600080fd5b60209290920196919550909350505050565b600080600060608486031215611f4957600080fd5b83359250602084013567ffffffffffffffff811115611f6757600080fd5b611f7386828701611e16565b925050611f8260408501611d0d565b90509250925092565b60008060408385031215611f9e57600080fd5b611fa783611d0d565b915060208301358015158114611fbc57600080fd5b809150509250929050565b60008060008060808587031215611fdd57600080fd5b611fe685611d0d565b9350611ff460208601611d0d565b925060408501359150606085013567ffffffffffffffff81111561201757600080fd5b8501601f8101871361202857600080fd5b61203787823560208401611d82565b91505092959194509250565b6000806040838503121561205657600080fd5b61205f83611d0d565b915061206d60208401611d0d565b90509250929050565b600181811c9082168061208a57607f821691505b6020821081036120c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b601f82111561069e57600081815260208120601f850160051c8101602086101561211f5750805b601f850160051c820191505b8181101561213e5782815560010161212b565b505050505050565b67ffffffffffffffff83111561215e5761215e611d53565b6121728361216c8354612076565b836120f8565b6000601f8411600181146121c4576000851561218e5750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355611a91565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b8281101561221357868501358255602094850194600190920191016121f3565b508682101561224e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b600080845461226e81612076565b6001828116801561228657600181146122b9576122e8565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00841687528215158302870194506122e8565b8860005260208060002060005b858110156122df5781548a8201529084019082016122c6565b50505082870194505b5050505083516122fc818360208801611c73565b01949350505050565b815167ffffffffffffffff81111561231f5761231f611d53565b6123338161232d8454612076565b846120f8565b602080601f83116001811461238657600084156123505750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b17855561213e565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b828110156123d3578886015182559484019460019091019084016123b4565b508582101561240f57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b60006001600160a01b038087168352808616602084015250836040830152608060608301526124516080830184611c97565b9695505050505050565b60006020828403121561246d57600080fd5b8151610d2f81611c28565b8181038181111561085d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212200d7d7d1f56bf255a9cb4d276265c096797d3658b32fbfa306b6b551ea9cc46b064736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x28A3 CODESIZE SUB DUP1 PUSH3 0x28A3 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x190 JUMP JUMPDEST DUP3 DUP3 PUSH3 0x41 CALLER PUSH3 0x7B JUMP JUMPDEST PUSH1 0x1 PUSH3 0x4F DUP4 DUP3 PUSH3 0x2B0 JUMP JUMPDEST POP PUSH1 0x2 PUSH3 0x5E DUP3 DUP3 PUSH3 0x2B0 JUMP JUMPDEST POP PUSH1 0xB SWAP2 POP PUSH3 0x71 SWAP1 POP DUP3 DUP3 PUSH3 0x2B0 JUMP JUMPDEST POP POP POP POP PUSH3 0x37C JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0xF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x110 JUMPI PUSH3 0x110 PUSH3 0xCB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x13B JUMPI PUSH3 0x13B PUSH3 0xCB JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x158 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x17C JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x15D JUMP JUMPDEST PUSH1 0x0 SWAP4 DUP2 ADD SWAP1 SWAP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x1A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x1BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1CC DUP8 DUP4 DUP9 ADD PUSH3 0xE1 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x1E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1F1 DUP8 DUP4 DUP9 ADD PUSH3 0xE1 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x208 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x217 DUP7 DUP3 DUP8 ADD PUSH3 0xE1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x236 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x257 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x2AB JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x286 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x2A7 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x292 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x2CC JUMPI PUSH3 0x2CC PUSH3 0xCB JUMP JUMPDEST PUSH3 0x2E4 DUP2 PUSH3 0x2DD DUP5 SLOAD PUSH3 0x221 JUMP JUMPDEST DUP5 PUSH3 0x25D JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x31C JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x303 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x2A7 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x34D JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x32C JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x36C JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x2517 DUP1 PUSH3 0x38C PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1CF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x601219B7 GT PUSH2 0x104 JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xC87B56DD GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x3B7 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x3CA JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x406 JUMPI DUP1 PUSH4 0xF46ECCC4 EQ PUSH2 0x419 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x376 JUMPI DUP1 PUSH4 0x983B2D56 EQ PUSH2 0x37E JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x391 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x3A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6C0360EB GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x6C0360EB EQ PUSH2 0x342 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x34A JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x35D JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x365 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x601219B7 EQ PUSH2 0x309 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x31C JUMPI DUP1 PUSH4 0x6B8FF574 EQ PUSH2 0x32F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x171 JUMPI DUP1 PUSH4 0x42842E0E GT PUSH2 0x14B JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x2BD JUMPI DUP1 PUSH4 0x4622AB03 EQ PUSH2 0x2D0 JUMPI DUP1 PUSH4 0x4F6CCCE7 EQ PUSH2 0x2E3 JUMPI DUP1 PUSH4 0x55F804B3 EQ PUSH2 0x2F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD EQ PUSH2 0x284 JUMPI DUP1 PUSH4 0x2F745C59 EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0x3092AFD5 EQ PUSH2 0x2AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0x1AD JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0x15030633 EQ PUSH2 0x251 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x259 JUMPI DUP1 PUSH4 0x1E7663BC EQ PUSH2 0x26B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x211 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E7 PUSH2 0x1E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C56 JUMP JUMPDEST PUSH2 0x43C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x204 PUSH2 0x4B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0x1CE1 JUMP JUMPDEST PUSH2 0x224 PUSH2 0x21F CALLDATASIZE PUSH1 0x4 PUSH2 0x1CF4 JUMP JUMPDEST PUSH2 0x546 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x24A CALLDATASIZE PUSH1 0x4 PUSH2 0x1D29 JUMP JUMPDEST PUSH2 0x56D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x204 PUSH2 0x6A3 JUMP JUMPDEST PUSH1 0x9 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH2 0x25D PUSH2 0x279 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E36 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x292 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E6B JUMP JUMPDEST PUSH2 0x731 JUMP JUMPDEST PUSH2 0x25D PUSH2 0x2A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D29 JUMP JUMPDEST PUSH2 0x7B8 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x2B8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EA7 JUMP JUMPDEST PUSH2 0x863 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x2CB CALLDATASIZE PUSH1 0x4 PUSH2 0x1E6B JUMP JUMPDEST PUSH2 0x8D2 JUMP JUMPDEST PUSH2 0x204 PUSH2 0x2DE CALLDATASIZE PUSH1 0x4 PUSH2 0x1CF4 JUMP JUMPDEST PUSH2 0x8ED JUMP JUMPDEST PUSH2 0x25D PUSH2 0x2F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CF4 JUMP JUMPDEST PUSH2 0x906 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x304 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EC2 JUMP JUMPDEST PUSH2 0x9AA JUMP JUMPDEST PUSH2 0x24F PUSH2 0x317 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F34 JUMP JUMPDEST PUSH2 0x9BF JUMP JUMPDEST PUSH2 0x224 PUSH2 0x32A CALLDATASIZE PUSH1 0x4 PUSH2 0x1CF4 JUMP JUMPDEST PUSH2 0x9E6 JUMP JUMPDEST PUSH2 0x204 PUSH2 0x33D CALLDATASIZE PUSH1 0x4 PUSH2 0x1CF4 JUMP JUMPDEST PUSH2 0xA4B JUMP JUMPDEST PUSH2 0x204 PUSH2 0xAEF JUMP JUMPDEST PUSH2 0x25D PUSH2 0x358 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EA7 JUMP JUMPDEST PUSH2 0xAFC JUMP JUMPDEST PUSH2 0x24F PUSH2 0xB96 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x224 JUMP JUMPDEST PUSH2 0x204 PUSH2 0xBAA JUMP JUMPDEST PUSH2 0x24F PUSH2 0x38C CALLDATASIZE PUSH1 0x4 PUSH2 0x1EA7 JUMP JUMPDEST PUSH2 0xBB9 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x39F CALLDATASIZE PUSH1 0x4 PUSH2 0x1F8B JUMP JUMPDEST PUSH2 0xC2B JUMP JUMPDEST PUSH2 0x24F PUSH2 0x3B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FC7 JUMP JUMPDEST PUSH2 0xC3A JUMP JUMPDEST PUSH2 0x204 PUSH2 0x3C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CF4 JUMP JUMPDEST PUSH2 0xCC8 JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x3D8 CALLDATASIZE PUSH1 0x4 PUSH2 0x2043 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x414 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EA7 JUMP JUMPDEST PUSH2 0xD36 JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x427 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EA7 JUMP JUMPDEST PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x448 DUP4 PUSH2 0xDC6 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x459 JUMPI POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x87F1629D00000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP5 AND ADD PUSH2 0x4AB JUMPI POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x4C3 SWAP1 PUSH2 0x2076 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x4EF SWAP1 PUSH2 0x2076 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x53C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x511 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x53C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x51F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x551 DUP3 PUSH2 0xE1C JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x578 DUP3 PUSH2 0x9E6 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x606 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x622 JUMPI POP PUSH2 0x622 DUP2 CALLER PUSH2 0x3D8 JUMP JUMPDEST PUSH2 0x694 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH2 0x69E DUP4 DUP4 PUSH2 0xE80 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH2 0x6B0 SWAP1 PUSH2 0x2076 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x6DC SWAP1 PUSH2 0x2076 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x729 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x6FE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x729 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x70C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH2 0x73B CALLER DUP3 PUSH2 0xF06 JUMP JUMPDEST PUSH2 0x7AD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH2 0x69E DUP4 DUP4 DUP4 PUSH2 0xF85 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7C3 DUP4 PUSH2 0xAFC JUMP JUMPDEST DUP3 LT PUSH2 0x837 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243373231456E756D657261626C653A206F776E657220696E646578206F75 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x74206F6620626F756E6473000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5FD JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x86B PUSH2 0x11F1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE MLOAD PUSH32 0xE94479A9F7E1952CC78F2D6BAAB678ADC1B772D936C6583DEF489E524CB66692 SWAP2 SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x69E DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xC3A JUMP JUMPDEST PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x6B0 SWAP1 PUSH2 0x2076 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x911 PUSH1 0x9 SLOAD SWAP1 JUMP JUMPDEST DUP3 LT PUSH2 0x985 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243373231456E756D657261626C653A20676C6F62616C20696E646578206F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7574206F6620626F756E64730000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH1 0x9 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x998 JUMPI PUSH2 0x998 PUSH2 0x20C9 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9B2 PUSH2 0x11F1 JUMP JUMPDEST PUSH1 0xC PUSH2 0x69E DUP3 DUP5 DUP4 PUSH2 0x2146 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x9DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x69E DUP4 DUP4 DUP4 PUSH2 0x124B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x85D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP3 SWAP2 SWAP1 PUSH2 0xA69 SWAP1 PUSH2 0x2076 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xA95 SWAP1 PUSH2 0x2076 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xAE2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xAB7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xAE2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xAC5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP SWAP4 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xC DUP1 SLOAD PUSH2 0x6B0 SWAP1 PUSH2 0x2076 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xB7A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5FD JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB9E PUSH2 0x11F1 JUMP JUMPDEST PUSH2 0xBA8 PUSH1 0x0 PUSH2 0x130D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x4C3 SWAP1 PUSH2 0x2076 JUMP JUMPDEST PUSH2 0xBC1 PUSH2 0x11F1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0x6AE172837EA30B801FBFCDD4108AA1D5BF8FF775444FD70256B44E6BF3DFC3F6 SWAP2 SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0xC36 CALLER DUP4 DUP4 PUSH2 0x1375 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xC44 CALLER DUP4 PUSH2 0xF06 JUMP JUMPDEST PUSH2 0xCB6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH2 0xCC2 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1461 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xCD3 DUP3 PUSH2 0xE1C JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCDE DUP4 PUSH2 0xA4B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0xC DUP1 SLOAD PUSH2 0xCEF SWAP1 PUSH2 0x2076 JUMP JUMPDEST SWAP1 POP GT PUSH2 0xD0B JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xD2F JUMP JUMPDEST PUSH1 0xC DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xD1F SWAP3 SWAP2 SWAP1 PUSH2 0x2260 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xD3E PUSH2 0x11F1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xDBA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH2 0xDC3 DUP2 PUSH2 0x130D JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x780E9D6300000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x85D JUMPI POP PUSH2 0x85D DUP3 PUSH2 0x14EA JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xDC3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0xECD DUP3 PUSH2 0x9E6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xF12 DUP4 PUSH2 0x9E6 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0xF59 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST DUP1 PUSH2 0xF7D JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xF72 DUP5 PUSH2 0x546 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xF98 DUP3 PUSH2 0x9E6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1014 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x108F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH2 0x109C DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x15CD JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x10AF DUP3 PUSH2 0x9E6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x112B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x4 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x3 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xBA8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x12B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416C726561647920726567697374657265640000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH2 0x12BA DUP2 DUP5 PUSH2 0x15EC JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x12D2 DUP4 DUP3 PUSH2 0x2305 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP5 SWAP1 PUSH31 0x834AD8D7A1D8421D149549C7292D11385F5A042A008771D26FFD2D76DB6E74 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x13D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x146C DUP5 DUP5 DUP5 PUSH2 0xF85 JUMP JUMPDEST PUSH2 0x1478 DUP5 DUP5 DUP5 DUP5 PUSH2 0x179D JUMP JUMPDEST PUSH2 0xCC2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x157D JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x85D JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND EQ PUSH2 0x85D JUMP JUMPDEST PUSH2 0x15D6 DUP4 PUSH2 0xAFC JUMP JUMPDEST ISZERO PUSH2 0x15E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCC2 DUP5 DUP5 DUP5 DUP5 PUSH2 0x195C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1642 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x16A7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH2 0x16B5 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x15CD JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x171A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP5 DUP4 MSTORE PUSH1 0x3 SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND DUP5 OR SWAP1 SSTORE MLOAD DUP4 SWAP3 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x1951 JUMPI PUSH1 0x40 MLOAD PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x17FA SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x241F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1853 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1850 SWAP2 DUP2 ADD SWAP1 PUSH2 0x245B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1906 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1881 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1886 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x18FE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5FD JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 EQ SWAP1 POP PUSH2 0xF7D JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x19D3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x35 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243373231456E756D657261626C653A20636F6E7365637574697665207472 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616E7366657273206E6F7420737570706F727465640000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5FD JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x1A2F JUMPI PUSH2 0x1A2A DUP2 PUSH1 0x9 DUP1 SLOAD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP3 SWAP1 SSTORE PUSH1 0x1 DUP3 ADD DUP4 SSTORE SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x6E1540171B6C0C960B71A7020D9F60077F6AF931A8BBF590DA0223DACF75C7AF ADD SSTORE JUMP JUMPDEST PUSH2 0x1A52 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1A52 JUMPI PUSH2 0x1A52 DUP6 DUP3 PUSH2 0x1A98 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1A6E JUMPI PUSH2 0x1A69 DUP2 PUSH2 0x1B35 JUMP JUMPDEST PUSH2 0x1A91 JUMP JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1A91 JUMPI PUSH2 0x1A91 DUP5 DUP3 PUSH2 0x1BE4 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x1AA5 DUP5 PUSH2 0xAFC JUMP JUMPDEST PUSH2 0x1AAF SWAP2 SWAP1 PUSH2 0x2478 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP1 DUP3 EQ PUSH2 0x1B02 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SLOAD DUP5 DUP5 MSTORE DUP2 DUP5 KECCAK256 DUP2 SWAP1 SSTORE DUP4 MSTORE PUSH1 0x8 SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP2 SWAP1 SSTORE JUMPDEST POP PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP5 SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP4 MSTORE PUSH1 0x7 DUP2 MSTORE DUP4 DUP4 KECCAK256 SWAP2 DUP4 MSTORE MSTORE SWAP1 DUP2 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x1B47 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x2478 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x9 DUP1 SLOAD SWAP4 SWAP5 POP SWAP1 SWAP3 DUP5 SWAP1 DUP2 LT PUSH2 0x1B6F JUMPI PUSH2 0x1B6F PUSH2 0x20C9 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 PUSH1 0x9 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x1B90 JUMPI PUSH2 0x1B90 PUSH2 0x20C9 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE DUP3 DUP2 MSTORE PUSH1 0xA SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP5 SWAP1 SSTORE DUP6 DUP3 MSTORE DUP2 KECCAK256 SSTORE PUSH1 0x9 DUP1 SLOAD DUP1 PUSH2 0x1BC8 JUMPI PUSH2 0x1BC8 PUSH2 0x24B2 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BEF DUP4 PUSH2 0xAFC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 SWAP1 SSTORE SWAP4 DUP3 MSTORE PUSH1 0x8 SWAP1 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE POP JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xDC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xD2F DUP2 PUSH2 0x1C28 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1C8E JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1C76 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1CAF DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1C73 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xD2F PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1C97 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1D24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D3C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D45 DUP4 PUSH2 0x1D0D JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP5 GT ISZERO PUSH2 0x1D9D JUMPI PUSH2 0x1D9D PUSH2 0x1D53 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP6 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1DE3 JUMPI PUSH2 0x1DE3 PUSH2 0x1D53 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP1 SWAP4 POP DUP6 DUP2 MSTORE DUP7 DUP7 DUP7 ADD GT ISZERO PUSH2 0x1DFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP8 DUP4 ADD ADD MSTORE POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1E27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD2F DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH2 0x1D82 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF7D DUP5 DUP3 DUP6 ADD PUSH2 0x1E16 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1E80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E89 DUP5 PUSH2 0x1D0D JUMP JUMPDEST SWAP3 POP PUSH2 0x1E97 PUSH1 0x20 DUP6 ADD PUSH2 0x1D0D JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD2F DUP3 PUSH2 0x1D0D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1ED5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1EED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1F01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1F10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1F22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1F49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1F67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F73 DUP7 DUP3 DUP8 ADD PUSH2 0x1E16 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x1F82 PUSH1 0x40 DUP6 ADD PUSH2 0x1D0D JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FA7 DUP4 PUSH2 0x1D0D JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1FBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1FDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FE6 DUP6 PUSH2 0x1D0D JUMP JUMPDEST SWAP4 POP PUSH2 0x1FF4 PUSH1 0x20 DUP7 ADD PUSH2 0x1D0D JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2017 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x2028 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2037 DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x1D82 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2056 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x205F DUP4 PUSH2 0x1D0D JUMP JUMPDEST SWAP2 POP PUSH2 0x206D PUSH1 0x20 DUP5 ADD PUSH2 0x1D0D JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x208A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x20C3 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x69E JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x211F JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x213E JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x212B JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x215E JUMPI PUSH2 0x215E PUSH2 0x1D53 JUMP JUMPDEST PUSH2 0x2172 DUP4 PUSH2 0x216C DUP4 SLOAD PUSH2 0x2076 JUMP JUMPDEST DUP4 PUSH2 0x20F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP5 GT PUSH1 0x1 DUP2 EQ PUSH2 0x21C4 JUMPI PUSH1 0x0 DUP6 ISZERO PUSH2 0x218E JUMPI POP DUP4 DUP3 ADD CALLDATALOAD JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x3 DUP8 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP7 SWAP1 SHL OR DUP4 SSTORE PUSH2 0x1A91 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP7 AND SWAP1 DUP4 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2213 JUMPI DUP7 DUP6 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x21F3 JUMP JUMPDEST POP DUP7 DUP3 LT ISZERO PUSH2 0x224E JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP9 PUSH1 0x3 SHL AND SHR NOT DUP5 DUP8 ADD CALLDATALOAD AND DUP2 SSTORE JUMPDEST POP POP PUSH1 0x1 DUP6 PUSH1 0x1 SHL ADD DUP4 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 SLOAD PUSH2 0x226E DUP2 PUSH2 0x2076 JUMP JUMPDEST PUSH1 0x1 DUP3 DUP2 AND DUP1 ISZERO PUSH2 0x2286 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x22B9 JUMPI PUSH2 0x22E8 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP5 AND DUP8 MSTORE DUP3 ISZERO ISZERO DUP4 MUL DUP8 ADD SWAP5 POP PUSH2 0x22E8 JUMP JUMPDEST DUP9 PUSH1 0x0 MSTORE PUSH1 0x20 DUP1 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x22DF JUMPI DUP2 SLOAD DUP11 DUP3 ADD MSTORE SWAP1 DUP5 ADD SWAP1 DUP3 ADD PUSH2 0x22C6 JUMP JUMPDEST POP POP POP DUP3 DUP8 ADD SWAP5 POP JUMPDEST POP POP POP POP DUP4 MLOAD PUSH2 0x22FC DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x1C73 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x231F JUMPI PUSH2 0x231F PUSH2 0x1D53 JUMP JUMPDEST PUSH2 0x2333 DUP2 PUSH2 0x232D DUP5 SLOAD PUSH2 0x2076 JUMP JUMPDEST DUP5 PUSH2 0x20F8 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x2386 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x2350 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x213E JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x23D3 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x23B4 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x240F JUMPI DUP8 DUP6 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP4 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2451 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x1C97 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x246D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xD2F DUP2 PUSH2 0x1C28 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x85D JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD PUSH30 0x7D1F56BF255A9CB4D276265C096797D3658B32FBFA306B6B551EA9CC46B0 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"270:2917:18:-:0;;;774:141;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;862:5;869:7;936:32:0;719:10:8;936:18:0;:32::i;:::-;1456:5:1;:13;1464:5;1456;:13;:::i;:::-;-1:-1:-1;1479:7:1;:17;1489:7;1479;:17;:::i;:::-;-1:-1:-1;888:8:18::1;::::0;-1:-1:-1;888:20:18::1;::::0;-1:-1:-1;899:9:18;888:8;:20:::1;:::i;:::-;;774:141:::0;;;270:2917;;2426:187:0;2499:16;2518:6;;-1:-1:-1;;;;;2534:17:0;;;-1:-1:-1;;;;;;2534:17:0;;;;;;2566:40;;2518:6;;;;;;;2566:40;;2499:16;2566:40;2489:124;2426:187;:::o;14:127:19:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:840;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:19;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:19;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;954:1;932:15;;;928:24;;;921:35;;;;936:6;146:840;-1:-1:-1;;;;146:840:19:o;991:766::-;1109:6;1117;1125;1178:2;1166:9;1157:7;1153:23;1149:32;1146:52;;;1194:1;1191;1184:12;1146:52;1221:16;;-1:-1:-1;;;;;1286:14:19;;;1283:34;;;1313:1;1310;1303:12;1283:34;1336:61;1389:7;1380:6;1369:9;1365:22;1336:61;:::i;:::-;1326:71;;1443:2;1432:9;1428:18;1422:25;1406:41;;1472:2;1462:8;1459:16;1456:36;;;1488:1;1485;1478:12;1456:36;1511:63;1566:7;1555:8;1544:9;1540:24;1511:63;:::i;:::-;1501:73;;1620:2;1609:9;1605:18;1599:25;1583:41;;1649:2;1639:8;1636:16;1633:36;;;1665:1;1662;1655:12;1633:36;;1688:63;1743:7;1732:8;1721:9;1717:24;1688:63;:::i;:::-;1678:73;;;991:766;;;;;:::o;1762:380::-;1841:1;1837:12;;;;1884;;;1905:61;;1959:4;1951:6;1947:17;1937:27;;1905:61;2012:2;2004:6;2001:14;1981:18;1978:38;1975:161;;2058:10;2053:3;2049:20;2046:1;2039:31;2093:4;2090:1;2083:15;2121:4;2118:1;2111:15;1975:161;;1762:380;;;:::o;2273:545::-;2375:2;2370:3;2367:11;2364:448;;;2411:1;2436:5;2432:2;2425:17;2481:4;2477:2;2467:19;2551:2;2539:10;2535:19;2532:1;2528:27;2522:4;2518:38;2587:4;2575:10;2572:20;2569:47;;;-1:-1:-1;2610:4:19;2569:47;2665:2;2660:3;2656:12;2653:1;2649:20;2643:4;2639:31;2629:41;;2720:82;2738:2;2731:5;2728:13;2720:82;;;2783:17;;;2764:1;2753:13;2720:82;;;2724:3;;;2364:448;2273:545;;;:::o;2994:1352::-;3114:10;;-1:-1:-1;;;;;3136:30:19;;3133:56;;;3169:18;;:::i;:::-;3198:97;3288:6;3248:38;3280:4;3274:11;3248:38;:::i;:::-;3242:4;3198:97;:::i;:::-;3350:4;;3414:2;3403:14;;3431:1;3426:663;;;;4133:1;4150:6;4147:89;;;-1:-1:-1;4202:19:19;;;4196:26;4147:89;-1:-1:-1;;2951:1:19;2947:11;;;2943:24;2939:29;2929:40;2975:1;2971:11;;;2926:57;4249:81;;3396:944;;3426:663;2220:1;2213:14;;;2257:4;2244:18;;-1:-1:-1;;3462:20:19;;;3580:236;3594:7;3591:1;3588:14;3580:236;;;3683:19;;;3677:26;3662:42;;3775:27;;;;3743:1;3731:14;;;;3610:19;;3580:236;;;3584:3;3844:6;3835:7;3832:19;3829:201;;;3905:19;;;3899:26;-1:-1:-1;;3988:1:19;3984:14;;;4000:3;3980:24;3976:37;3972:42;3957:58;3942:74;;3829:201;-1:-1:-1;;;;;4076:1:19;4060:14;;;4056:22;4043:36;;-1:-1:-1;2994:1352:19:o;:::-;270:2917:18;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_addTokenToAllTokensEnumeration_1415":{"entryPoint":null,"id":1415,"parameterSlots":1,"returnSlots":0},"@_addTokenToOwnerEnumeration_1395":{"entryPoint":7140,"id":1395,"parameterSlots":2,"returnSlots":0},"@_afterTokenTransfer_1023":{"entryPoint":null,"id":1023,"parameterSlots":4,"returnSlots":0},"@_approve_889":{"entryPoint":3712,"id":889,"parameterSlots":2,"returnSlots":0},"@_beforeTokenTransfer_1010":{"entryPoint":null,"id":1010,"parameterSlots":4,"returnSlots":0},"@_beforeTokenTransfer_1365":{"entryPoint":6492,"id":1365,"parameterSlots":4,"returnSlots":0},"@_beforeTokenTransfer_3932":{"entryPoint":5581,"id":3932,"parameterSlots":4,"returnSlots":0},"@_checkOnERC721Received_997":{"entryPoint":6045,"id":997,"parameterSlots":4,"returnSlots":1},"@_checkOwner_54":{"entryPoint":4593,"id":54,"parameterSlots":0,"returnSlots":0},"@_exists_558":{"entryPoint":null,"id":558,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_592":{"entryPoint":3846,"id":592,"parameterSlots":2,"returnSlots":1},"@_mint_713":{"entryPoint":5612,"id":713,"parameterSlots":2,"returnSlots":0},"@_msgSender_1927":{"entryPoint":null,"id":1927,"parameterSlots":0,"returnSlots":1},"@_ownerOf_540":{"entryPoint":null,"id":540,"parameterSlots":1,"returnSlots":1},"@_register_4021":{"entryPoint":4683,"id":4021,"parameterSlots":3,"returnSlots":0},"@_removeTokenFromAllTokensEnumeration_1526":{"entryPoint":6965,"id":1526,"parameterSlots":1,"returnSlots":0},"@_removeTokenFromOwnerEnumeration_1478":{"entryPoint":6808,"id":1478,"parameterSlots":2,"returnSlots":0},"@_requireMinted_935":{"entryPoint":3612,"id":935,"parameterSlots":1,"returnSlots":0},"@_safeTransfer_527":{"entryPoint":5217,"id":527,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_921":{"entryPoint":4981,"id":921,"parameterSlots":3,"returnSlots":0},"@_transferOwnership_111":{"entryPoint":4877,"id":111,"parameterSlots":1,"returnSlots":0},"@_transfer_865":{"entryPoint":3973,"id":865,"parameterSlots":3,"returnSlots":0},"@addMinter_3950":{"entryPoint":3001,"id":3950,"parameterSlots":1,"returnSlots":0},"@approve_369":{"entryPoint":1389,"id":369,"parameterSlots":2,"returnSlots":0},"@balanceOf_230":{"entryPoint":2812,"id":230,"parameterSlots":1,"returnSlots":1},"@baseName_3812":{"entryPoint":1699,"id":3812,"parameterSlots":0,"returnSlots":0},"@baseURI_3814":{"entryPoint":2799,"id":3814,"parameterSlots":0,"returnSlots":0},"@getApproved_387":{"entryPoint":1350,"id":387,"parameterSlots":1,"returnSlots":1},"@getName_4112":{"entryPoint":2635,"id":4112,"parameterSlots":1,"returnSlots":1},"@getTokenId_4047":{"entryPoint":null,"id":4047,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_422":{"entryPoint":null,"id":422,"parameterSlots":2,"returnSlots":1},"@isContract_1603":{"entryPoint":null,"id":1603,"parameterSlots":1,"returnSlots":1},"@minters_3822":{"entryPoint":null,"id":3822,"parameterSlots":0,"returnSlots":0},"@name_268":{"entryPoint":1204,"id":268,"parameterSlots":0,"returnSlots":1},"@names_3818":{"entryPoint":2285,"id":3818,"parameterSlots":0,"returnSlots":0},"@ownerOf_258":{"entryPoint":2534,"id":258,"parameterSlots":1,"returnSlots":1},"@owner_40":{"entryPoint":null,"id":40,"parameterSlots":0,"returnSlots":1},"@register_3987":{"entryPoint":2495,"id":3987,"parameterSlots":3,"returnSlots":0},"@removeMinter_3968":{"entryPoint":2147,"id":3968,"parameterSlots":1,"returnSlots":0},"@renounceOwnership_68":{"entryPoint":2966,"id":68,"parameterSlots":0,"returnSlots":0},"@safeTransferFrom_468":{"entryPoint":2258,"id":468,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_498":{"entryPoint":3130,"id":498,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_404":{"entryPoint":3115,"id":404,"parameterSlots":2,"returnSlots":0},"@setBaseURI_4096":{"entryPoint":2474,"id":4096,"parameterSlots":2,"returnSlots":0},"@supportsInterface_1223":{"entryPoint":3526,"id":1223,"parameterSlots":1,"returnSlots":1},"@supportsInterface_206":{"entryPoint":5354,"id":206,"parameterSlots":1,"returnSlots":1},"@supportsInterface_2555":{"entryPoint":null,"id":2555,"parameterSlots":1,"returnSlots":1},"@supportsInterface_3889":{"entryPoint":1084,"id":3889,"parameterSlots":1,"returnSlots":1},"@symbol_278":{"entryPoint":2986,"id":278,"parameterSlots":0,"returnSlots":1},"@tokenByIndex_1285":{"entryPoint":2310,"id":1285,"parameterSlots":1,"returnSlots":1},"@tokenOfOwnerByIndex_1251":{"entryPoint":1976,"id":1251,"parameterSlots":2,"returnSlots":1},"@tokenURI_4084":{"entryPoint":3272,"id":4084,"parameterSlots":1,"returnSlots":1},"@totalSupply_1262":{"entryPoint":null,"id":1262,"parameterSlots":0,"returnSlots":1},"@transferFrom_449":{"entryPoint":1841,"id":449,"parameterSlots":3,"returnSlots":0},"@transferOwnership_91":{"entryPoint":3382,"id":91,"parameterSlots":1,"returnSlots":0},"abi_decode_address":{"entryPoint":7437,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_available_length_string":{"entryPoint":7554,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_string":{"entryPoint":7702,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":7847,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":8259,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":7787,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":8135,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":8075,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":7465,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":7254,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":9307,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_calldata_ptr":{"entryPoint":7874,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_string_memory_ptr":{"entryPoint":7734,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":7412,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_string_memory_ptrt_address":{"entryPoint":7988,"id":null,"parameterSlots":2,"returnSlots":3},"abi_encode_string":{"entryPoint":7319,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":8800,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":9247,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7393,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4935f8dc8deae1355305b992e890d0242809a3705c9c83131ed47acca0dd4fe2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":9336,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":8440,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_calldata_ptr_to_t_string_storage":{"entryPoint":8518,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":8965,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":7283,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":8310,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x31":{"entryPoint":9394,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":8393,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":7507,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":7208,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:20173:19","statements":[{"nodeType":"YulBlock","src":"6:3:19","statements":[]},{"body":{"nodeType":"YulBlock","src":"58:133:19","statements":[{"body":{"nodeType":"YulBlock","src":"169:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"178:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"181:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"171:6:19"},"nodeType":"YulFunctionCall","src":"171:12:19"},"nodeType":"YulExpressionStatement","src":"171:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"81:5:19"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"92:5:19"},{"kind":"number","nodeType":"YulLiteral","src":"99:66:19","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"88:3:19"},"nodeType":"YulFunctionCall","src":"88:78:19"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"78:2:19"},"nodeType":"YulFunctionCall","src":"78:89:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"71:6:19"},"nodeType":"YulFunctionCall","src":"71:97:19"},"nodeType":"YulIf","src":"68:117:19"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"47:5:19","type":""}],"src":"14:177:19"},{"body":{"nodeType":"YulBlock","src":"265:176:19","statements":[{"body":{"nodeType":"YulBlock","src":"311:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"320:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"323:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"313:6:19"},"nodeType":"YulFunctionCall","src":"313:12:19"},"nodeType":"YulExpressionStatement","src":"313:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"286:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"295:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"282:3:19"},"nodeType":"YulFunctionCall","src":"282:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"307:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"278:3:19"},"nodeType":"YulFunctionCall","src":"278:32:19"},"nodeType":"YulIf","src":"275:52:19"},{"nodeType":"YulVariableDeclaration","src":"336:36:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"362:9:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"349:12:19"},"nodeType":"YulFunctionCall","src":"349:23:19"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"340:5:19","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"405:5:19"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"381:23:19"},"nodeType":"YulFunctionCall","src":"381:30:19"},"nodeType":"YulExpressionStatement","src":"381:30:19"},{"nodeType":"YulAssignment","src":"420:15:19","value":{"name":"value","nodeType":"YulIdentifier","src":"430:5:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"420:6:19"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"231:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"242:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"254:6:19","type":""}],"src":"196:245:19"},{"body":{"nodeType":"YulBlock","src":"541:92:19","statements":[{"nodeType":"YulAssignment","src":"551:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"563:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"574:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"559:3:19"},"nodeType":"YulFunctionCall","src":"559:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"551:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"593:9:19"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"618:6:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"611:6:19"},"nodeType":"YulFunctionCall","src":"611:14:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"604:6:19"},"nodeType":"YulFunctionCall","src":"604:22:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"586:6:19"},"nodeType":"YulFunctionCall","src":"586:41:19"},"nodeType":"YulExpressionStatement","src":"586:41:19"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"510:9:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"521:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"532:4:19","type":""}],"src":"446:187:19"},{"body":{"nodeType":"YulBlock","src":"704:184:19","statements":[{"nodeType":"YulVariableDeclaration","src":"714:10:19","value":{"kind":"number","nodeType":"YulLiteral","src":"723:1:19","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"718:1:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"783:63:19","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"808:3:19"},{"name":"i","nodeType":"YulIdentifier","src":"813:1:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"804:3:19"},"nodeType":"YulFunctionCall","src":"804:11:19"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"827:3:19"},{"name":"i","nodeType":"YulIdentifier","src":"832:1:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"823:3:19"},"nodeType":"YulFunctionCall","src":"823:11:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"817:5:19"},"nodeType":"YulFunctionCall","src":"817:18:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"797:6:19"},"nodeType":"YulFunctionCall","src":"797:39:19"},"nodeType":"YulExpressionStatement","src":"797:39:19"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"744:1:19"},{"name":"length","nodeType":"YulIdentifier","src":"747:6:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"741:2:19"},"nodeType":"YulFunctionCall","src":"741:13:19"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"755:19:19","statements":[{"nodeType":"YulAssignment","src":"757:15:19","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"766:1:19"},{"kind":"number","nodeType":"YulLiteral","src":"769:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"762:3:19"},"nodeType":"YulFunctionCall","src":"762:10:19"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"757:1:19"}]}]},"pre":{"nodeType":"YulBlock","src":"737:3:19","statements":[]},"src":"733:113:19"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"866:3:19"},{"name":"length","nodeType":"YulIdentifier","src":"871:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"862:3:19"},"nodeType":"YulFunctionCall","src":"862:16:19"},{"kind":"number","nodeType":"YulLiteral","src":"880:1:19","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"855:6:19"},"nodeType":"YulFunctionCall","src":"855:27:19"},"nodeType":"YulExpressionStatement","src":"855:27:19"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"682:3:19","type":""},{"name":"dst","nodeType":"YulTypedName","src":"687:3:19","type":""},{"name":"length","nodeType":"YulTypedName","src":"692:6:19","type":""}],"src":"638:250:19"},{"body":{"nodeType":"YulBlock","src":"943:280:19","statements":[{"nodeType":"YulVariableDeclaration","src":"953:26:19","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"973:5:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"967:5:19"},"nodeType":"YulFunctionCall","src":"967:12:19"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"957:6:19","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"995:3:19"},{"name":"length","nodeType":"YulIdentifier","src":"1000:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"988:6:19"},"nodeType":"YulFunctionCall","src":"988:19:19"},"nodeType":"YulExpressionStatement","src":"988:19:19"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1055:5:19"},{"kind":"number","nodeType":"YulLiteral","src":"1062:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1051:3:19"},"nodeType":"YulFunctionCall","src":"1051:16:19"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1073:3:19"},{"kind":"number","nodeType":"YulLiteral","src":"1078:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1069:3:19"},"nodeType":"YulFunctionCall","src":"1069:14:19"},{"name":"length","nodeType":"YulIdentifier","src":"1085:6:19"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"1016:34:19"},"nodeType":"YulFunctionCall","src":"1016:76:19"},"nodeType":"YulExpressionStatement","src":"1016:76:19"},{"nodeType":"YulAssignment","src":"1101:116:19","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1116:3:19"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1129:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"1137:2:19","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1125:3:19"},"nodeType":"YulFunctionCall","src":"1125:15:19"},{"kind":"number","nodeType":"YulLiteral","src":"1142:66:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1121:3:19"},"nodeType":"YulFunctionCall","src":"1121:88:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1112:3:19"},"nodeType":"YulFunctionCall","src":"1112:98:19"},{"kind":"number","nodeType":"YulLiteral","src":"1212:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1108:3:19"},"nodeType":"YulFunctionCall","src":"1108:109:19"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1101:3:19"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"920:5:19","type":""},{"name":"pos","nodeType":"YulTypedName","src":"927:3:19","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"935:3:19","type":""}],"src":"893:330:19"},{"body":{"nodeType":"YulBlock","src":"1349:99:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1366:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1377:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1359:6:19"},"nodeType":"YulFunctionCall","src":"1359:21:19"},"nodeType":"YulExpressionStatement","src":"1359:21:19"},{"nodeType":"YulAssignment","src":"1389:53:19","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1415:6:19"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1427:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1438:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1423:3:19"},"nodeType":"YulFunctionCall","src":"1423:18:19"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"1397:17:19"},"nodeType":"YulFunctionCall","src":"1397:45:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1389:4:19"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1318:9:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1329:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1340:4:19","type":""}],"src":"1228:220:19"},{"body":{"nodeType":"YulBlock","src":"1523:110:19","statements":[{"body":{"nodeType":"YulBlock","src":"1569:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1578:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1581:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1571:6:19"},"nodeType":"YulFunctionCall","src":"1571:12:19"},"nodeType":"YulExpressionStatement","src":"1571:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1544:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"1553:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1540:3:19"},"nodeType":"YulFunctionCall","src":"1540:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"1565:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1536:3:19"},"nodeType":"YulFunctionCall","src":"1536:32:19"},"nodeType":"YulIf","src":"1533:52:19"},{"nodeType":"YulAssignment","src":"1594:33:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1617:9:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1604:12:19"},"nodeType":"YulFunctionCall","src":"1604:23:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1594:6:19"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1489:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1500:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1512:6:19","type":""}],"src":"1453:180:19"},{"body":{"nodeType":"YulBlock","src":"1739:125:19","statements":[{"nodeType":"YulAssignment","src":"1749:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1761:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1772:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1757:3:19"},"nodeType":"YulFunctionCall","src":"1757:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1749:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1791:9:19"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1806:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"1814:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1802:3:19"},"nodeType":"YulFunctionCall","src":"1802:55:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1784:6:19"},"nodeType":"YulFunctionCall","src":"1784:74:19"},"nodeType":"YulExpressionStatement","src":"1784:74:19"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1708:9:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1719:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1730:4:19","type":""}],"src":"1638:226:19"},{"body":{"nodeType":"YulBlock","src":"1918:147:19","statements":[{"nodeType":"YulAssignment","src":"1928:29:19","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1950:6:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1937:12:19"},"nodeType":"YulFunctionCall","src":"1937:20:19"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1928:5:19"}]},{"body":{"nodeType":"YulBlock","src":"2043:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2052:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2055:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2045:6:19"},"nodeType":"YulFunctionCall","src":"2045:12:19"},"nodeType":"YulExpressionStatement","src":"2045:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1979:5:19"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1990:5:19"},{"kind":"number","nodeType":"YulLiteral","src":"1997:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1986:3:19"},"nodeType":"YulFunctionCall","src":"1986:54:19"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1976:2:19"},"nodeType":"YulFunctionCall","src":"1976:65:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1969:6:19"},"nodeType":"YulFunctionCall","src":"1969:73:19"},"nodeType":"YulIf","src":"1966:93:19"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1897:6:19","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1908:5:19","type":""}],"src":"1869:196:19"},{"body":{"nodeType":"YulBlock","src":"2157:167:19","statements":[{"body":{"nodeType":"YulBlock","src":"2203:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2212:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2215:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2205:6:19"},"nodeType":"YulFunctionCall","src":"2205:12:19"},"nodeType":"YulExpressionStatement","src":"2205:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2178:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"2187:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2174:3:19"},"nodeType":"YulFunctionCall","src":"2174:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"2199:2:19","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2170:3:19"},"nodeType":"YulFunctionCall","src":"2170:32:19"},"nodeType":"YulIf","src":"2167:52:19"},{"nodeType":"YulAssignment","src":"2228:39:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2257:9:19"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2238:18:19"},"nodeType":"YulFunctionCall","src":"2238:29:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2228:6:19"}]},{"nodeType":"YulAssignment","src":"2276:42:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2303:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"2314:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2299:3:19"},"nodeType":"YulFunctionCall","src":"2299:18:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2286:12:19"},"nodeType":"YulFunctionCall","src":"2286:32:19"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2276:6:19"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2115:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2126:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2138:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2146:6:19","type":""}],"src":"2070:254:19"},{"body":{"nodeType":"YulBlock","src":"2430:76:19","statements":[{"nodeType":"YulAssignment","src":"2440:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2452:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"2463:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2448:3:19"},"nodeType":"YulFunctionCall","src":"2448:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2440:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2482:9:19"},{"name":"value0","nodeType":"YulIdentifier","src":"2493:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2475:6:19"},"nodeType":"YulFunctionCall","src":"2475:25:19"},"nodeType":"YulExpressionStatement","src":"2475:25:19"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2399:9:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2410:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2421:4:19","type":""}],"src":"2329:177:19"},{"body":{"nodeType":"YulBlock","src":"2543:152:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2560:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2563:77:19","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2553:6:19"},"nodeType":"YulFunctionCall","src":"2553:88:19"},"nodeType":"YulExpressionStatement","src":"2553:88:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2657:1:19","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2660:4:19","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2650:6:19"},"nodeType":"YulFunctionCall","src":"2650:15:19"},"nodeType":"YulExpressionStatement","src":"2650:15:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2681:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2684:4:19","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2674:6:19"},"nodeType":"YulFunctionCall","src":"2674:15:19"},"nodeType":"YulExpressionStatement","src":"2674:15:19"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"2511:184:19"},{"body":{"nodeType":"YulBlock","src":"2775:616:19","statements":[{"nodeType":"YulVariableDeclaration","src":"2785:28:19","value":{"kind":"number","nodeType":"YulLiteral","src":"2795:18:19","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2789:2:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"2840:22:19","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2842:16:19"},"nodeType":"YulFunctionCall","src":"2842:18:19"},"nodeType":"YulExpressionStatement","src":"2842:18:19"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2828:6:19"},{"name":"_1","nodeType":"YulIdentifier","src":"2836:2:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2825:2:19"},"nodeType":"YulFunctionCall","src":"2825:14:19"},"nodeType":"YulIf","src":"2822:40:19"},{"nodeType":"YulVariableDeclaration","src":"2871:76:19","value":{"kind":"number","nodeType":"YulLiteral","src":"2881:66:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2875:2:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2956:23:19","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2976:2:19","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2970:5:19"},"nodeType":"YulFunctionCall","src":"2970:9:19"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"2960:6:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2988:73:19","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3010:6:19"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3034:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"3042:2:19","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3030:3:19"},"nodeType":"YulFunctionCall","src":"3030:15:19"},{"name":"_2","nodeType":"YulIdentifier","src":"3047:2:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3026:3:19"},"nodeType":"YulFunctionCall","src":"3026:24:19"},{"kind":"number","nodeType":"YulLiteral","src":"3052:2:19","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3022:3:19"},"nodeType":"YulFunctionCall","src":"3022:33:19"},{"name":"_2","nodeType":"YulIdentifier","src":"3057:2:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3018:3:19"},"nodeType":"YulFunctionCall","src":"3018:42:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3006:3:19"},"nodeType":"YulFunctionCall","src":"3006:55:19"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2992:10:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"3120:22:19","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3122:16:19"},"nodeType":"YulFunctionCall","src":"3122:18:19"},"nodeType":"YulExpressionStatement","src":"3122:18:19"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3079:10:19"},{"name":"_1","nodeType":"YulIdentifier","src":"3091:2:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3076:2:19"},"nodeType":"YulFunctionCall","src":"3076:18:19"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3099:10:19"},{"name":"memPtr","nodeType":"YulIdentifier","src":"3111:6:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3096:2:19"},"nodeType":"YulFunctionCall","src":"3096:22:19"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3073:2:19"},"nodeType":"YulFunctionCall","src":"3073:46:19"},"nodeType":"YulIf","src":"3070:72:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3158:2:19","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3162:10:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3151:6:19"},"nodeType":"YulFunctionCall","src":"3151:22:19"},"nodeType":"YulExpressionStatement","src":"3151:22:19"},{"nodeType":"YulAssignment","src":"3182:15:19","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"3191:6:19"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3182:5:19"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3213:6:19"},{"name":"length","nodeType":"YulIdentifier","src":"3221:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3206:6:19"},"nodeType":"YulFunctionCall","src":"3206:22:19"},"nodeType":"YulExpressionStatement","src":"3206:22:19"},{"body":{"nodeType":"YulBlock","src":"3266:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3275:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3278:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3268:6:19"},"nodeType":"YulFunctionCall","src":"3268:12:19"},"nodeType":"YulExpressionStatement","src":"3268:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3247:3:19"},{"name":"length","nodeType":"YulIdentifier","src":"3252:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3243:3:19"},"nodeType":"YulFunctionCall","src":"3243:16:19"},{"name":"end","nodeType":"YulIdentifier","src":"3261:3:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3240:2:19"},"nodeType":"YulFunctionCall","src":"3240:25:19"},"nodeType":"YulIf","src":"3237:45:19"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3308:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"3316:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3304:3:19"},"nodeType":"YulFunctionCall","src":"3304:17:19"},{"name":"src","nodeType":"YulIdentifier","src":"3323:3:19"},{"name":"length","nodeType":"YulIdentifier","src":"3328:6:19"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"3291:12:19"},"nodeType":"YulFunctionCall","src":"3291:44:19"},"nodeType":"YulExpressionStatement","src":"3291:44:19"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3359:6:19"},{"name":"length","nodeType":"YulIdentifier","src":"3367:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3355:3:19"},"nodeType":"YulFunctionCall","src":"3355:19:19"},{"kind":"number","nodeType":"YulLiteral","src":"3376:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3351:3:19"},"nodeType":"YulFunctionCall","src":"3351:30:19"},{"kind":"number","nodeType":"YulLiteral","src":"3383:1:19","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3344:6:19"},"nodeType":"YulFunctionCall","src":"3344:41:19"},"nodeType":"YulExpressionStatement","src":"3344:41:19"}]},"name":"abi_decode_available_length_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"2744:3:19","type":""},{"name":"length","nodeType":"YulTypedName","src":"2749:6:19","type":""},{"name":"end","nodeType":"YulTypedName","src":"2757:3:19","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2765:5:19","type":""}],"src":"2700:691:19"},{"body":{"nodeType":"YulBlock","src":"3449:169:19","statements":[{"body":{"nodeType":"YulBlock","src":"3498:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3507:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3510:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3500:6:19"},"nodeType":"YulFunctionCall","src":"3500:12:19"},"nodeType":"YulExpressionStatement","src":"3500:12:19"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3477:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"3485:4:19","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3473:3:19"},"nodeType":"YulFunctionCall","src":"3473:17:19"},{"name":"end","nodeType":"YulIdentifier","src":"3492:3:19"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3469:3:19"},"nodeType":"YulFunctionCall","src":"3469:27:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3462:6:19"},"nodeType":"YulFunctionCall","src":"3462:35:19"},"nodeType":"YulIf","src":"3459:55:19"},{"nodeType":"YulAssignment","src":"3523:89:19","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3571:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"3579:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3567:3:19"},"nodeType":"YulFunctionCall","src":"3567:17:19"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3599:6:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3586:12:19"},"nodeType":"YulFunctionCall","src":"3586:20:19"},{"name":"end","nodeType":"YulIdentifier","src":"3608:3:19"}],"functionName":{"name":"abi_decode_available_length_string","nodeType":"YulIdentifier","src":"3532:34:19"},"nodeType":"YulFunctionCall","src":"3532:80:19"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3523:5:19"}]}]},"name":"abi_decode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3423:6:19","type":""},{"name":"end","nodeType":"YulTypedName","src":"3431:3:19","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3439:5:19","type":""}],"src":"3396:222:19"},{"body":{"nodeType":"YulBlock","src":"3703:242:19","statements":[{"body":{"nodeType":"YulBlock","src":"3749:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3758:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3761:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3751:6:19"},"nodeType":"YulFunctionCall","src":"3751:12:19"},"nodeType":"YulExpressionStatement","src":"3751:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3724:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"3733:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3720:3:19"},"nodeType":"YulFunctionCall","src":"3720:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"3745:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3716:3:19"},"nodeType":"YulFunctionCall","src":"3716:32:19"},"nodeType":"YulIf","src":"3713:52:19"},{"nodeType":"YulVariableDeclaration","src":"3774:37:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3801:9:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3788:12:19"},"nodeType":"YulFunctionCall","src":"3788:23:19"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3778:6:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"3854:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3863:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3866:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3856:6:19"},"nodeType":"YulFunctionCall","src":"3856:12:19"},"nodeType":"YulExpressionStatement","src":"3856:12:19"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3826:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"3834:18:19","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3823:2:19"},"nodeType":"YulFunctionCall","src":"3823:30:19"},"nodeType":"YulIf","src":"3820:50:19"},{"nodeType":"YulAssignment","src":"3879:60:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3911:9:19"},{"name":"offset","nodeType":"YulIdentifier","src":"3922:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3907:3:19"},"nodeType":"YulFunctionCall","src":"3907:22:19"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3931:7:19"}],"functionName":{"name":"abi_decode_string","nodeType":"YulIdentifier","src":"3889:17:19"},"nodeType":"YulFunctionCall","src":"3889:50:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3879:6:19"}]}]},"name":"abi_decode_tuple_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3669:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3680:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3692:6:19","type":""}],"src":"3623:322:19"},{"body":{"nodeType":"YulBlock","src":"4054:224:19","statements":[{"body":{"nodeType":"YulBlock","src":"4100:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4109:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4112:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4102:6:19"},"nodeType":"YulFunctionCall","src":"4102:12:19"},"nodeType":"YulExpressionStatement","src":"4102:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4075:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"4084:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4071:3:19"},"nodeType":"YulFunctionCall","src":"4071:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"4096:2:19","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4067:3:19"},"nodeType":"YulFunctionCall","src":"4067:32:19"},"nodeType":"YulIf","src":"4064:52:19"},{"nodeType":"YulAssignment","src":"4125:39:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4154:9:19"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4135:18:19"},"nodeType":"YulFunctionCall","src":"4135:29:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4125:6:19"}]},{"nodeType":"YulAssignment","src":"4173:48:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4206:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"4217:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4202:3:19"},"nodeType":"YulFunctionCall","src":"4202:18:19"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4183:18:19"},"nodeType":"YulFunctionCall","src":"4183:38:19"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4173:6:19"}]},{"nodeType":"YulAssignment","src":"4230:42:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4257:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"4268:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4253:3:19"},"nodeType":"YulFunctionCall","src":"4253:18:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4240:12:19"},"nodeType":"YulFunctionCall","src":"4240:32:19"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4230:6:19"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4004:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4015:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4027:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4035:6:19","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4043:6:19","type":""}],"src":"3950:328:19"},{"body":{"nodeType":"YulBlock","src":"4353:116:19","statements":[{"body":{"nodeType":"YulBlock","src":"4399:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4408:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4411:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4401:6:19"},"nodeType":"YulFunctionCall","src":"4401:12:19"},"nodeType":"YulExpressionStatement","src":"4401:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4374:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"4383:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4370:3:19"},"nodeType":"YulFunctionCall","src":"4370:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"4395:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4366:3:19"},"nodeType":"YulFunctionCall","src":"4366:32:19"},"nodeType":"YulIf","src":"4363:52:19"},{"nodeType":"YulAssignment","src":"4424:39:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4453:9:19"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4434:18:19"},"nodeType":"YulFunctionCall","src":"4434:29:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4424:6:19"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4319:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4330:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4342:6:19","type":""}],"src":"4283:186:19"},{"body":{"nodeType":"YulBlock","src":"4564:502:19","statements":[{"body":{"nodeType":"YulBlock","src":"4610:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4619:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4622:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4612:6:19"},"nodeType":"YulFunctionCall","src":"4612:12:19"},"nodeType":"YulExpressionStatement","src":"4612:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4585:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"4594:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4581:3:19"},"nodeType":"YulFunctionCall","src":"4581:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"4606:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4577:3:19"},"nodeType":"YulFunctionCall","src":"4577:32:19"},"nodeType":"YulIf","src":"4574:52:19"},{"nodeType":"YulVariableDeclaration","src":"4635:37:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4662:9:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4649:12:19"},"nodeType":"YulFunctionCall","src":"4649:23:19"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4639:6:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4681:28:19","value":{"kind":"number","nodeType":"YulLiteral","src":"4691:18:19","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4685:2:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"4736:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4745:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4748:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4738:6:19"},"nodeType":"YulFunctionCall","src":"4738:12:19"},"nodeType":"YulExpressionStatement","src":"4738:12:19"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4724:6:19"},{"name":"_1","nodeType":"YulIdentifier","src":"4732:2:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4721:2:19"},"nodeType":"YulFunctionCall","src":"4721:14:19"},"nodeType":"YulIf","src":"4718:34:19"},{"nodeType":"YulVariableDeclaration","src":"4761:32:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4775:9:19"},{"name":"offset","nodeType":"YulIdentifier","src":"4786:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4771:3:19"},"nodeType":"YulFunctionCall","src":"4771:22:19"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"4765:2:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"4841:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4850:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4853:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4843:6:19"},"nodeType":"YulFunctionCall","src":"4843:12:19"},"nodeType":"YulExpressionStatement","src":"4843:12:19"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4820:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"4824:4:19","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4816:3:19"},"nodeType":"YulFunctionCall","src":"4816:13:19"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4831:7:19"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4812:3:19"},"nodeType":"YulFunctionCall","src":"4812:27:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4805:6:19"},"nodeType":"YulFunctionCall","src":"4805:35:19"},"nodeType":"YulIf","src":"4802:55:19"},{"nodeType":"YulVariableDeclaration","src":"4866:30:19","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4893:2:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4880:12:19"},"nodeType":"YulFunctionCall","src":"4880:16:19"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4870:6:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"4923:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4932:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4935:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4925:6:19"},"nodeType":"YulFunctionCall","src":"4925:12:19"},"nodeType":"YulExpressionStatement","src":"4925:12:19"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4911:6:19"},{"name":"_1","nodeType":"YulIdentifier","src":"4919:2:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4908:2:19"},"nodeType":"YulFunctionCall","src":"4908:14:19"},"nodeType":"YulIf","src":"4905:34:19"},{"body":{"nodeType":"YulBlock","src":"4989:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4998:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5001:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4991:6:19"},"nodeType":"YulFunctionCall","src":"4991:12:19"},"nodeType":"YulExpressionStatement","src":"4991:12:19"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4962:2:19"},{"name":"length","nodeType":"YulIdentifier","src":"4966:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4958:3:19"},"nodeType":"YulFunctionCall","src":"4958:15:19"},{"kind":"number","nodeType":"YulLiteral","src":"4975:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4954:3:19"},"nodeType":"YulFunctionCall","src":"4954:24:19"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4980:7:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4951:2:19"},"nodeType":"YulFunctionCall","src":"4951:37:19"},"nodeType":"YulIf","src":"4948:57:19"},{"nodeType":"YulAssignment","src":"5014:21:19","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5028:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"5032:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5024:3:19"},"nodeType":"YulFunctionCall","src":"5024:11:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5014:6:19"}]},{"nodeType":"YulAssignment","src":"5044:16:19","value":{"name":"length","nodeType":"YulIdentifier","src":"5054:6:19"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5044:6:19"}]}]},"name":"abi_decode_tuple_t_string_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4522:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4533:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4545:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4553:6:19","type":""}],"src":"4474:592:19"},{"body":{"nodeType":"YulBlock","src":"5185:350:19","statements":[{"body":{"nodeType":"YulBlock","src":"5231:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5240:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5243:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5233:6:19"},"nodeType":"YulFunctionCall","src":"5233:12:19"},"nodeType":"YulExpressionStatement","src":"5233:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5206:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"5215:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5202:3:19"},"nodeType":"YulFunctionCall","src":"5202:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"5227:2:19","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5198:3:19"},"nodeType":"YulFunctionCall","src":"5198:32:19"},"nodeType":"YulIf","src":"5195:52:19"},{"nodeType":"YulAssignment","src":"5256:33:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5279:9:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5266:12:19"},"nodeType":"YulFunctionCall","src":"5266:23:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5256:6:19"}]},{"nodeType":"YulVariableDeclaration","src":"5298:46:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5329:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"5340:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5325:3:19"},"nodeType":"YulFunctionCall","src":"5325:18:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5312:12:19"},"nodeType":"YulFunctionCall","src":"5312:32:19"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5302:6:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"5387:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5396:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5399:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5389:6:19"},"nodeType":"YulFunctionCall","src":"5389:12:19"},"nodeType":"YulExpressionStatement","src":"5389:12:19"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5359:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"5367:18:19","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5356:2:19"},"nodeType":"YulFunctionCall","src":"5356:30:19"},"nodeType":"YulIf","src":"5353:50:19"},{"nodeType":"YulAssignment","src":"5412:60:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5444:9:19"},{"name":"offset","nodeType":"YulIdentifier","src":"5455:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5440:3:19"},"nodeType":"YulFunctionCall","src":"5440:22:19"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5464:7:19"}],"functionName":{"name":"abi_decode_string","nodeType":"YulIdentifier","src":"5422:17:19"},"nodeType":"YulFunctionCall","src":"5422:50:19"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5412:6:19"}]},{"nodeType":"YulAssignment","src":"5481:48:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5514:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"5525:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5510:3:19"},"nodeType":"YulFunctionCall","src":"5510:18:19"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5491:18:19"},"nodeType":"YulFunctionCall","src":"5491:38:19"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5481:6:19"}]}]},"name":"abi_decode_tuple_t_uint256t_string_memory_ptrt_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5135:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5146:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5158:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5166:6:19","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5174:6:19","type":""}],"src":"5071:464:19"},{"body":{"nodeType":"YulBlock","src":"5624:263:19","statements":[{"body":{"nodeType":"YulBlock","src":"5670:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5679:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5682:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5672:6:19"},"nodeType":"YulFunctionCall","src":"5672:12:19"},"nodeType":"YulExpressionStatement","src":"5672:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5645:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"5654:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5641:3:19"},"nodeType":"YulFunctionCall","src":"5641:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"5666:2:19","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5637:3:19"},"nodeType":"YulFunctionCall","src":"5637:32:19"},"nodeType":"YulIf","src":"5634:52:19"},{"nodeType":"YulAssignment","src":"5695:39:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5724:9:19"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5705:18:19"},"nodeType":"YulFunctionCall","src":"5705:29:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5695:6:19"}]},{"nodeType":"YulVariableDeclaration","src":"5743:45:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5773:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"5784:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5769:3:19"},"nodeType":"YulFunctionCall","src":"5769:18:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5756:12:19"},"nodeType":"YulFunctionCall","src":"5756:32:19"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5747:5:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"5841:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5850:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5853:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5843:6:19"},"nodeType":"YulFunctionCall","src":"5843:12:19"},"nodeType":"YulExpressionStatement","src":"5843:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5810:5:19"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5831:5:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5824:6:19"},"nodeType":"YulFunctionCall","src":"5824:13:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5817:6:19"},"nodeType":"YulFunctionCall","src":"5817:21:19"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5807:2:19"},"nodeType":"YulFunctionCall","src":"5807:32:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5800:6:19"},"nodeType":"YulFunctionCall","src":"5800:40:19"},"nodeType":"YulIf","src":"5797:60:19"},{"nodeType":"YulAssignment","src":"5866:15:19","value":{"name":"value","nodeType":"YulIdentifier","src":"5876:5:19"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5866:6:19"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5582:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5593:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5605:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5613:6:19","type":""}],"src":"5540:347:19"},{"body":{"nodeType":"YulBlock","src":"6022:537:19","statements":[{"body":{"nodeType":"YulBlock","src":"6069:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6078:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6081:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6071:6:19"},"nodeType":"YulFunctionCall","src":"6071:12:19"},"nodeType":"YulExpressionStatement","src":"6071:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6043:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"6052:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6039:3:19"},"nodeType":"YulFunctionCall","src":"6039:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"6064:3:19","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6035:3:19"},"nodeType":"YulFunctionCall","src":"6035:33:19"},"nodeType":"YulIf","src":"6032:53:19"},{"nodeType":"YulAssignment","src":"6094:39:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6123:9:19"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"6104:18:19"},"nodeType":"YulFunctionCall","src":"6104:29:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6094:6:19"}]},{"nodeType":"YulAssignment","src":"6142:48:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6175:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6186:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6171:3:19"},"nodeType":"YulFunctionCall","src":"6171:18:19"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"6152:18:19"},"nodeType":"YulFunctionCall","src":"6152:38:19"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6142:6:19"}]},{"nodeType":"YulAssignment","src":"6199:42:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6226:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6237:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6222:3:19"},"nodeType":"YulFunctionCall","src":"6222:18:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6209:12:19"},"nodeType":"YulFunctionCall","src":"6209:32:19"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"6199:6:19"}]},{"nodeType":"YulVariableDeclaration","src":"6250:46:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6281:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6292:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6277:3:19"},"nodeType":"YulFunctionCall","src":"6277:18:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6264:12:19"},"nodeType":"YulFunctionCall","src":"6264:32:19"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6254:6:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"6339:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6348:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6351:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6341:6:19"},"nodeType":"YulFunctionCall","src":"6341:12:19"},"nodeType":"YulExpressionStatement","src":"6341:12:19"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6311:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"6319:18:19","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6308:2:19"},"nodeType":"YulFunctionCall","src":"6308:30:19"},"nodeType":"YulIf","src":"6305:50:19"},{"nodeType":"YulVariableDeclaration","src":"6364:32:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6378:9:19"},{"name":"offset","nodeType":"YulIdentifier","src":"6389:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6374:3:19"},"nodeType":"YulFunctionCall","src":"6374:22:19"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6368:2:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"6444:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6453:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6456:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6446:6:19"},"nodeType":"YulFunctionCall","src":"6446:12:19"},"nodeType":"YulExpressionStatement","src":"6446:12:19"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"6423:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"6427:4:19","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6419:3:19"},"nodeType":"YulFunctionCall","src":"6419:13:19"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6434:7:19"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6415:3:19"},"nodeType":"YulFunctionCall","src":"6415:27:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6408:6:19"},"nodeType":"YulFunctionCall","src":"6408:35:19"},"nodeType":"YulIf","src":"6405:55:19"},{"nodeType":"YulAssignment","src":"6469:84:19","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"6518:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"6522:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6514:3:19"},"nodeType":"YulFunctionCall","src":"6514:11:19"},{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"6540:2:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6527:12:19"},"nodeType":"YulFunctionCall","src":"6527:16:19"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6545:7:19"}],"functionName":{"name":"abi_decode_available_length_string","nodeType":"YulIdentifier","src":"6479:34:19"},"nodeType":"YulFunctionCall","src":"6479:74:19"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"6469:6:19"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5964:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5975:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5987:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5995:6:19","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6003:6:19","type":""},{"name":"value3","nodeType":"YulTypedName","src":"6011:6:19","type":""}],"src":"5892:667:19"},{"body":{"nodeType":"YulBlock","src":"6651:173:19","statements":[{"body":{"nodeType":"YulBlock","src":"6697:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6706:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6709:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6699:6:19"},"nodeType":"YulFunctionCall","src":"6699:12:19"},"nodeType":"YulExpressionStatement","src":"6699:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6672:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"6681:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6668:3:19"},"nodeType":"YulFunctionCall","src":"6668:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"6693:2:19","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6664:3:19"},"nodeType":"YulFunctionCall","src":"6664:32:19"},"nodeType":"YulIf","src":"6661:52:19"},{"nodeType":"YulAssignment","src":"6722:39:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6751:9:19"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"6732:18:19"},"nodeType":"YulFunctionCall","src":"6732:29:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6722:6:19"}]},{"nodeType":"YulAssignment","src":"6770:48:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6803:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6814:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6799:3:19"},"nodeType":"YulFunctionCall","src":"6799:18:19"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"6780:18:19"},"nodeType":"YulFunctionCall","src":"6780:38:19"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6770:6:19"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6609:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6620:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6632:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6640:6:19","type":""}],"src":"6564:260:19"},{"body":{"nodeType":"YulBlock","src":"6884:382:19","statements":[{"nodeType":"YulAssignment","src":"6894:22:19","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6908:1:19","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"6911:4:19"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6904:3:19"},"nodeType":"YulFunctionCall","src":"6904:12:19"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6894:6:19"}]},{"nodeType":"YulVariableDeclaration","src":"6925:38:19","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"6955:4:19"},{"kind":"number","nodeType":"YulLiteral","src":"6961:1:19","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6951:3:19"},"nodeType":"YulFunctionCall","src":"6951:12:19"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"6929:18:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"7002:31:19","statements":[{"nodeType":"YulAssignment","src":"7004:27:19","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7018:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"7026:4:19","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7014:3:19"},"nodeType":"YulFunctionCall","src":"7014:17:19"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"7004:6:19"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6982:18:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6975:6:19"},"nodeType":"YulFunctionCall","src":"6975:26:19"},"nodeType":"YulIf","src":"6972:61:19"},{"body":{"nodeType":"YulBlock","src":"7092:168:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7113:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7116:77:19","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7106:6:19"},"nodeType":"YulFunctionCall","src":"7106:88:19"},"nodeType":"YulExpressionStatement","src":"7106:88:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7214:1:19","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7217:4:19","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7207:6:19"},"nodeType":"YulFunctionCall","src":"7207:15:19"},"nodeType":"YulExpressionStatement","src":"7207:15:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7242:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7245:4:19","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7235:6:19"},"nodeType":"YulFunctionCall","src":"7235:15:19"},"nodeType":"YulExpressionStatement","src":"7235:15:19"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"7048:18:19"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7071:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"7079:2:19","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7068:2:19"},"nodeType":"YulFunctionCall","src":"7068:14:19"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7045:2:19"},"nodeType":"YulFunctionCall","src":"7045:38:19"},"nodeType":"YulIf","src":"7042:218:19"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"6864:4:19","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"6873:6:19","type":""}],"src":"6829:437:19"},{"body":{"nodeType":"YulBlock","src":"7445:223:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7462:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7473:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7455:6:19"},"nodeType":"YulFunctionCall","src":"7455:21:19"},"nodeType":"YulExpressionStatement","src":"7455:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7496:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7507:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7492:3:19"},"nodeType":"YulFunctionCall","src":"7492:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"7512:2:19","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7485:6:19"},"nodeType":"YulFunctionCall","src":"7485:30:19"},"nodeType":"YulExpressionStatement","src":"7485:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7535:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7546:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7531:3:19"},"nodeType":"YulFunctionCall","src":"7531:18:19"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"7551:34:19","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7524:6:19"},"nodeType":"YulFunctionCall","src":"7524:62:19"},"nodeType":"YulExpressionStatement","src":"7524:62:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7606:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7617:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7602:3:19"},"nodeType":"YulFunctionCall","src":"7602:18:19"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"7622:3:19","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7595:6:19"},"nodeType":"YulFunctionCall","src":"7595:31:19"},"nodeType":"YulExpressionStatement","src":"7595:31:19"},{"nodeType":"YulAssignment","src":"7635:27:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7647:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7658:3:19","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7643:3:19"},"nodeType":"YulFunctionCall","src":"7643:19:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7635:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7422:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7436:4:19","type":""}],"src":"7271:397:19"},{"body":{"nodeType":"YulBlock","src":"7847:251:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7864:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7875:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7857:6:19"},"nodeType":"YulFunctionCall","src":"7857:21:19"},"nodeType":"YulExpressionStatement","src":"7857:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7898:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7909:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7894:3:19"},"nodeType":"YulFunctionCall","src":"7894:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"7914:2:19","type":"","value":"61"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7887:6:19"},"nodeType":"YulFunctionCall","src":"7887:30:19"},"nodeType":"YulExpressionStatement","src":"7887:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7937:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7948:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7933:3:19"},"nodeType":"YulFunctionCall","src":"7933:18:19"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"7953:34:19","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7926:6:19"},"nodeType":"YulFunctionCall","src":"7926:62:19"},"nodeType":"YulExpressionStatement","src":"7926:62:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8008:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"8019:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8004:3:19"},"nodeType":"YulFunctionCall","src":"8004:18:19"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"8024:31:19","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7997:6:19"},"nodeType":"YulFunctionCall","src":"7997:59:19"},"nodeType":"YulExpressionStatement","src":"7997:59:19"},{"nodeType":"YulAssignment","src":"8065:27:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8077:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"8088:3:19","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8073:3:19"},"nodeType":"YulFunctionCall","src":"8073:19:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8065:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7824:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7838:4:19","type":""}],"src":"7673:425:19"},{"body":{"nodeType":"YulBlock","src":"8277:235:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8294:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"8305:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8287:6:19"},"nodeType":"YulFunctionCall","src":"8287:21:19"},"nodeType":"YulExpressionStatement","src":"8287:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8328:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"8339:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8324:3:19"},"nodeType":"YulFunctionCall","src":"8324:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"8344:2:19","type":"","value":"45"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8317:6:19"},"nodeType":"YulFunctionCall","src":"8317:30:19"},"nodeType":"YulExpressionStatement","src":"8317:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8367:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"8378:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8363:3:19"},"nodeType":"YulFunctionCall","src":"8363:18:19"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"8383:34:19","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8356:6:19"},"nodeType":"YulFunctionCall","src":"8356:62:19"},"nodeType":"YulExpressionStatement","src":"8356:62:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8438:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"8449:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8434:3:19"},"nodeType":"YulFunctionCall","src":"8434:18:19"},{"hexValue":"72206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"8454:15:19","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8427:6:19"},"nodeType":"YulFunctionCall","src":"8427:43:19"},"nodeType":"YulExpressionStatement","src":"8427:43:19"},{"nodeType":"YulAssignment","src":"8479:27:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8491:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"8502:3:19","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8487:3:19"},"nodeType":"YulFunctionCall","src":"8487:19:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8479:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8254:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8268:4:19","type":""}],"src":"8103:409:19"},{"body":{"nodeType":"YulBlock","src":"8691:233:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8708:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"8719:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8701:6:19"},"nodeType":"YulFunctionCall","src":"8701:21:19"},"nodeType":"YulExpressionStatement","src":"8701:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8742:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"8753:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8738:3:19"},"nodeType":"YulFunctionCall","src":"8738:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"8758:2:19","type":"","value":"43"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8731:6:19"},"nodeType":"YulFunctionCall","src":"8731:30:19"},"nodeType":"YulExpressionStatement","src":"8731:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8781:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"8792:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8777:3:19"},"nodeType":"YulFunctionCall","src":"8777:18:19"},{"hexValue":"455243373231456e756d657261626c653a206f776e657220696e646578206f75","kind":"string","nodeType":"YulLiteral","src":"8797:34:19","type":"","value":"ERC721Enumerable: owner index ou"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8770:6:19"},"nodeType":"YulFunctionCall","src":"8770:62:19"},"nodeType":"YulExpressionStatement","src":"8770:62:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8852:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"8863:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8848:3:19"},"nodeType":"YulFunctionCall","src":"8848:18:19"},{"hexValue":"74206f6620626f756e6473","kind":"string","nodeType":"YulLiteral","src":"8868:13:19","type":"","value":"t of bounds"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8841:6:19"},"nodeType":"YulFunctionCall","src":"8841:41:19"},"nodeType":"YulExpressionStatement","src":"8841:41:19"},{"nodeType":"YulAssignment","src":"8891:27:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8903:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"8914:3:19","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8899:3:19"},"nodeType":"YulFunctionCall","src":"8899:19:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8891:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8668:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8682:4:19","type":""}],"src":"8517:407:19"},{"body":{"nodeType":"YulBlock","src":"9103:234:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9120:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"9131:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9113:6:19"},"nodeType":"YulFunctionCall","src":"9113:21:19"},"nodeType":"YulExpressionStatement","src":"9113:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9154:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"9165:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9150:3:19"},"nodeType":"YulFunctionCall","src":"9150:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"9170:2:19","type":"","value":"44"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9143:6:19"},"nodeType":"YulFunctionCall","src":"9143:30:19"},"nodeType":"YulExpressionStatement","src":"9143:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9193:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"9204:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9189:3:19"},"nodeType":"YulFunctionCall","src":"9189:18:19"},{"hexValue":"455243373231456e756d657261626c653a20676c6f62616c20696e646578206f","kind":"string","nodeType":"YulLiteral","src":"9209:34:19","type":"","value":"ERC721Enumerable: global index o"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9182:6:19"},"nodeType":"YulFunctionCall","src":"9182:62:19"},"nodeType":"YulExpressionStatement","src":"9182:62:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9264:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"9275:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9260:3:19"},"nodeType":"YulFunctionCall","src":"9260:18:19"},{"hexValue":"7574206f6620626f756e6473","kind":"string","nodeType":"YulLiteral","src":"9280:14:19","type":"","value":"ut of bounds"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9253:6:19"},"nodeType":"YulFunctionCall","src":"9253:42:19"},"nodeType":"YulExpressionStatement","src":"9253:42:19"},{"nodeType":"YulAssignment","src":"9304:27:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9316:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"9327:3:19","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9312:3:19"},"nodeType":"YulFunctionCall","src":"9312:19:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9304:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9080:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9094:4:19","type":""}],"src":"8929:408:19"},{"body":{"nodeType":"YulBlock","src":"9374:152:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9391:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9394:77:19","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9384:6:19"},"nodeType":"YulFunctionCall","src":"9384:88:19"},"nodeType":"YulExpressionStatement","src":"9384:88:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9488:1:19","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9491:4:19","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9481:6:19"},"nodeType":"YulFunctionCall","src":"9481:15:19"},"nodeType":"YulExpressionStatement","src":"9481:15:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9512:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9515:4:19","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9505:6:19"},"nodeType":"YulFunctionCall","src":"9505:15:19"},"nodeType":"YulExpressionStatement","src":"9505:15:19"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"9342:184:19"},{"body":{"nodeType":"YulBlock","src":"9587:65:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9604:1:19","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"9607:3:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9597:6:19"},"nodeType":"YulFunctionCall","src":"9597:14:19"},"nodeType":"YulExpressionStatement","src":"9597:14:19"},{"nodeType":"YulAssignment","src":"9620:26:19","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9638:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9641:4:19","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"9628:9:19"},"nodeType":"YulFunctionCall","src":"9628:18:19"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"9620:4:19"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"9570:3:19","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"9578:4:19","type":""}],"src":"9531:121:19"},{"body":{"nodeType":"YulBlock","src":"9738:464:19","statements":[{"body":{"nodeType":"YulBlock","src":"9771:425:19","statements":[{"nodeType":"YulVariableDeclaration","src":"9785:11:19","value":{"kind":"number","nodeType":"YulLiteral","src":"9795:1:19","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9789:2:19","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"9816:2:19"},{"name":"array","nodeType":"YulIdentifier","src":"9820:5:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9809:6:19"},"nodeType":"YulFunctionCall","src":"9809:17:19"},"nodeType":"YulExpressionStatement","src":"9809:17:19"},{"nodeType":"YulVariableDeclaration","src":"9839:31:19","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"9861:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"9865:4:19","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"9851:9:19"},"nodeType":"YulFunctionCall","src":"9851:19:19"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"9843:4:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9883:57:19","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"9906:4:19"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9916:1:19","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"9923:10:19"},{"kind":"number","nodeType":"YulLiteral","src":"9935:2:19","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9919:3:19"},"nodeType":"YulFunctionCall","src":"9919:19:19"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"9912:3:19"},"nodeType":"YulFunctionCall","src":"9912:27:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9902:3:19"},"nodeType":"YulFunctionCall","src":"9902:38:19"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"9887:11:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"9977:23:19","statements":[{"nodeType":"YulAssignment","src":"9979:19:19","value":{"name":"data","nodeType":"YulIdentifier","src":"9994:4:19"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"9979:11:19"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"9959:10:19"},{"kind":"number","nodeType":"YulLiteral","src":"9971:4:19","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9956:2:19"},"nodeType":"YulFunctionCall","src":"9956:20:19"},"nodeType":"YulIf","src":"9953:47:19"},{"nodeType":"YulVariableDeclaration","src":"10013:41:19","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10027:4:19"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10037:1:19","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"10044:3:19"},{"kind":"number","nodeType":"YulLiteral","src":"10049:2:19","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10040:3:19"},"nodeType":"YulFunctionCall","src":"10040:12:19"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"10033:3:19"},"nodeType":"YulFunctionCall","src":"10033:20:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10023:3:19"},"nodeType":"YulFunctionCall","src":"10023:31:19"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"10017:2:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10067:24:19","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"10080:11:19"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"10071:5:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"10165:21:19","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"10174:5:19"},{"name":"_1","nodeType":"YulIdentifier","src":"10181:2:19"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"10167:6:19"},"nodeType":"YulFunctionCall","src":"10167:17:19"},"nodeType":"YulExpressionStatement","src":"10167:17:19"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"10115:5:19"},{"name":"_2","nodeType":"YulIdentifier","src":"10122:2:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10112:2:19"},"nodeType":"YulFunctionCall","src":"10112:13:19"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"10126:26:19","statements":[{"nodeType":"YulAssignment","src":"10128:22:19","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"10141:5:19"},{"kind":"number","nodeType":"YulLiteral","src":"10148:1:19","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10137:3:19"},"nodeType":"YulFunctionCall","src":"10137:13:19"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"10128:5:19"}]}]},"pre":{"nodeType":"YulBlock","src":"10108:3:19","statements":[]},"src":"10104:82:19"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"9754:3:19"},{"kind":"number","nodeType":"YulLiteral","src":"9759:2:19","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9751:2:19"},"nodeType":"YulFunctionCall","src":"9751:11:19"},"nodeType":"YulIf","src":"9748:448:19"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"9710:5:19","type":""},{"name":"len","nodeType":"YulTypedName","src":"9717:3:19","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"9722:10:19","type":""}],"src":"9657:545:19"},{"body":{"nodeType":"YulBlock","src":"10292:141:19","statements":[{"nodeType":"YulAssignment","src":"10302:125:19","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10317:4:19"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10335:1:19","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"10338:3:19"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10331:3:19"},"nodeType":"YulFunctionCall","src":"10331:11:19"},{"kind":"number","nodeType":"YulLiteral","src":"10344:66:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"10327:3:19"},"nodeType":"YulFunctionCall","src":"10327:84:19"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"10323:3:19"},"nodeType":"YulFunctionCall","src":"10323:89:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10313:3:19"},"nodeType":"YulFunctionCall","src":"10313:100:19"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10419:1:19","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"10422:3:19"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10415:3:19"},"nodeType":"YulFunctionCall","src":"10415:11:19"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"10310:2:19"},"nodeType":"YulFunctionCall","src":"10310:117:19"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"10302:4:19"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"10269:4:19","type":""},{"name":"len","nodeType":"YulTypedName","src":"10275:3:19","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"10283:4:19","type":""}],"src":"10207:226:19"},{"body":{"nodeType":"YulBlock","src":"10541:1222:19","statements":[{"body":{"nodeType":"YulBlock","src":"10582:22:19","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"10584:16:19"},"nodeType":"YulFunctionCall","src":"10584:18:19"},"nodeType":"YulExpressionStatement","src":"10584:18:19"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"10557:3:19"},{"kind":"number","nodeType":"YulLiteral","src":"10562:18:19","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10554:2:19"},"nodeType":"YulFunctionCall","src":"10554:27:19"},"nodeType":"YulIf","src":"10551:53:19"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"10657:4:19"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"10695:4:19"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"10689:5:19"},"nodeType":"YulFunctionCall","src":"10689:11:19"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"10663:25:19"},"nodeType":"YulFunctionCall","src":"10663:38:19"},{"name":"len","nodeType":"YulIdentifier","src":"10703:3:19"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"10613:43:19"},"nodeType":"YulFunctionCall","src":"10613:94:19"},"nodeType":"YulExpressionStatement","src":"10613:94:19"},{"nodeType":"YulVariableDeclaration","src":"10716:18:19","value":{"kind":"number","nodeType":"YulLiteral","src":"10733:1:19","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"10720:9:19","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"10777:728:19","statements":[{"nodeType":"YulVariableDeclaration","src":"10791:91:19","value":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"10810:3:19"},{"kind":"number","nodeType":"YulLiteral","src":"10815:66:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10806:3:19"},"nodeType":"YulFunctionCall","src":"10806:76:19"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"10795:7:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10895:49:19","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"10939:4:19"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"10909:29:19"},"nodeType":"YulFunctionCall","src":"10909:35:19"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"10899:6:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10957:18:19","value":{"name":"srcOffset","nodeType":"YulIdentifier","src":"10966:9:19"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"10961:1:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"11045:172:19","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"11070:6:19"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"11095:3:19"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"11100:9:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11091:3:19"},"nodeType":"YulFunctionCall","src":"11091:19:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11078:12:19"},"nodeType":"YulFunctionCall","src":"11078:33:19"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"11063:6:19"},"nodeType":"YulFunctionCall","src":"11063:49:19"},"nodeType":"YulExpressionStatement","src":"11063:49:19"},{"nodeType":"YulAssignment","src":"11129:24:19","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"11143:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"11151:1:19","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11139:3:19"},"nodeType":"YulFunctionCall","src":"11139:14:19"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"11129:6:19"}]},{"nodeType":"YulAssignment","src":"11170:33:19","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"11187:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"11198:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11183:3:19"},"nodeType":"YulFunctionCall","src":"11183:20:19"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"11170:9:19"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"10999:1:19"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"11002:7:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10996:2:19"},"nodeType":"YulFunctionCall","src":"10996:14:19"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"11011:21:19","statements":[{"nodeType":"YulAssignment","src":"11013:17:19","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"11022:1:19"},{"kind":"number","nodeType":"YulLiteral","src":"11025:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11018:3:19"},"nodeType":"YulFunctionCall","src":"11018:12:19"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"11013:1:19"}]}]},"pre":{"nodeType":"YulBlock","src":"10992:3:19","statements":[]},"src":"10988:229:19"},{"body":{"nodeType":"YulBlock","src":"11262:187:19","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"11287:6:19"},{"arguments":[{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"11316:3:19"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"11321:9:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11312:3:19"},"nodeType":"YulFunctionCall","src":"11312:19:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11299:12:19"},"nodeType":"YulFunctionCall","src":"11299:33:19"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11350:1:19","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"11353:3:19"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11346:3:19"},"nodeType":"YulFunctionCall","src":"11346:11:19"},{"kind":"number","nodeType":"YulLiteral","src":"11359:3:19","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11342:3:19"},"nodeType":"YulFunctionCall","src":"11342:21:19"},{"kind":"number","nodeType":"YulLiteral","src":"11365:66:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"11338:3:19"},"nodeType":"YulFunctionCall","src":"11338:94:19"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11334:3:19"},"nodeType":"YulFunctionCall","src":"11334:99:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11295:3:19"},"nodeType":"YulFunctionCall","src":"11295:139:19"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"11280:6:19"},"nodeType":"YulFunctionCall","src":"11280:155:19"},"nodeType":"YulExpressionStatement","src":"11280:155:19"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"11236:7:19"},{"name":"len","nodeType":"YulIdentifier","src":"11245:3:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"11233:2:19"},"nodeType":"YulFunctionCall","src":"11233:16:19"},"nodeType":"YulIf","src":"11230:219:19"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"11469:4:19"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11483:1:19","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"11486:3:19"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11479:3:19"},"nodeType":"YulFunctionCall","src":"11479:11:19"},{"kind":"number","nodeType":"YulLiteral","src":"11492:1:19","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11475:3:19"},"nodeType":"YulFunctionCall","src":"11475:19:19"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"11462:6:19"},"nodeType":"YulFunctionCall","src":"11462:33:19"},"nodeType":"YulExpressionStatement","src":"11462:33:19"}]},"nodeType":"YulCase","src":"10770:735:19","value":{"kind":"number","nodeType":"YulLiteral","src":"10775:1:19","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"11522:235:19","statements":[{"nodeType":"YulVariableDeclaration","src":"11536:14:19","value":{"kind":"number","nodeType":"YulLiteral","src":"11549:1:19","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"11540:5:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"11582:74:19","statements":[{"nodeType":"YulAssignment","src":"11600:42:19","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"11626:3:19"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"11631:9:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11622:3:19"},"nodeType":"YulFunctionCall","src":"11622:19:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11609:12:19"},"nodeType":"YulFunctionCall","src":"11609:33:19"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"11600:5:19"}]}]},"condition":{"name":"len","nodeType":"YulIdentifier","src":"11566:3:19"},"nodeType":"YulIf","src":"11563:93:19"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"11676:4:19"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11735:5:19"},{"name":"len","nodeType":"YulIdentifier","src":"11742:3:19"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"11682:52:19"},"nodeType":"YulFunctionCall","src":"11682:64:19"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"11669:6:19"},"nodeType":"YulFunctionCall","src":"11669:78:19"},"nodeType":"YulExpressionStatement","src":"11669:78:19"}]},"nodeType":"YulCase","src":"11514:243:19","value":"default"}],"expression":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"10753:3:19"},{"kind":"number","nodeType":"YulLiteral","src":"10758:2:19","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10750:2:19"},"nodeType":"YulFunctionCall","src":"10750:11:19"},"nodeType":"YulSwitch","src":"10743:1014:19"}]},"name":"copy_byte_array_to_storage_from_t_string_calldata_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"10521:4:19","type":""},{"name":"src","nodeType":"YulTypedName","src":"10527:3:19","type":""},{"name":"len","nodeType":"YulTypedName","src":"10532:3:19","type":""}],"src":"10438:1325:19"},{"body":{"nodeType":"YulBlock","src":"11942:174:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11959:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"11970:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11952:6:19"},"nodeType":"YulFunctionCall","src":"11952:21:19"},"nodeType":"YulExpressionStatement","src":"11952:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11993:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"12004:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11989:3:19"},"nodeType":"YulFunctionCall","src":"11989:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"12009:2:19","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11982:6:19"},"nodeType":"YulFunctionCall","src":"11982:30:19"},"nodeType":"YulExpressionStatement","src":"11982:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12032:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"12043:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12028:3:19"},"nodeType":"YulFunctionCall","src":"12028:18:19"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"12048:26:19","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12021:6:19"},"nodeType":"YulFunctionCall","src":"12021:54:19"},"nodeType":"YulExpressionStatement","src":"12021:54:19"},{"nodeType":"YulAssignment","src":"12084:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12096:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"12107:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12092:3:19"},"nodeType":"YulFunctionCall","src":"12092:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12084:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11919:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11933:4:19","type":""}],"src":"11768:348:19"},{"body":{"nodeType":"YulBlock","src":"12295:231:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12312:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"12323:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12305:6:19"},"nodeType":"YulFunctionCall","src":"12305:21:19"},"nodeType":"YulExpressionStatement","src":"12305:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12346:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"12357:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12342:3:19"},"nodeType":"YulFunctionCall","src":"12342:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"12362:2:19","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12335:6:19"},"nodeType":"YulFunctionCall","src":"12335:30:19"},"nodeType":"YulExpressionStatement","src":"12335:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12385:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"12396:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12381:3:19"},"nodeType":"YulFunctionCall","src":"12381:18:19"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"12401:34:19","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12374:6:19"},"nodeType":"YulFunctionCall","src":"12374:62:19"},"nodeType":"YulExpressionStatement","src":"12374:62:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12456:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"12467:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12452:3:19"},"nodeType":"YulFunctionCall","src":"12452:18:19"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"12472:11:19","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12445:6:19"},"nodeType":"YulFunctionCall","src":"12445:39:19"},"nodeType":"YulExpressionStatement","src":"12445:39:19"},{"nodeType":"YulAssignment","src":"12493:27:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12505:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"12516:3:19","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12501:3:19"},"nodeType":"YulFunctionCall","src":"12501:19:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12493:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12272:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12286:4:19","type":""}],"src":"12121:405:19"},{"body":{"nodeType":"YulBlock","src":"12715:894:19","statements":[{"nodeType":"YulVariableDeclaration","src":"12725:12:19","value":{"kind":"number","nodeType":"YulLiteral","src":"12736:1:19","type":"","value":"0"},"variables":[{"name":"ret","nodeType":"YulTypedName","src":"12729:3:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12746:30:19","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12769:6:19"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"12763:5:19"},"nodeType":"YulFunctionCall","src":"12763:13:19"},"variables":[{"name":"slotValue","nodeType":"YulTypedName","src":"12750:9:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12785:50:19","value":{"arguments":[{"name":"slotValue","nodeType":"YulIdentifier","src":"12825:9:19"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"12799:25:19"},"nodeType":"YulFunctionCall","src":"12799:36:19"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"12789:6:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12844:11:19","value":{"kind":"number","nodeType":"YulLiteral","src":"12854:1:19","type":"","value":"1"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"12848:2:19","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"12905:184:19","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12926:3:19"},{"arguments":[{"name":"slotValue","nodeType":"YulIdentifier","src":"12935:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"12946:66:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12931:3:19"},"nodeType":"YulFunctionCall","src":"12931:82:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12919:6:19"},"nodeType":"YulFunctionCall","src":"12919:95:19"},"nodeType":"YulExpressionStatement","src":"12919:95:19"},{"nodeType":"YulAssignment","src":"13027:52:19","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13038:3:19"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13047:6:19"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13069:6:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13062:6:19"},"nodeType":"YulFunctionCall","src":"13062:14:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13055:6:19"},"nodeType":"YulFunctionCall","src":"13055:22:19"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"13043:3:19"},"nodeType":"YulFunctionCall","src":"13043:35:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13034:3:19"},"nodeType":"YulFunctionCall","src":"13034:45:19"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"13027:3:19"}]}]},"nodeType":"YulCase","src":"12898:191:19","value":{"kind":"number","nodeType":"YulLiteral","src":"12903:1:19","type":"","value":"0"}},{"body":{"nodeType":"YulBlock","src":"13105:349:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13126:1:19","type":"","value":"0"},{"name":"value0","nodeType":"YulIdentifier","src":"13129:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13119:6:19"},"nodeType":"YulFunctionCall","src":"13119:17:19"},"nodeType":"YulExpressionStatement","src":"13119:17:19"},{"nodeType":"YulVariableDeclaration","src":"13149:14:19","value":{"kind":"number","nodeType":"YulLiteral","src":"13159:4:19","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"13153:2:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13176:31:19","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13201:1:19","type":"","value":"0"},{"name":"_2","nodeType":"YulIdentifier","src":"13204:2:19"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"13191:9:19"},"nodeType":"YulFunctionCall","src":"13191:16:19"},"variables":[{"name":"dataPos","nodeType":"YulTypedName","src":"13180:7:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13220:10:19","value":{"kind":"number","nodeType":"YulLiteral","src":"13229:1:19","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"13224:1:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"13297:111:19","statements":[{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13326:3:19"},{"name":"i","nodeType":"YulIdentifier","src":"13331:1:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13322:3:19"},"nodeType":"YulFunctionCall","src":"13322:11:19"},{"arguments":[{"name":"dataPos","nodeType":"YulIdentifier","src":"13341:7:19"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"13335:5:19"},"nodeType":"YulFunctionCall","src":"13335:14:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13315:6:19"},"nodeType":"YulFunctionCall","src":"13315:35:19"},"nodeType":"YulExpressionStatement","src":"13315:35:19"},{"nodeType":"YulAssignment","src":"13367:27:19","value":{"arguments":[{"name":"dataPos","nodeType":"YulIdentifier","src":"13382:7:19"},{"name":"_1","nodeType":"YulIdentifier","src":"13391:2:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13378:3:19"},"nodeType":"YulFunctionCall","src":"13378:16:19"},"variableNames":[{"name":"dataPos","nodeType":"YulIdentifier","src":"13367:7:19"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"13254:1:19"},{"name":"length","nodeType":"YulIdentifier","src":"13257:6:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"13251:2:19"},"nodeType":"YulFunctionCall","src":"13251:13:19"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"13265:19:19","statements":[{"nodeType":"YulAssignment","src":"13267:15:19","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"13276:1:19"},{"name":"_2","nodeType":"YulIdentifier","src":"13279:2:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13272:3:19"},"nodeType":"YulFunctionCall","src":"13272:10:19"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"13267:1:19"}]}]},"pre":{"nodeType":"YulBlock","src":"13247:3:19","statements":[]},"src":"13243:165:19"},{"nodeType":"YulAssignment","src":"13421:23:19","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13432:3:19"},{"name":"length","nodeType":"YulIdentifier","src":"13437:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13428:3:19"},"nodeType":"YulFunctionCall","src":"13428:16:19"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"13421:3:19"}]}]},"nodeType":"YulCase","src":"13098:356:19","value":{"kind":"number","nodeType":"YulLiteral","src":"13103:1:19","type":"","value":"1"}}],"expression":{"arguments":[{"name":"slotValue","nodeType":"YulIdentifier","src":"12875:9:19"},{"name":"_1","nodeType":"YulIdentifier","src":"12886:2:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12871:3:19"},"nodeType":"YulFunctionCall","src":"12871:18:19"},"nodeType":"YulSwitch","src":"12864:590:19"},{"nodeType":"YulVariableDeclaration","src":"13463:29:19","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13485:6:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13479:5:19"},"nodeType":"YulFunctionCall","src":"13479:13:19"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"13467:8:19","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13540:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"13548:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13536:3:19"},"nodeType":"YulFunctionCall","src":"13536:17:19"},{"name":"ret","nodeType":"YulIdentifier","src":"13555:3:19"},{"name":"length_1","nodeType":"YulIdentifier","src":"13560:8:19"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"13501:34:19"},"nodeType":"YulFunctionCall","src":"13501:68:19"},"nodeType":"YulExpressionStatement","src":"13501:68:19"},{"nodeType":"YulAssignment","src":"13578:25:19","value":{"arguments":[{"name":"ret","nodeType":"YulIdentifier","src":"13589:3:19"},{"name":"length_1","nodeType":"YulIdentifier","src":"13594:8:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13585:3:19"},"nodeType":"YulFunctionCall","src":"13585:18:19"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13578:3:19"}]}]},"name":"abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12683:3:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12688:6:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12696:6:19","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12707:3:19","type":""}],"src":"12531:1078:19"},{"body":{"nodeType":"YulBlock","src":"13788:228:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13805:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"13816:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13798:6:19"},"nodeType":"YulFunctionCall","src":"13798:21:19"},"nodeType":"YulExpressionStatement","src":"13798:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13839:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"13850:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13835:3:19"},"nodeType":"YulFunctionCall","src":"13835:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"13855:2:19","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13828:6:19"},"nodeType":"YulFunctionCall","src":"13828:30:19"},"nodeType":"YulExpressionStatement","src":"13828:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13878:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"13889:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13874:3:19"},"nodeType":"YulFunctionCall","src":"13874:18:19"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"13894:34:19","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13867:6:19"},"nodeType":"YulFunctionCall","src":"13867:62:19"},"nodeType":"YulExpressionStatement","src":"13867:62:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13949:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"13960:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13945:3:19"},"nodeType":"YulFunctionCall","src":"13945:18:19"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"13965:8:19","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13938:6:19"},"nodeType":"YulFunctionCall","src":"13938:36:19"},"nodeType":"YulExpressionStatement","src":"13938:36:19"},{"nodeType":"YulAssignment","src":"13983:27:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13995:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"14006:3:19","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13991:3:19"},"nodeType":"YulFunctionCall","src":"13991:19:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13983:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13765:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13779:4:19","type":""}],"src":"13614:402:19"},{"body":{"nodeType":"YulBlock","src":"14195:227:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14212:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"14223:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14205:6:19"},"nodeType":"YulFunctionCall","src":"14205:21:19"},"nodeType":"YulExpressionStatement","src":"14205:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14246:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"14257:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14242:3:19"},"nodeType":"YulFunctionCall","src":"14242:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"14262:2:19","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14235:6:19"},"nodeType":"YulFunctionCall","src":"14235:30:19"},"nodeType":"YulExpressionStatement","src":"14235:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14285:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"14296:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14281:3:19"},"nodeType":"YulFunctionCall","src":"14281:18:19"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"14301:34:19","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14274:6:19"},"nodeType":"YulFunctionCall","src":"14274:62:19"},"nodeType":"YulExpressionStatement","src":"14274:62:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14356:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"14367:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14352:3:19"},"nodeType":"YulFunctionCall","src":"14352:18:19"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"14372:7:19","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14345:6:19"},"nodeType":"YulFunctionCall","src":"14345:35:19"},"nodeType":"YulExpressionStatement","src":"14345:35:19"},{"nodeType":"YulAssignment","src":"14389:27:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14401:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"14412:3:19","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14397:3:19"},"nodeType":"YulFunctionCall","src":"14397:19:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14389:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14172:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14186:4:19","type":""}],"src":"14021:401:19"},{"body":{"nodeType":"YulBlock","src":"14601:226:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14618:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"14629:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14611:6:19"},"nodeType":"YulFunctionCall","src":"14611:21:19"},"nodeType":"YulExpressionStatement","src":"14611:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14652:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"14663:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14648:3:19"},"nodeType":"YulFunctionCall","src":"14648:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"14668:2:19","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14641:6:19"},"nodeType":"YulFunctionCall","src":"14641:30:19"},"nodeType":"YulExpressionStatement","src":"14641:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14691:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"14702:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14687:3:19"},"nodeType":"YulFunctionCall","src":"14687:18:19"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"14707:34:19","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14680:6:19"},"nodeType":"YulFunctionCall","src":"14680:62:19"},"nodeType":"YulExpressionStatement","src":"14680:62:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14762:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"14773:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14758:3:19"},"nodeType":"YulFunctionCall","src":"14758:18:19"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"14778:6:19","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14751:6:19"},"nodeType":"YulFunctionCall","src":"14751:34:19"},"nodeType":"YulExpressionStatement","src":"14751:34:19"},{"nodeType":"YulAssignment","src":"14794:27:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14806:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"14817:3:19","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14802:3:19"},"nodeType":"YulFunctionCall","src":"14802:19:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14794:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14578:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14592:4:19","type":""}],"src":"14427:400:19"},{"body":{"nodeType":"YulBlock","src":"15006:182:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15023:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"15034:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15016:6:19"},"nodeType":"YulFunctionCall","src":"15016:21:19"},"nodeType":"YulExpressionStatement","src":"15016:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15057:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"15068:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15053:3:19"},"nodeType":"YulFunctionCall","src":"15053:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"15073:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15046:6:19"},"nodeType":"YulFunctionCall","src":"15046:30:19"},"nodeType":"YulExpressionStatement","src":"15046:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15096:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"15107:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15092:3:19"},"nodeType":"YulFunctionCall","src":"15092:18:19"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"15112:34:19","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15085:6:19"},"nodeType":"YulFunctionCall","src":"15085:62:19"},"nodeType":"YulExpressionStatement","src":"15085:62:19"},{"nodeType":"YulAssignment","src":"15156:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15168:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"15179:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15164:3:19"},"nodeType":"YulFunctionCall","src":"15164:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15156:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14983:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14997:4:19","type":""}],"src":"14832:356:19"},{"body":{"nodeType":"YulBlock","src":"15367:168:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15384:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"15395:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15377:6:19"},"nodeType":"YulFunctionCall","src":"15377:21:19"},"nodeType":"YulExpressionStatement","src":"15377:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15418:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"15429:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15414:3:19"},"nodeType":"YulFunctionCall","src":"15414:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"15434:2:19","type":"","value":"18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15407:6:19"},"nodeType":"YulFunctionCall","src":"15407:30:19"},"nodeType":"YulExpressionStatement","src":"15407:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15457:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"15468:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15453:3:19"},"nodeType":"YulFunctionCall","src":"15453:18:19"},{"hexValue":"416c72656164792072656769737465726564","kind":"string","nodeType":"YulLiteral","src":"15473:20:19","type":"","value":"Already registered"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15446:6:19"},"nodeType":"YulFunctionCall","src":"15446:48:19"},"nodeType":"YulExpressionStatement","src":"15446:48:19"},{"nodeType":"YulAssignment","src":"15503:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15515:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"15526:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15511:3:19"},"nodeType":"YulFunctionCall","src":"15511:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15503:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_4935f8dc8deae1355305b992e890d0242809a3705c9c83131ed47acca0dd4fe2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15344:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15358:4:19","type":""}],"src":"15193:342:19"},{"body":{"nodeType":"YulBlock","src":"15636:1375:19","statements":[{"nodeType":"YulVariableDeclaration","src":"15646:24:19","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"15666:3:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15660:5:19"},"nodeType":"YulFunctionCall","src":"15660:10:19"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"15650:6:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"15713:22:19","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"15715:16:19"},"nodeType":"YulFunctionCall","src":"15715:18:19"},"nodeType":"YulExpressionStatement","src":"15715:18:19"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"15685:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"15693:18:19","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15682:2:19"},"nodeType":"YulFunctionCall","src":"15682:30:19"},"nodeType":"YulIf","src":"15679:56:19"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"15788:4:19"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"15826:4:19"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"15820:5:19"},"nodeType":"YulFunctionCall","src":"15820:11:19"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"15794:25:19"},"nodeType":"YulFunctionCall","src":"15794:38:19"},{"name":"newLen","nodeType":"YulIdentifier","src":"15834:6:19"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"15744:43:19"},"nodeType":"YulFunctionCall","src":"15744:97:19"},"nodeType":"YulExpressionStatement","src":"15744:97:19"},{"nodeType":"YulVariableDeclaration","src":"15850:18:19","value":{"kind":"number","nodeType":"YulLiteral","src":"15867:1:19","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"15854:9:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"15877:23:19","value":{"kind":"number","nodeType":"YulLiteral","src":"15896:4:19","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"15881:11:19","type":""}]},{"nodeType":"YulAssignment","src":"15909:24:19","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"15922:11:19"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"15909:9:19"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"15979:775:19","statements":[{"nodeType":"YulVariableDeclaration","src":"15993:94:19","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"16012:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"16020:66:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16008:3:19"},"nodeType":"YulFunctionCall","src":"16008:79:19"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"15997:7:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16100:49:19","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"16144:4:19"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"16114:29:19"},"nodeType":"YulFunctionCall","src":"16114:35:19"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"16104:6:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16162:10:19","value":{"kind":"number","nodeType":"YulLiteral","src":"16171:1:19","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"16166:1:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"16249:172:19","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"16274:6:19"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"16292:3:19"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"16297:9:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16288:3:19"},"nodeType":"YulFunctionCall","src":"16288:19:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16282:5:19"},"nodeType":"YulFunctionCall","src":"16282:26:19"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"16267:6:19"},"nodeType":"YulFunctionCall","src":"16267:42:19"},"nodeType":"YulExpressionStatement","src":"16267:42:19"},{"nodeType":"YulAssignment","src":"16326:24:19","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"16340:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"16348:1:19","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16336:3:19"},"nodeType":"YulFunctionCall","src":"16336:14:19"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"16326:6:19"}]},{"nodeType":"YulAssignment","src":"16367:40:19","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"16384:9:19"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"16395:11:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16380:3:19"},"nodeType":"YulFunctionCall","src":"16380:27:19"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"16367:9:19"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"16196:1:19"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"16199:7:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16193:2:19"},"nodeType":"YulFunctionCall","src":"16193:14:19"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"16208:28:19","statements":[{"nodeType":"YulAssignment","src":"16210:24:19","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"16219:1:19"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"16222:11:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16215:3:19"},"nodeType":"YulFunctionCall","src":"16215:19:19"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"16210:1:19"}]}]},"pre":{"nodeType":"YulBlock","src":"16189:3:19","statements":[]},"src":"16185:236:19"},{"body":{"nodeType":"YulBlock","src":"16469:226:19","statements":[{"nodeType":"YulVariableDeclaration","src":"16487:43:19","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"16514:3:19"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"16519:9:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16510:3:19"},"nodeType":"YulFunctionCall","src":"16510:19:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16504:5:19"},"nodeType":"YulFunctionCall","src":"16504:26:19"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"16491:9:19","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"16554:6:19"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"16566:9:19"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16593:1:19","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"16596:6:19"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16589:3:19"},"nodeType":"YulFunctionCall","src":"16589:14:19"},{"kind":"number","nodeType":"YulLiteral","src":"16605:3:19","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16585:3:19"},"nodeType":"YulFunctionCall","src":"16585:24:19"},{"kind":"number","nodeType":"YulLiteral","src":"16611:66:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"16581:3:19"},"nodeType":"YulFunctionCall","src":"16581:97:19"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"16577:3:19"},"nodeType":"YulFunctionCall","src":"16577:102:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16562:3:19"},"nodeType":"YulFunctionCall","src":"16562:118:19"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"16547:6:19"},"nodeType":"YulFunctionCall","src":"16547:134:19"},"nodeType":"YulExpressionStatement","src":"16547:134:19"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"16440:7:19"},{"name":"newLen","nodeType":"YulIdentifier","src":"16449:6:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16437:2:19"},"nodeType":"YulFunctionCall","src":"16437:19:19"},"nodeType":"YulIf","src":"16434:261:19"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"16715:4:19"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16729:1:19","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"16732:6:19"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16725:3:19"},"nodeType":"YulFunctionCall","src":"16725:14:19"},{"kind":"number","nodeType":"YulLiteral","src":"16741:1:19","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16721:3:19"},"nodeType":"YulFunctionCall","src":"16721:22:19"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"16708:6:19"},"nodeType":"YulFunctionCall","src":"16708:36:19"},"nodeType":"YulExpressionStatement","src":"16708:36:19"}]},"nodeType":"YulCase","src":"15972:782:19","value":{"kind":"number","nodeType":"YulLiteral","src":"15977:1:19","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"16771:234:19","statements":[{"nodeType":"YulVariableDeclaration","src":"16785:14:19","value":{"kind":"number","nodeType":"YulLiteral","src":"16798:1:19","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"16789:5:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"16834:67:19","statements":[{"nodeType":"YulAssignment","src":"16852:35:19","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"16871:3:19"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"16876:9:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16867:3:19"},"nodeType":"YulFunctionCall","src":"16867:19:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16861:5:19"},"nodeType":"YulFunctionCall","src":"16861:26:19"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"16852:5:19"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"16815:6:19"},"nodeType":"YulIf","src":"16812:89:19"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"16921:4:19"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16980:5:19"},{"name":"newLen","nodeType":"YulIdentifier","src":"16987:6:19"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"16927:52:19"},"nodeType":"YulFunctionCall","src":"16927:67:19"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"16914:6:19"},"nodeType":"YulFunctionCall","src":"16914:81:19"},"nodeType":"YulExpressionStatement","src":"16914:81:19"}]},"nodeType":"YulCase","src":"16763:242:19","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"15952:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"15960:2:19","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15949:2:19"},"nodeType":"YulFunctionCall","src":"15949:14:19"},"nodeType":"YulSwitch","src":"15942:1063:19"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"15621:4:19","type":""},{"name":"src","nodeType":"YulTypedName","src":"15627:3:19","type":""}],"src":"15540:1471:19"},{"body":{"nodeType":"YulBlock","src":"17190:175:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17207:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"17218:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17200:6:19"},"nodeType":"YulFunctionCall","src":"17200:21:19"},"nodeType":"YulExpressionStatement","src":"17200:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17241:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"17252:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17237:3:19"},"nodeType":"YulFunctionCall","src":"17237:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"17257:2:19","type":"","value":"25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17230:6:19"},"nodeType":"YulFunctionCall","src":"17230:30:19"},"nodeType":"YulExpressionStatement","src":"17230:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17280:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"17291:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17276:3:19"},"nodeType":"YulFunctionCall","src":"17276:18:19"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"17296:27:19","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17269:6:19"},"nodeType":"YulFunctionCall","src":"17269:55:19"},"nodeType":"YulExpressionStatement","src":"17269:55:19"},{"nodeType":"YulAssignment","src":"17333:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17345:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"17356:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17341:3:19"},"nodeType":"YulFunctionCall","src":"17341:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17333:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17167:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17181:4:19","type":""}],"src":"17016:349:19"},{"body":{"nodeType":"YulBlock","src":"17544:240:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17561:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"17572:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17554:6:19"},"nodeType":"YulFunctionCall","src":"17554:21:19"},"nodeType":"YulExpressionStatement","src":"17554:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17595:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"17606:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17591:3:19"},"nodeType":"YulFunctionCall","src":"17591:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"17611:2:19","type":"","value":"50"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17584:6:19"},"nodeType":"YulFunctionCall","src":"17584:30:19"},"nodeType":"YulExpressionStatement","src":"17584:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17634:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"17645:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17630:3:19"},"nodeType":"YulFunctionCall","src":"17630:18:19"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"17650:34:19","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17623:6:19"},"nodeType":"YulFunctionCall","src":"17623:62:19"},"nodeType":"YulExpressionStatement","src":"17623:62:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17705:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"17716:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17701:3:19"},"nodeType":"YulFunctionCall","src":"17701:18:19"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"17721:20:19","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17694:6:19"},"nodeType":"YulFunctionCall","src":"17694:48:19"},"nodeType":"YulExpressionStatement","src":"17694:48:19"},{"nodeType":"YulAssignment","src":"17751:27:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17763:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"17774:3:19","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17759:3:19"},"nodeType":"YulFunctionCall","src":"17759:19:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17751:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17521:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17535:4:19","type":""}],"src":"17370:414:19"},{"body":{"nodeType":"YulBlock","src":"17963:182:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17980:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"17991:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17973:6:19"},"nodeType":"YulFunctionCall","src":"17973:21:19"},"nodeType":"YulExpressionStatement","src":"17973:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18014:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"18025:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18010:3:19"},"nodeType":"YulFunctionCall","src":"18010:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"18030:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18003:6:19"},"nodeType":"YulFunctionCall","src":"18003:30:19"},"nodeType":"YulExpressionStatement","src":"18003:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18053:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"18064:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18049:3:19"},"nodeType":"YulFunctionCall","src":"18049:18:19"},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"18069:34:19","type":"","value":"ERC721: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18042:6:19"},"nodeType":"YulFunctionCall","src":"18042:62:19"},"nodeType":"YulExpressionStatement","src":"18042:62:19"},{"nodeType":"YulAssignment","src":"18113:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18125:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"18136:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18121:3:19"},"nodeType":"YulFunctionCall","src":"18121:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18113:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17940:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17954:4:19","type":""}],"src":"17789:356:19"},{"body":{"nodeType":"YulBlock","src":"18324:178:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18341:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"18352:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18334:6:19"},"nodeType":"YulFunctionCall","src":"18334:21:19"},"nodeType":"YulExpressionStatement","src":"18334:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18375:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"18386:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18371:3:19"},"nodeType":"YulFunctionCall","src":"18371:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"18391:2:19","type":"","value":"28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18364:6:19"},"nodeType":"YulFunctionCall","src":"18364:30:19"},"nodeType":"YulExpressionStatement","src":"18364:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18414:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"18425:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18410:3:19"},"nodeType":"YulFunctionCall","src":"18410:18:19"},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","kind":"string","nodeType":"YulLiteral","src":"18430:30:19","type":"","value":"ERC721: token already minted"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18403:6:19"},"nodeType":"YulFunctionCall","src":"18403:58:19"},"nodeType":"YulExpressionStatement","src":"18403:58:19"},{"nodeType":"YulAssignment","src":"18470:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18482:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"18493:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18478:3:19"},"nodeType":"YulFunctionCall","src":"18478:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18470:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18301:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18315:4:19","type":""}],"src":"18150:352:19"},{"body":{"nodeType":"YulBlock","src":"18710:309:19","statements":[{"nodeType":"YulVariableDeclaration","src":"18720:52:19","value":{"kind":"number","nodeType":"YulLiteral","src":"18730:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"18724:2:19","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18788:9:19"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18803:6:19"},{"name":"_1","nodeType":"YulIdentifier","src":"18811:2:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18799:3:19"},"nodeType":"YulFunctionCall","src":"18799:15:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18781:6:19"},"nodeType":"YulFunctionCall","src":"18781:34:19"},"nodeType":"YulExpressionStatement","src":"18781:34:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18835:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"18846:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18831:3:19"},"nodeType":"YulFunctionCall","src":"18831:18:19"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"18855:6:19"},{"name":"_1","nodeType":"YulIdentifier","src":"18863:2:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18851:3:19"},"nodeType":"YulFunctionCall","src":"18851:15:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18824:6:19"},"nodeType":"YulFunctionCall","src":"18824:43:19"},"nodeType":"YulExpressionStatement","src":"18824:43:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18887:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"18898:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18883:3:19"},"nodeType":"YulFunctionCall","src":"18883:18:19"},{"name":"value2","nodeType":"YulIdentifier","src":"18903:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18876:6:19"},"nodeType":"YulFunctionCall","src":"18876:34:19"},"nodeType":"YulExpressionStatement","src":"18876:34:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18930:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"18941:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18926:3:19"},"nodeType":"YulFunctionCall","src":"18926:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"18946:3:19","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18919:6:19"},"nodeType":"YulFunctionCall","src":"18919:31:19"},"nodeType":"YulExpressionStatement","src":"18919:31:19"},{"nodeType":"YulAssignment","src":"18959:54:19","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"18985:6:19"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18997:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"19008:3:19","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18993:3:19"},"nodeType":"YulFunctionCall","src":"18993:19:19"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"18967:17:19"},"nodeType":"YulFunctionCall","src":"18967:46:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18959:4:19"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18655:9:19","type":""},{"name":"value3","nodeType":"YulTypedName","src":"18666:6:19","type":""},{"name":"value2","nodeType":"YulTypedName","src":"18674:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"18682:6:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18690:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18701:4:19","type":""}],"src":"18507:512:19"},{"body":{"nodeType":"YulBlock","src":"19104:169:19","statements":[{"body":{"nodeType":"YulBlock","src":"19150:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19159:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19162:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19152:6:19"},"nodeType":"YulFunctionCall","src":"19152:12:19"},"nodeType":"YulExpressionStatement","src":"19152:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"19125:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"19134:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19121:3:19"},"nodeType":"YulFunctionCall","src":"19121:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"19146:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"19117:3:19"},"nodeType":"YulFunctionCall","src":"19117:32:19"},"nodeType":"YulIf","src":"19114:52:19"},{"nodeType":"YulVariableDeclaration","src":"19175:29:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19194:9:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19188:5:19"},"nodeType":"YulFunctionCall","src":"19188:16:19"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"19179:5:19","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19237:5:19"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"19213:23:19"},"nodeType":"YulFunctionCall","src":"19213:30:19"},"nodeType":"YulExpressionStatement","src":"19213:30:19"},{"nodeType":"YulAssignment","src":"19252:15:19","value":{"name":"value","nodeType":"YulIdentifier","src":"19262:5:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"19252:6:19"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19070:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"19081:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"19093:6:19","type":""}],"src":"19024:249:19"},{"body":{"nodeType":"YulBlock","src":"19452:243:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19469:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"19480:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19462:6:19"},"nodeType":"YulFunctionCall","src":"19462:21:19"},"nodeType":"YulExpressionStatement","src":"19462:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19503:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"19514:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19499:3:19"},"nodeType":"YulFunctionCall","src":"19499:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"19519:2:19","type":"","value":"53"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19492:6:19"},"nodeType":"YulFunctionCall","src":"19492:30:19"},"nodeType":"YulExpressionStatement","src":"19492:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19542:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"19553:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19538:3:19"},"nodeType":"YulFunctionCall","src":"19538:18:19"},{"hexValue":"455243373231456e756d657261626c653a20636f6e7365637574697665207472","kind":"string","nodeType":"YulLiteral","src":"19558:34:19","type":"","value":"ERC721Enumerable: consecutive tr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19531:6:19"},"nodeType":"YulFunctionCall","src":"19531:62:19"},"nodeType":"YulExpressionStatement","src":"19531:62:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19613:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"19624:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19609:3:19"},"nodeType":"YulFunctionCall","src":"19609:18:19"},{"hexValue":"616e7366657273206e6f7420737570706f72746564","kind":"string","nodeType":"YulLiteral","src":"19629:23:19","type":"","value":"ansfers not supported"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19602:6:19"},"nodeType":"YulFunctionCall","src":"19602:51:19"},"nodeType":"YulExpressionStatement","src":"19602:51:19"},{"nodeType":"YulAssignment","src":"19662:27:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19674:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"19685:3:19","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19670:3:19"},"nodeType":"YulFunctionCall","src":"19670:19:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19662:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19429:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19443:4:19","type":""}],"src":"19278:417:19"},{"body":{"nodeType":"YulBlock","src":"19749:233:19","statements":[{"nodeType":"YulAssignment","src":"19759:17:19","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"19771:1:19"},{"name":"y","nodeType":"YulIdentifier","src":"19774:1:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19767:3:19"},"nodeType":"YulFunctionCall","src":"19767:9:19"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"19759:4:19"}]},{"body":{"nodeType":"YulBlock","src":"19808:168:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19829:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19832:77:19","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19822:6:19"},"nodeType":"YulFunctionCall","src":"19822:88:19"},"nodeType":"YulExpressionStatement","src":"19822:88:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19930:1:19","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"19933:4:19","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19923:6:19"},"nodeType":"YulFunctionCall","src":"19923:15:19"},"nodeType":"YulExpressionStatement","src":"19923:15:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19958:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19961:4:19","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19951:6:19"},"nodeType":"YulFunctionCall","src":"19951:15:19"},"nodeType":"YulExpressionStatement","src":"19951:15:19"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"19791:4:19"},{"name":"x","nodeType":"YulIdentifier","src":"19797:1:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"19788:2:19"},"nodeType":"YulFunctionCall","src":"19788:11:19"},"nodeType":"YulIf","src":"19785:191:19"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"19731:1:19","type":""},{"name":"y","nodeType":"YulTypedName","src":"19734:1:19","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"19740:4:19","type":""}],"src":"19700:282:19"},{"body":{"nodeType":"YulBlock","src":"20019:152:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20036:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20039:77:19","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20029:6:19"},"nodeType":"YulFunctionCall","src":"20029:88:19"},"nodeType":"YulExpressionStatement","src":"20029:88:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20133:1:19","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"20136:4:19","type":"","value":"0x31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20126:6:19"},"nodeType":"YulFunctionCall","src":"20126:15:19"},"nodeType":"YulExpressionStatement","src":"20126:15:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20157:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20160:4:19","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20150:6:19"},"nodeType":"YulFunctionCall","src":"20150:15:19"},"nodeType":"YulExpressionStatement","src":"20150:15:19"}]},"name":"panic_error_0x31","nodeType":"YulFunctionDefinition","src":"19987:184:19"}]},"contents":"{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_available_length_string(src, length, end) -> array\n    {\n        let _1 := 0xffffffffffffffff\n        if gt(length, _1) { panic_error_0x41() }\n        let _2 := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(length, 31), _2), 63), _2))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        array := memPtr\n        mstore(memPtr, length)\n        if gt(add(src, length), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), src, length)\n        mstore(add(add(memPtr, length), 0x20), 0)\n    }\n    function abi_decode_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        array := abi_decode_available_length_string(add(offset, 0x20), calldataload(offset), end)\n    }\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_string(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_string_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function abi_decode_tuple_t_uint256t_string_memory_ptrt_address(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_string(add(headStart, offset), dataEnd)\n        value2 := abi_decode_address(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        value3 := abi_decode_available_length_string(add(_1, 32), calldataload(_1), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC721: approval to current owne\")\n        mstore(add(headStart, 96), \"r\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 61)\n        mstore(add(headStart, 64), \"ERC721: approve caller is not to\")\n        mstore(add(headStart, 96), \"ken owner or approved for all\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC721: caller is not token owne\")\n        mstore(add(headStart, 96), \"r or approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"ERC721Enumerable: owner index ou\")\n        mstore(add(headStart, 96), \"t of bounds\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"ERC721Enumerable: global index o\")\n        mstore(add(headStart, 96), \"ut of bounds\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_calldata_ptr_to_t_string_storage(slot, src, len)\n    {\n        if gt(len, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), len)\n        let srcOffset := 0\n        switch gt(len, 31)\n        case 1 {\n            let loopEnd := and(len, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := srcOffset\n            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n            {\n                sstore(dstPtr, calldataload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 0x20)\n            }\n            if lt(loopEnd, len)\n            {\n                sstore(dstPtr, and(calldataload(add(src, srcOffset)), not(shr(and(shl(3, len), 248), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))))\n            }\n            sstore(slot, add(shl(1, len), 1))\n        }\n        default {\n            let value := 0\n            if len\n            {\n                value := calldataload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, len))\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ERC721: invalid token ID\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC721: address zero is not a va\")\n        mstore(add(headStart, 96), \"lid owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let ret := 0\n        let slotValue := sload(value0)\n        let length := extract_byte_array_length(slotValue)\n        let _1 := 1\n        switch and(slotValue, _1)\n        case 0 {\n            mstore(pos, and(slotValue, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00))\n            ret := add(pos, mul(length, iszero(iszero(length))))\n        }\n        case 1 {\n            mstore(0, value0)\n            let _2 := 0x20\n            let dataPos := keccak256(0, _2)\n            let i := 0\n            for { } lt(i, length) { i := add(i, _2) }\n            {\n                mstore(add(pos, i), sload(dataPos))\n                dataPos := add(dataPos, _1)\n            }\n            ret := add(pos, length)\n        }\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), ret, length_1)\n        end := add(ret, length_1)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC721: transfer from incorrect \")\n        mstore(add(headStart, 96), \"owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC721: transfer to the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_4935f8dc8deae1355305b992e890d0242809a3705c9c83131ed47acca0dd4fe2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"Already registered\")\n        tail := add(headStart, 96)\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"ERC721: approve to caller\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"ERC721: transfer to non ERC721Re\")\n        mstore(add(headStart, 96), \"ceiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"ERC721: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"ERC721: token already minted\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 53)\n        mstore(add(headStart, 64), \"ERC721Enumerable: consecutive tr\")\n        mstore(add(headStart, 96), \"ansfers not supported\")\n        tail := add(headStart, 128)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x31()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n}","id":19,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063601219b71161010457806395d89b41116100a2578063c87b56dd11610071578063c87b56dd146103b7578063e985e9c5146103ca578063f2fde38b14610406578063f46eccc41461041957600080fd5b806395d89b4114610376578063983b2d561461037e578063a22cb46514610391578063b88d4fde146103a457600080fd5b80636c0360eb116100de5780636c0360eb1461034257806370a082311461034a578063715018a61461035d5780638da5cb5b1461036557600080fd5b8063601219b7146103095780636352211e1461031c5780636b8ff5741461032f57600080fd5b806323b872dd1161017157806342842e0e1161014b57806342842e0e146102bd5780634622ab03146102d05780634f6ccce7146102e357806355f804b3146102f657600080fd5b806323b872dd146102845780632f745c59146102975780633092afd5146102aa57600080fd5b8063095ea7b3116101ad578063095ea7b31461023c578063150306331461025157806318160ddd146102595780631e7663bc1461026b57600080fd5b806301ffc9a7146101d457806306fdde03146101fc578063081812fc14610211575b600080fd5b6101e76101e2366004611c56565b61043c565b60405190151581526020015b60405180910390f35b6102046104b4565b6040516101f39190611ce1565b61022461021f366004611cf4565b610546565b6040516001600160a01b0390911681526020016101f3565b61024f61024a366004611d29565b61056d565b005b6102046106a3565b6009545b6040519081526020016101f3565b61025d610279366004611e36565b805160209091012090565b61024f610292366004611e6b565b610731565b61025d6102a5366004611d29565b6107b8565b61024f6102b8366004611ea7565b610863565b61024f6102cb366004611e6b565b6108d2565b6102046102de366004611cf4565b6108ed565b61025d6102f1366004611cf4565b610906565b61024f610304366004611ec2565b6109aa565b61024f610317366004611f34565b6109bf565b61022461032a366004611cf4565b6109e6565b61020461033d366004611cf4565b610a4b565b610204610aef565b61025d610358366004611ea7565b610afc565b61024f610b96565b6000546001600160a01b0316610224565b610204610baa565b61024f61038c366004611ea7565b610bb9565b61024f61039f366004611f8b565b610c2b565b61024f6103b2366004611fc7565b610c3a565b6102046103c5366004611cf4565b610cc8565b6101e76103d8366004612043565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b61024f610414366004611ea7565b610d36565b6101e7610427366004611ea7565b600e6020526000908152604090205460ff1681565b60008061044883610dc6565b905080156104595750600192915050565b7f87f1629d000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008416016104ab5750600192915050565b50600092915050565b6060600180546104c390612076565b80601f01602080910402602001604051908101604052809291908181526020018280546104ef90612076565b801561053c5780601f106105115761010080835404028352916020019161053c565b820191906000526020600020905b81548152906001019060200180831161051f57829003601f168201915b5050505050905090565b600061055182610e1c565b506000908152600560205260409020546001600160a01b031690565b6000610578826109e6565b9050806001600160a01b0316836001600160a01b0316036106065760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b0382161480610622575061062281336103d8565b6106945760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016105fd565b61069e8383610e80565b505050565b600b80546106b090612076565b80601f01602080910402602001604051908101604052809291908181526020018280546106dc90612076565b80156107295780601f106106fe57610100808354040283529160200191610729565b820191906000526020600020905b81548152906001019060200180831161070c57829003601f168201915b505050505081565b61073b3382610f06565b6107ad5760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f7665640000000000000000000000000000000000000060648201526084016105fd565b61069e838383610f85565b60006107c383610afc565b82106108375760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e647300000000000000000000000000000000000000000060648201526084016105fd565b506001600160a01b03821660009081526007602090815260408083208484529091529020545b92915050565b61086b6111f1565b6001600160a01b0381166000818152600e602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055517fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb666929190a250565b61069e83838360405180602001604052806000815250610c3a565b600d60205260009081526040902080546106b090612076565b600061091160095490565b82106109855760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e6473000000000000000000000000000000000000000060648201526084016105fd565b60098281548110610998576109986120c9565b90600052602060002001549050919050565b6109b26111f1565b600c61069e828483612146565b336000908152600e602052604090205460ff166109db57600080fd5b61069e83838361124b565b6000818152600360205260408120546001600160a01b03168061085d5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016105fd565b6000818152600d6020526040812080546060929190610a6990612076565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9590612076565b8015610ae25780601f10610ab757610100808354040283529160200191610ae2565b820191906000526020600020905b815481529060010190602001808311610ac557829003601f168201915b5093979650505050505050565b600c80546106b090612076565b60006001600160a01b038216610b7a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e6572000000000000000000000000000000000000000000000060648201526084016105fd565b506001600160a01b031660009081526004602052604090205490565b610b9e6111f1565b610ba8600061130d565b565b6060600280546104c390612076565b610bc16111f1565b6001600160a01b0381166000818152600e602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f69190a250565b610c36338383611375565b5050565b610c443383610f06565b610cb65760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f7665640000000000000000000000000000000000000060648201526084016105fd565b610cc284848484611461565b50505050565b6060610cd382610e1c565b6000610cde83610a4b565b90506000600c8054610cef90612076565b905011610d0b5760405180602001604052806000815250610d2f565b600c81604051602001610d1f929190612260565b6040516020818303038152906040525b9392505050565b610d3e6111f1565b6001600160a01b038116610dba5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016105fd565b610dc38161130d565b50565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d6300000000000000000000000000000000000000000000000000000000148061085d575061085d826114ea565b6000818152600360205260409020546001600160a01b0316610dc35760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016105fd565b600081815260056020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384169081179091558190610ecd826109e6565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610f12836109e6565b9050806001600160a01b0316846001600160a01b03161480610f5957506001600160a01b0380821660009081526006602090815260408083209388168352929052205460ff165b80610f7d5750836001600160a01b0316610f7284610546565b6001600160a01b0316145b949350505050565b826001600160a01b0316610f98826109e6565b6001600160a01b0316146110145760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016105fd565b6001600160a01b03821661108f5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016105fd565b61109c83838360016115cd565b826001600160a01b03166110af826109e6565b6001600160a01b03161461112b5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016105fd565b600081815260056020908152604080832080547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001600160a01b038781168086526004855283862080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01905590871680865283862080546001019055868652600390945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000546001600160a01b03163314610ba85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105fd565b6000838152600360205260409020546001600160a01b0316156112b05760405162461bcd60e51b815260206004820152601260248201527f416c72656164792072656769737465726564000000000000000000000000000060448201526064016105fd565b6112ba81846115ec565b6000838152600d602052604090206112d28382612305565b506040516001600160a01b0382169084907e834ad8d7a1d8421d149549c7292d11385f5a042a008771d26ffd2d76db6e7490600090a3505050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b816001600160a01b0316836001600160a01b0316036113d65760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016105fd565b6001600160a01b0383811660008181526006602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61146c848484610f85565b6114788484848461179d565b610cc25760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016105fd565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061157d57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061085d57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083161461085d565b6115d683610afc565b156115e057600080fd5b610cc28484848461195c565b6001600160a01b0382166116425760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016105fd565b6000818152600360205260409020546001600160a01b0316156116a75760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016105fd565b6116b56000838360016115cd565b6000818152600360205260409020546001600160a01b03161561171a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016105fd565b6001600160a01b038216600081815260046020908152604080832080546001019055848352600390915280822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b15611951576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a02906117fa90339089908890889060040161241f565b6020604051808303816000875af1925050508015611853575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526118509181019061245b565b60015b611906573d808015611881576040519150601f19603f3d011682016040523d82523d6000602084013e611886565b606091505b5080516000036118fe5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016105fd565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050610f7d565b506001949350505050565b60018111156119d35760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e736563757469766520747260448201527f616e7366657273206e6f7420737570706f72746564000000000000000000000060648201526084016105fd565b816001600160a01b038516611a2f57611a2a81600980546000838152600a60205260408120829055600182018355919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0155565b611a52565b836001600160a01b0316856001600160a01b031614611a5257611a528582611a98565b6001600160a01b038416611a6e57611a6981611b35565b611a91565b846001600160a01b0316846001600160a01b031614611a9157611a918482611be4565b5050505050565b60006001611aa584610afc565b611aaf9190612478565b600083815260086020526040902054909150808214611b02576001600160a01b03841660009081526007602090815260408083208584528252808320548484528184208190558352600890915290208190555b5060009182526008602090815260408084208490556001600160a01b039094168352600781528383209183525290812055565b600954600090611b4790600190612478565b6000838152600a602052604081205460098054939450909284908110611b6f57611b6f6120c9565b906000526020600020015490508060098381548110611b9057611b906120c9565b6000918252602080832090910192909255828152600a90915260408082208490558582528120556009805480611bc857611bc86124b2565b6001900381819060005260206000200160009055905550505050565b6000611bef83610afc565b6001600160a01b039093166000908152600760209081526040808320868452825280832085905593825260089052919091209190915550565b7fffffffff0000000000000000000000000000000000000000000000000000000081168114610dc357600080fd5b600060208284031215611c6857600080fd5b8135610d2f81611c28565b60005b83811015611c8e578181015183820152602001611c76565b50506000910152565b60008151808452611caf816020860160208601611c73565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610d2f6020830184611c97565b600060208284031215611d0657600080fd5b5035919050565b80356001600160a01b0381168114611d2457600080fd5b919050565b60008060408385031215611d3c57600080fd5b611d4583611d0d565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600067ffffffffffffffff80841115611d9d57611d9d611d53565b604051601f85017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715611de357611de3611d53565b81604052809350858152868686011115611dfc57600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112611e2757600080fd5b610d2f83833560208501611d82565b600060208284031215611e4857600080fd5b813567ffffffffffffffff811115611e5f57600080fd5b610f7d84828501611e16565b600080600060608486031215611e8057600080fd5b611e8984611d0d565b9250611e9760208501611d0d565b9150604084013590509250925092565b600060208284031215611eb957600080fd5b610d2f82611d0d565b60008060208385031215611ed557600080fd5b823567ffffffffffffffff80821115611eed57600080fd5b818501915085601f830112611f0157600080fd5b813581811115611f1057600080fd5b866020828501011115611f2257600080fd5b60209290920196919550909350505050565b600080600060608486031215611f4957600080fd5b83359250602084013567ffffffffffffffff811115611f6757600080fd5b611f7386828701611e16565b925050611f8260408501611d0d565b90509250925092565b60008060408385031215611f9e57600080fd5b611fa783611d0d565b915060208301358015158114611fbc57600080fd5b809150509250929050565b60008060008060808587031215611fdd57600080fd5b611fe685611d0d565b9350611ff460208601611d0d565b925060408501359150606085013567ffffffffffffffff81111561201757600080fd5b8501601f8101871361202857600080fd5b61203787823560208401611d82565b91505092959194509250565b6000806040838503121561205657600080fd5b61205f83611d0d565b915061206d60208401611d0d565b90509250929050565b600181811c9082168061208a57607f821691505b6020821081036120c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b601f82111561069e57600081815260208120601f850160051c8101602086101561211f5750805b601f850160051c820191505b8181101561213e5782815560010161212b565b505050505050565b67ffffffffffffffff83111561215e5761215e611d53565b6121728361216c8354612076565b836120f8565b6000601f8411600181146121c4576000851561218e5750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355611a91565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b8281101561221357868501358255602094850194600190920191016121f3565b508682101561224e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b600080845461226e81612076565b6001828116801561228657600181146122b9576122e8565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00841687528215158302870194506122e8565b8860005260208060002060005b858110156122df5781548a8201529084019082016122c6565b50505082870194505b5050505083516122fc818360208801611c73565b01949350505050565b815167ffffffffffffffff81111561231f5761231f611d53565b6123338161232d8454612076565b846120f8565b602080601f83116001811461238657600084156123505750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b17855561213e565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b828110156123d3578886015182559484019460019091019084016123b4565b508582101561240f57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b60006001600160a01b038087168352808616602084015250836040830152608060608301526124516080830184611c97565b9695505050505050565b60006020828403121561246d57600080fd5b8151610d2f81611c28565b8181038181111561085d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212200d7d7d1f56bf255a9cb4d276265c096797d3658b32fbfa306b6b551ea9cc46b064736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1CF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x601219B7 GT PUSH2 0x104 JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xC87B56DD GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x3B7 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x3CA JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x406 JUMPI DUP1 PUSH4 0xF46ECCC4 EQ PUSH2 0x419 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x376 JUMPI DUP1 PUSH4 0x983B2D56 EQ PUSH2 0x37E JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x391 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x3A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6C0360EB GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x6C0360EB EQ PUSH2 0x342 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x34A JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x35D JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x365 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x601219B7 EQ PUSH2 0x309 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x31C JUMPI DUP1 PUSH4 0x6B8FF574 EQ PUSH2 0x32F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x171 JUMPI DUP1 PUSH4 0x42842E0E GT PUSH2 0x14B JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x2BD JUMPI DUP1 PUSH4 0x4622AB03 EQ PUSH2 0x2D0 JUMPI DUP1 PUSH4 0x4F6CCCE7 EQ PUSH2 0x2E3 JUMPI DUP1 PUSH4 0x55F804B3 EQ PUSH2 0x2F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD EQ PUSH2 0x284 JUMPI DUP1 PUSH4 0x2F745C59 EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0x3092AFD5 EQ PUSH2 0x2AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0x1AD JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0x15030633 EQ PUSH2 0x251 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x259 JUMPI DUP1 PUSH4 0x1E7663BC EQ PUSH2 0x26B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x211 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E7 PUSH2 0x1E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C56 JUMP JUMPDEST PUSH2 0x43C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x204 PUSH2 0x4B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0x1CE1 JUMP JUMPDEST PUSH2 0x224 PUSH2 0x21F CALLDATASIZE PUSH1 0x4 PUSH2 0x1CF4 JUMP JUMPDEST PUSH2 0x546 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x24A CALLDATASIZE PUSH1 0x4 PUSH2 0x1D29 JUMP JUMPDEST PUSH2 0x56D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x204 PUSH2 0x6A3 JUMP JUMPDEST PUSH1 0x9 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH2 0x25D PUSH2 0x279 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E36 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x292 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E6B JUMP JUMPDEST PUSH2 0x731 JUMP JUMPDEST PUSH2 0x25D PUSH2 0x2A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D29 JUMP JUMPDEST PUSH2 0x7B8 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x2B8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EA7 JUMP JUMPDEST PUSH2 0x863 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x2CB CALLDATASIZE PUSH1 0x4 PUSH2 0x1E6B JUMP JUMPDEST PUSH2 0x8D2 JUMP JUMPDEST PUSH2 0x204 PUSH2 0x2DE CALLDATASIZE PUSH1 0x4 PUSH2 0x1CF4 JUMP JUMPDEST PUSH2 0x8ED JUMP JUMPDEST PUSH2 0x25D PUSH2 0x2F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CF4 JUMP JUMPDEST PUSH2 0x906 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x304 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EC2 JUMP JUMPDEST PUSH2 0x9AA JUMP JUMPDEST PUSH2 0x24F PUSH2 0x317 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F34 JUMP JUMPDEST PUSH2 0x9BF JUMP JUMPDEST PUSH2 0x224 PUSH2 0x32A CALLDATASIZE PUSH1 0x4 PUSH2 0x1CF4 JUMP JUMPDEST PUSH2 0x9E6 JUMP JUMPDEST PUSH2 0x204 PUSH2 0x33D CALLDATASIZE PUSH1 0x4 PUSH2 0x1CF4 JUMP JUMPDEST PUSH2 0xA4B JUMP JUMPDEST PUSH2 0x204 PUSH2 0xAEF JUMP JUMPDEST PUSH2 0x25D PUSH2 0x358 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EA7 JUMP JUMPDEST PUSH2 0xAFC JUMP JUMPDEST PUSH2 0x24F PUSH2 0xB96 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x224 JUMP JUMPDEST PUSH2 0x204 PUSH2 0xBAA JUMP JUMPDEST PUSH2 0x24F PUSH2 0x38C CALLDATASIZE PUSH1 0x4 PUSH2 0x1EA7 JUMP JUMPDEST PUSH2 0xBB9 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x39F CALLDATASIZE PUSH1 0x4 PUSH2 0x1F8B JUMP JUMPDEST PUSH2 0xC2B JUMP JUMPDEST PUSH2 0x24F PUSH2 0x3B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FC7 JUMP JUMPDEST PUSH2 0xC3A JUMP JUMPDEST PUSH2 0x204 PUSH2 0x3C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CF4 JUMP JUMPDEST PUSH2 0xCC8 JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x3D8 CALLDATASIZE PUSH1 0x4 PUSH2 0x2043 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x414 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EA7 JUMP JUMPDEST PUSH2 0xD36 JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x427 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EA7 JUMP JUMPDEST PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x448 DUP4 PUSH2 0xDC6 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x459 JUMPI POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x87F1629D00000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP5 AND ADD PUSH2 0x4AB JUMPI POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x4C3 SWAP1 PUSH2 0x2076 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x4EF SWAP1 PUSH2 0x2076 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x53C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x511 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x53C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x51F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x551 DUP3 PUSH2 0xE1C JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x578 DUP3 PUSH2 0x9E6 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x606 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x622 JUMPI POP PUSH2 0x622 DUP2 CALLER PUSH2 0x3D8 JUMP JUMPDEST PUSH2 0x694 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH2 0x69E DUP4 DUP4 PUSH2 0xE80 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH2 0x6B0 SWAP1 PUSH2 0x2076 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x6DC SWAP1 PUSH2 0x2076 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x729 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x6FE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x729 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x70C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH2 0x73B CALLER DUP3 PUSH2 0xF06 JUMP JUMPDEST PUSH2 0x7AD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH2 0x69E DUP4 DUP4 DUP4 PUSH2 0xF85 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7C3 DUP4 PUSH2 0xAFC JUMP JUMPDEST DUP3 LT PUSH2 0x837 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243373231456E756D657261626C653A206F776E657220696E646578206F75 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x74206F6620626F756E6473000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5FD JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x86B PUSH2 0x11F1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE MLOAD PUSH32 0xE94479A9F7E1952CC78F2D6BAAB678ADC1B772D936C6583DEF489E524CB66692 SWAP2 SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x69E DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xC3A JUMP JUMPDEST PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x6B0 SWAP1 PUSH2 0x2076 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x911 PUSH1 0x9 SLOAD SWAP1 JUMP JUMPDEST DUP3 LT PUSH2 0x985 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243373231456E756D657261626C653A20676C6F62616C20696E646578206F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7574206F6620626F756E64730000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH1 0x9 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x998 JUMPI PUSH2 0x998 PUSH2 0x20C9 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9B2 PUSH2 0x11F1 JUMP JUMPDEST PUSH1 0xC PUSH2 0x69E DUP3 DUP5 DUP4 PUSH2 0x2146 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x9DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x69E DUP4 DUP4 DUP4 PUSH2 0x124B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x85D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP3 SWAP2 SWAP1 PUSH2 0xA69 SWAP1 PUSH2 0x2076 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xA95 SWAP1 PUSH2 0x2076 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xAE2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xAB7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xAE2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xAC5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP SWAP4 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xC DUP1 SLOAD PUSH2 0x6B0 SWAP1 PUSH2 0x2076 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xB7A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5FD JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB9E PUSH2 0x11F1 JUMP JUMPDEST PUSH2 0xBA8 PUSH1 0x0 PUSH2 0x130D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x4C3 SWAP1 PUSH2 0x2076 JUMP JUMPDEST PUSH2 0xBC1 PUSH2 0x11F1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0x6AE172837EA30B801FBFCDD4108AA1D5BF8FF775444FD70256B44E6BF3DFC3F6 SWAP2 SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0xC36 CALLER DUP4 DUP4 PUSH2 0x1375 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xC44 CALLER DUP4 PUSH2 0xF06 JUMP JUMPDEST PUSH2 0xCB6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH2 0xCC2 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1461 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xCD3 DUP3 PUSH2 0xE1C JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCDE DUP4 PUSH2 0xA4B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0xC DUP1 SLOAD PUSH2 0xCEF SWAP1 PUSH2 0x2076 JUMP JUMPDEST SWAP1 POP GT PUSH2 0xD0B JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xD2F JUMP JUMPDEST PUSH1 0xC DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xD1F SWAP3 SWAP2 SWAP1 PUSH2 0x2260 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xD3E PUSH2 0x11F1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xDBA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH2 0xDC3 DUP2 PUSH2 0x130D JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x780E9D6300000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x85D JUMPI POP PUSH2 0x85D DUP3 PUSH2 0x14EA JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xDC3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0xECD DUP3 PUSH2 0x9E6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xF12 DUP4 PUSH2 0x9E6 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0xF59 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST DUP1 PUSH2 0xF7D JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xF72 DUP5 PUSH2 0x546 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xF98 DUP3 PUSH2 0x9E6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1014 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x108F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH2 0x109C DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x15CD JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x10AF DUP3 PUSH2 0x9E6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x112B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x4 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x3 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xBA8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x12B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416C726561647920726567697374657265640000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH2 0x12BA DUP2 DUP5 PUSH2 0x15EC JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x12D2 DUP4 DUP3 PUSH2 0x2305 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP5 SWAP1 PUSH31 0x834AD8D7A1D8421D149549C7292D11385F5A042A008771D26FFD2D76DB6E74 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x13D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x146C DUP5 DUP5 DUP5 PUSH2 0xF85 JUMP JUMPDEST PUSH2 0x1478 DUP5 DUP5 DUP5 DUP5 PUSH2 0x179D JUMP JUMPDEST PUSH2 0xCC2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x157D JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x85D JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND EQ PUSH2 0x85D JUMP JUMPDEST PUSH2 0x15D6 DUP4 PUSH2 0xAFC JUMP JUMPDEST ISZERO PUSH2 0x15E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCC2 DUP5 DUP5 DUP5 DUP5 PUSH2 0x195C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1642 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x16A7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH2 0x16B5 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x15CD JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x171A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5FD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP5 DUP4 MSTORE PUSH1 0x3 SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND DUP5 OR SWAP1 SSTORE MLOAD DUP4 SWAP3 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x1951 JUMPI PUSH1 0x40 MLOAD PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x17FA SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x241F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1853 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1850 SWAP2 DUP2 ADD SWAP1 PUSH2 0x245B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1906 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1881 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1886 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x18FE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5FD JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 EQ SWAP1 POP PUSH2 0xF7D JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x19D3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x35 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243373231456E756D657261626C653A20636F6E7365637574697665207472 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616E7366657273206E6F7420737570706F727465640000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5FD JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x1A2F JUMPI PUSH2 0x1A2A DUP2 PUSH1 0x9 DUP1 SLOAD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP3 SWAP1 SSTORE PUSH1 0x1 DUP3 ADD DUP4 SSTORE SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x6E1540171B6C0C960B71A7020D9F60077F6AF931A8BBF590DA0223DACF75C7AF ADD SSTORE JUMP JUMPDEST PUSH2 0x1A52 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1A52 JUMPI PUSH2 0x1A52 DUP6 DUP3 PUSH2 0x1A98 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1A6E JUMPI PUSH2 0x1A69 DUP2 PUSH2 0x1B35 JUMP JUMPDEST PUSH2 0x1A91 JUMP JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1A91 JUMPI PUSH2 0x1A91 DUP5 DUP3 PUSH2 0x1BE4 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x1AA5 DUP5 PUSH2 0xAFC JUMP JUMPDEST PUSH2 0x1AAF SWAP2 SWAP1 PUSH2 0x2478 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP1 DUP3 EQ PUSH2 0x1B02 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SLOAD DUP5 DUP5 MSTORE DUP2 DUP5 KECCAK256 DUP2 SWAP1 SSTORE DUP4 MSTORE PUSH1 0x8 SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP2 SWAP1 SSTORE JUMPDEST POP PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP5 SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP4 MSTORE PUSH1 0x7 DUP2 MSTORE DUP4 DUP4 KECCAK256 SWAP2 DUP4 MSTORE MSTORE SWAP1 DUP2 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x1B47 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x2478 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x9 DUP1 SLOAD SWAP4 SWAP5 POP SWAP1 SWAP3 DUP5 SWAP1 DUP2 LT PUSH2 0x1B6F JUMPI PUSH2 0x1B6F PUSH2 0x20C9 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 PUSH1 0x9 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x1B90 JUMPI PUSH2 0x1B90 PUSH2 0x20C9 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE DUP3 DUP2 MSTORE PUSH1 0xA SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP5 SWAP1 SSTORE DUP6 DUP3 MSTORE DUP2 KECCAK256 SSTORE PUSH1 0x9 DUP1 SLOAD DUP1 PUSH2 0x1BC8 JUMPI PUSH2 0x1BC8 PUSH2 0x24B2 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BEF DUP4 PUSH2 0xAFC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 SWAP1 SSTORE SWAP4 DUP3 MSTORE PUSH1 0x8 SWAP1 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE POP JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xDC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xD2F DUP2 PUSH2 0x1C28 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1C8E JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1C76 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1CAF DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1C73 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xD2F PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1C97 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1D24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D3C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D45 DUP4 PUSH2 0x1D0D JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP5 GT ISZERO PUSH2 0x1D9D JUMPI PUSH2 0x1D9D PUSH2 0x1D53 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP6 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1DE3 JUMPI PUSH2 0x1DE3 PUSH2 0x1D53 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP1 SWAP4 POP DUP6 DUP2 MSTORE DUP7 DUP7 DUP7 ADD GT ISZERO PUSH2 0x1DFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP8 DUP4 ADD ADD MSTORE POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1E27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD2F DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH2 0x1D82 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF7D DUP5 DUP3 DUP6 ADD PUSH2 0x1E16 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1E80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E89 DUP5 PUSH2 0x1D0D JUMP JUMPDEST SWAP3 POP PUSH2 0x1E97 PUSH1 0x20 DUP6 ADD PUSH2 0x1D0D JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD2F DUP3 PUSH2 0x1D0D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1ED5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1EED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1F01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1F10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1F22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1F49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1F67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F73 DUP7 DUP3 DUP8 ADD PUSH2 0x1E16 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x1F82 PUSH1 0x40 DUP6 ADD PUSH2 0x1D0D JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FA7 DUP4 PUSH2 0x1D0D JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1FBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1FDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FE6 DUP6 PUSH2 0x1D0D JUMP JUMPDEST SWAP4 POP PUSH2 0x1FF4 PUSH1 0x20 DUP7 ADD PUSH2 0x1D0D JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2017 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x2028 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2037 DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x1D82 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2056 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x205F DUP4 PUSH2 0x1D0D JUMP JUMPDEST SWAP2 POP PUSH2 0x206D PUSH1 0x20 DUP5 ADD PUSH2 0x1D0D JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x208A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x20C3 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x69E JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x211F JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x213E JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x212B JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x215E JUMPI PUSH2 0x215E PUSH2 0x1D53 JUMP JUMPDEST PUSH2 0x2172 DUP4 PUSH2 0x216C DUP4 SLOAD PUSH2 0x2076 JUMP JUMPDEST DUP4 PUSH2 0x20F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP5 GT PUSH1 0x1 DUP2 EQ PUSH2 0x21C4 JUMPI PUSH1 0x0 DUP6 ISZERO PUSH2 0x218E JUMPI POP DUP4 DUP3 ADD CALLDATALOAD JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x3 DUP8 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP7 SWAP1 SHL OR DUP4 SSTORE PUSH2 0x1A91 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP7 AND SWAP1 DUP4 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2213 JUMPI DUP7 DUP6 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x21F3 JUMP JUMPDEST POP DUP7 DUP3 LT ISZERO PUSH2 0x224E JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP9 PUSH1 0x3 SHL AND SHR NOT DUP5 DUP8 ADD CALLDATALOAD AND DUP2 SSTORE JUMPDEST POP POP PUSH1 0x1 DUP6 PUSH1 0x1 SHL ADD DUP4 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 SLOAD PUSH2 0x226E DUP2 PUSH2 0x2076 JUMP JUMPDEST PUSH1 0x1 DUP3 DUP2 AND DUP1 ISZERO PUSH2 0x2286 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x22B9 JUMPI PUSH2 0x22E8 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP5 AND DUP8 MSTORE DUP3 ISZERO ISZERO DUP4 MUL DUP8 ADD SWAP5 POP PUSH2 0x22E8 JUMP JUMPDEST DUP9 PUSH1 0x0 MSTORE PUSH1 0x20 DUP1 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x22DF JUMPI DUP2 SLOAD DUP11 DUP3 ADD MSTORE SWAP1 DUP5 ADD SWAP1 DUP3 ADD PUSH2 0x22C6 JUMP JUMPDEST POP POP POP DUP3 DUP8 ADD SWAP5 POP JUMPDEST POP POP POP POP DUP4 MLOAD PUSH2 0x22FC DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x1C73 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x231F JUMPI PUSH2 0x231F PUSH2 0x1D53 JUMP JUMPDEST PUSH2 0x2333 DUP2 PUSH2 0x232D DUP5 SLOAD PUSH2 0x2076 JUMP JUMPDEST DUP5 PUSH2 0x20F8 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x2386 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x2350 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x213E JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x23D3 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x23B4 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x240F JUMPI DUP8 DUP6 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP4 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2451 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x1C97 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x246D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xD2F DUP2 PUSH2 0x1C28 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x85D JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD PUSH30 0x7D1F56BF255A9CB4D276265C096797D3658B32FBFA306B6B551EA9CC46B0 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"270:2917:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;921:356;;;;;;:::i;:::-;;:::i;:::-;;;611:14:19;;604:22;586:41;;574:2;559:18;921:356:18;;;;;;;;2471:98:1;;;:::i;:::-;;;;;;;:::i;3935:167::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1802:55:19;;;1784:74;;1772:2;1757:18;3935:167:1;1638:226:19;3468:406:1;;;;;;:::i;:::-;;:::i;:::-;;355:22:18;;;:::i;1630:111:4:-;1717:10;:17;1630:111;;;2475:25:19;;;2463:2;2448:18;1630:111:4;2329:177:19;2482:199:18;;;;;;:::i;:::-;2582:26;;;;;;;;2482:199;4612:296:1;;;;;;:::i;:::-;;:::i;1306:253:4:-;;;;;;:::i;:::-;;:::i;1798:133:18:-;;;;;;:::i;:::-;;:::i;4974:149:1:-;;;;;;:::i;:::-;;:::i;443:37:18:-;;;;;;:::i;:::-;;:::i;1813:230:4:-;;;;;;:::i;:::-;;:::i;2949:88:18:-;;;;;;:::i;:::-;;:::i;2105:135::-;;;;;;:::i;:::-;;:::i;2190:219:1:-;;;;;;:::i;:::-;;:::i;3043:142:18:-;;;;;;:::i;:::-;;:::i;383:21::-;;;:::i;1929:204:1:-;;;;;;:::i;:::-;;:::i;1824:101:0:-;;;:::i;1201:85::-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;1201:85;;2633:102:1;;;:::i;1617:127:18:-;;;;;;:::i;:::-;;:::i;4169:153:1:-;;;;;;:::i;:::-;;:::i;5189:276::-;;;;;;:::i;:::-;;:::i;2687:256:18:-;;;;;;:::i;:::-;;:::i;4388:162:1:-;;;;;;:::i;:::-;-1:-1:-1;;;;;4508:25:1;;;4485:4;4508:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;4388:162;2074:198:0;;;;;;:::i;:::-;;:::i;562:37:18:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;921:356;1024:4;1040:11;1054:36;1078:11;1054:23;:36::i;:::-;1040:50;;1104:6;1100:48;;;-1:-1:-1;1133:4:18;;921:356;-1:-1:-1;;921:356:18:o;1100:48::-;1161:50;;;;;1157:92;;-1:-1:-1;1234:4:18;;921:356;-1:-1:-1;;921:356:18:o;1157:92::-;-1:-1:-1;1265:5:18;;921:356;-1:-1:-1;;921:356:18:o;2471:98:1:-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;-1:-1:-1;4071:24:1;;;;:15;:24;;;;;;-1:-1:-1;;;;;4071:24:1;;3935:167::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;-1:-1:-1;;;;;3605:11:1;:2;-1:-1:-1;;;;;3605:11:1;;3597:57;;;;-1:-1:-1;;;3597:57:1;;7473:2:19;3597:57:1;;;7455:21:19;7512:2;7492:18;;;7485:30;7551:34;7531:18;;;7524:62;7622:3;7602:18;;;7595:31;7643:19;;3597:57:1;;;;;;;;;719:10:8;-1:-1:-1;;;;;3686:21:1;;;;:62;;-1:-1:-1;3711:37:1;3728:5;719:10:8;4388:162:1;:::i;3711:37::-;3665:170;;;;-1:-1:-1;;;3665:170:1;;7875:2:19;3665:170:1;;;7857:21:19;7914:2;7894:18;;;7887:30;7953:34;7933:18;;;7926:62;8024:31;8004:18;;;7997:59;8073:19;;3665:170:1;7673:425:19;3665:170:1;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;355:22:18:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;4612:296:1:-;4771:41;719:10:8;4804:7:1;4771:18;:41::i;:::-;4763:99;;;;-1:-1:-1;;;4763:99:1;;8305:2:19;4763:99:1;;;8287:21:19;8344:2;8324:18;;;8317:30;8383:34;8363:18;;;8356:62;8454:15;8434:18;;;8427:43;8487:19;;4763:99:1;8103:409:19;4763:99:1;4873:28;4883:4;4889:2;4893:7;4873:9;:28::i;1306:253:4:-;1403:7;1438:23;1455:5;1438:16;:23::i;:::-;1430:5;:31;1422:87;;;;-1:-1:-1;;;1422:87:4;;8719:2:19;1422:87:4;;;8701:21:19;8758:2;8738:18;;;8731:30;8797:34;8777:18;;;8770:62;8868:13;8848:18;;;8841:41;8899:19;;1422:87:4;8517:407:19;1422:87:4;-1:-1:-1;;;;;;1526:19:4;;;;;;:12;:19;;;;;;;;:26;;;;;;;;;1306:253;;;;;:::o;1798:133:18:-;1094:13:0;:11;:13::i;:::-;-1:-1:-1;;;;;1865:15:18;::::1;1883:5;1865:15:::0;;;:7:::1;:15;::::0;;;;;:23;;;::::1;::::0;;1903:21;::::1;::::0;1883:5;1903:21:::1;1798:133:::0;:::o;4974:149:1:-;5077:39;5094:4;5100:2;5104:7;5077:39;;;;;;;;;;;;:16;:39::i;443:37:18:-;;;;;;;;;;;;;;;;:::i;1813:230:4:-;1888:7;1923:30;1717:10;:17;;1630:111;1923:30;1915:5;:38;1907:95;;;;-1:-1:-1;;;1907:95:4;;9131:2:19;1907:95:4;;;9113:21:19;9170:2;9150:18;;;9143:30;9209:34;9189:18;;;9182:62;9280:14;9260:18;;;9253:42;9312:19;;1907:95:4;8929:408:19;1907:95:4;2019:10;2030:5;2019:17;;;;;;;;:::i;:::-;;;;;;;;;2012:24;;1813:230;;;:::o;2949:88:18:-;1094:13:0;:11;:13::i;:::-;3017:7:18::1;:13;3027:3:::0;;3017:7;:13:::1;:::i;2105:135::-:0;1329:10;1321:19;;;;:7;:19;;;;;;;;1313:28;;;;;;2207:26:::1;2217:2;2221:4;2227:5;2207:9;:26::i;2190:219:1:-:0;2262:7;6794:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6794:16:1;;2324:56;;;;-1:-1:-1;;;2324:56:1;;11970:2:19;2324:56:1;;;11952:21:19;12009:2;11989:18;;;11982:30;12048:26;12028:18;;;12021:54;12092:18;;2324:56:1;11768:348:19;3043:142:18;3122:18;3143:14;;;:5;:14;;;;;3122:35;;3097:13;;3122:18;3143:14;3122:35;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3122:35:18;;3043:142;-1:-1:-1;;;;;;;3043:142:18:o;383:21::-;;;;;;;:::i;1929:204:1:-;2001:7;-1:-1:-1;;;;;2028:19:1;;2020:73;;;;-1:-1:-1;;;2020:73:1;;12323:2:19;2020:73:1;;;12305:21:19;12362:2;12342:18;;;12335:30;12401:34;12381:18;;;12374:62;12472:11;12452:18;;;12445:39;12501:19;;2020:73:1;12121:405:19;2020:73:1;-1:-1:-1;;;;;;2110:16:1;;;;;:9;:16;;;;;;;1929:204::o;1824:101:0:-;1094:13;:11;:13::i;:::-;1888:30:::1;1915:1;1888:18;:30::i;:::-;1824:101::o:0;2633:102:1:-;2689:13;2721:7;2714:14;;;;;:::i;1617:127:18:-;1094:13:0;:11;:13::i;:::-;-1:-1:-1;;;;;1681:15:18;::::1;;::::0;;;:7:::1;:15;::::0;;;;;:22;;;::::1;1699:4;1681:22;::::0;;1718:19;::::1;::::0;1681:15;1718:19:::1;1617:127:::0;:::o;4169:153:1:-;4263:52;719:10:8;4296:8:1;4306;4263:18;:52::i;:::-;4169:153;;:::o;5189:276::-;5319:41;719:10:8;5352:7:1;5319:18;:41::i;:::-;5311:99;;;;-1:-1:-1;;;5311:99:1;;8305:2:19;5311:99:1;;;8287:21:19;8344:2;8324:18;;;8317:30;8383:34;8363:18;;;8356:62;8454:15;8434:18;;;8427:43;8487:19;;5311:99:1;8103:409:19;5311:99:1;5420:38;5434:4;5440:2;5444:7;5453:4;5420:13;:38::i;:::-;5189:276;;;;:::o;2687:256:18:-;2752:13;2777:23;2792:7;2777:14;:23::i;:::-;2810:18;2831:16;2839:7;2831;:16::i;:::-;2810:37;;2888:1;2870:7;2864:21;;;;;:::i;:::-;;;:25;:72;;;;;;;;;;;;;;;;;2916:7;2925:4;2899:31;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2864:72;2857:79;2687:256;-1:-1:-1;;;2687:256:18:o;2074:198:0:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2162:22:0;::::1;2154:73;;;::::0;-1:-1:-1;;;2154:73:0;;13816:2:19;2154:73:0::1;::::0;::::1;13798:21:19::0;13855:2;13835:18;;;13828:30;13894:34;13874:18;;;13867:62;13965:8;13945:18;;;13938:36;13991:19;;2154:73:0::1;13614:402:19::0;2154:73:0::1;2237:28;2256:8;2237:18;:28::i;:::-;2074:198:::0;:::o;1005:222:4:-;1107:4;1130:50;;;1145:35;1130:50;;:90;;;1184:36;1208:11;1184:23;:36::i;13240:133:1:-;7185:4;6794:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6794:16:1;13313:53;;;;-1:-1:-1;;;13313:53:1;;11970:2:19;13313:53:1;;;11952:21:19;12009:2;11989:18;;;11982:30;12048:26;12028:18;;;12021:54;12092:18;;13313:53:1;11768:348:19;12572:171:1;12646:24;;;;:15;:24;;;;;:29;;;;-1:-1:-1;;;;;12646:29:1;;;;;;;;:24;;12699:23;12646:24;12699:14;:23::i;:::-;-1:-1:-1;;;;;12690:46:1;;;;;;;;;;;12572:171;;:::o;7404:261::-;7497:4;7513:13;7529:23;7544:7;7529:14;:23::i;:::-;7513:39;;7581:5;-1:-1:-1;;;;;7570:16:1;:7;-1:-1:-1;;;;;7570:16:1;;:52;;;-1:-1:-1;;;;;;4508:25:1;;;4485:4;4508:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;7590:32;7570:87;;;;7650:7;-1:-1:-1;;;;;7626:31:1;:20;7638:7;7626:11;:20::i;:::-;-1:-1:-1;;;;;7626:31:1;;7570:87;7562:96;7404:261;-1:-1:-1;;;;7404:261:1:o;11257:1203::-;11381:4;-1:-1:-1;;;;;11354:31:1;:23;11369:7;11354:14;:23::i;:::-;-1:-1:-1;;;;;11354:31:1;;11346:81;;;;-1:-1:-1;;;11346:81:1;;14223:2:19;11346:81:1;;;14205:21:19;14262:2;14242:18;;;14235:30;14301:34;14281:18;;;14274:62;14372:7;14352:18;;;14345:35;14397:19;;11346:81:1;14021:401:19;11346:81:1;-1:-1:-1;;;;;11445:16:1;;11437:65;;;;-1:-1:-1;;;11437:65:1;;14629:2:19;11437:65:1;;;14611:21:19;14668:2;14648:18;;;14641:30;14707:34;14687:18;;;14680:62;14778:6;14758:18;;;14751:34;14802:19;;11437:65:1;14427:400:19;11437:65:1;11513:42;11534:4;11540:2;11544:7;11553:1;11513:20;:42::i;:::-;11682:4;-1:-1:-1;;;;;11655:31:1;:23;11670:7;11655:14;:23::i;:::-;-1:-1:-1;;;;;11655:31:1;;11647:81;;;;-1:-1:-1;;;11647:81:1;;14223:2:19;11647:81:1;;;14205:21:19;14262:2;14242:18;;;14235:30;14301:34;14281:18;;;14274:62;14372:7;14352:18;;;14345:35;14397:19;;11647:81:1;14021:401:19;11647:81:1;11797:24;;;;:15;:24;;;;;;;;11790:31;;;;;;;;;-1:-1:-1;;;;;12265:15:1;;;;;;:9;:15;;;;;:20;;;;;;12299:13;;;;;;;;;:18;;11790:31;12299:18;;;12337:16;;;:7;:16;;;;;;:21;;;;;;;;;;12374:27;;11813:7;;12374:27;;;3538:336;3468:406;;:::o;1359:130:0:-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;719:10:8;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;15034:2:19;1414:68:0;;;15016:21:19;;;15053:18;;;15046:30;15112:34;15092:18;;;15085:62;15164:18;;1414:68:0;14832:356:19;2247:229:18;7185:4:1;6794:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6794:16:1;7208:31;2332:43:18;;;;-1:-1:-1;;;2332:43:18;;15395:2:19;2332:43:18;;;15377:21:19;15434:2;15414:18;;;15407:30;15473:20;15453:18;;;15446:48;15511:18;;2332:43:18;15193:342:19;2332:43:18;2386:16;2392:5;2399:2;2386:5;:16::i;:::-;2412:9;;;;:5;:9;;;;;:16;2424:4;2412:9;:16;:::i;:::-;-1:-1:-1;2444:25:18;;-1:-1:-1;;;;;2444:25:18;;;2459:2;;2444:25;;;;;2247:229;;;:::o;2426:187:0:-;2499:16;2518:6;;-1:-1:-1;;;;;2534:17:0;;;;;;;;;;2566:40;;2518:6;;;;;;;2566:40;;2499:16;2566:40;2489:124;2426:187;:::o;12879:277:1:-;12999:8;-1:-1:-1;;;;;12990:17:1;:5;-1:-1:-1;;;;;12990:17:1;;12982:55;;;;-1:-1:-1;;;12982:55:1;;17218:2:19;12982:55:1;;;17200:21:19;17257:2;17237:18;;;17230:30;17296:27;17276:18;;;17269:55;17341:18;;12982:55:1;17016:349:19;12982:55:1;-1:-1:-1;;;;;13047:25:1;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;;;;;;;;;;;;13108:41;;586::19;;;13108::1;;559:18:19;13108:41:1;;;;;;;12879:277;;;:::o;6326:267::-;6438:28;6448:4;6454:2;6458:7;6438:9;:28::i;:::-;6484:47;6507:4;6513:2;6517:7;6526:4;6484:22;:47::i;:::-;6476:110;;;;-1:-1:-1;;;6476:110:1;;17572:2:19;6476:110:1;;;17554:21:19;17611:2;17591:18;;;17584:30;17650:34;17630:18;;;17623:62;17721:20;17701:18;;;17694:48;17759:19;;6476:110:1;17370:414:19;1570:300:1;1672:4;1707:40;;;1722:25;1707:40;;:104;;-1:-1:-1;1763:48:1;;;1778:33;1763:48;1707:104;:156;;;-1:-1:-1;952:25:11;937:40;;;;1827:36:1;829:155:11;1365:246:18;1519:13;1529:2;1519:9;:13::i;:::-;:18;1511:27;;;;;;1548:56;1575:4;1581:2;1585:7;1594:9;1548:26;:56::i;8925:920:1:-;-1:-1:-1;;;;;9004:16:1;;8996:61;;;;-1:-1:-1;;;8996:61:1;;17991:2:19;8996:61:1;;;17973:21:19;;;18010:18;;;18003:30;18069:34;18049:18;;;18042:62;18121:18;;8996:61:1;17789:356:19;8996:61:1;7185:4;6794:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6794:16:1;7208:31;9067:58;;;;-1:-1:-1;;;9067:58:1;;18352:2:19;9067:58:1;;;18334:21:19;18391:2;18371:18;;;18364:30;18430;18410:18;;;18403:58;18478:18;;9067:58:1;18150:352:19;9067:58:1;9136:48;9165:1;9169:2;9173:7;9182:1;9136:20;:48::i;:::-;7185:4;6794:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6794:16:1;7208:31;9271:58;;;;-1:-1:-1;;;9271:58:1;;18352:2:19;9271:58:1;;;18334:21:19;18391:2;18371:18;;;18364:30;18430;18410:18;;;18403:58;18478:18;;9271:58:1;18150:352:19;9271:58:1;-1:-1:-1;;;;;9671:13:1;;;;;;:9;:13;;;;;;;;:18;;9688:1;9671:18;;;9710:16;;;:7;:16;;;;;;:21;;;;;;;;9747:33;9718:7;;9671:13;;9747:33;;9671:13;;9747:33;4169:153;;:::o;13925:831::-;14074:4;-1:-1:-1;;;;;14094:13:1;;1702:19:7;:23;14090:660:1;;14129:71;;;;;-1:-1:-1;;;;;14129:36:1;;;;;:71;;719:10:8;;14180:4:1;;14186:7;;14195:4;;14129:71;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;14129:71:1;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;14125:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14367:6;:13;14384:1;14367:18;14363:321;;14409:60;;-1:-1:-1;;;14409:60:1;;17572:2:19;14409:60:1;;;17554:21:19;17611:2;17591:18;;;17584:30;17650:34;17630:18;;;17623:62;17721:20;17701:18;;;17694:48;17759:19;;14409:60:1;17370:414:19;14363:321:1;14636:6;14630:13;14621:6;14617:2;14613:15;14606:38;14125:573;14250:51;;14260:41;14250:51;;-1:-1:-1;14243:58:1;;14090:660;-1:-1:-1;14735:4:1;13925:831;;;;;;:::o;2112:890:4:-;2371:1;2359:9;:13;2355:219;;;2500:63;;-1:-1:-1;;;2500:63:4;;19480:2:19;2500:63:4;;;19462:21:19;19519:2;19499:18;;;19492:30;19558:34;19538:18;;;19531:62;19629:23;19609:18;;;19602:51;19670:19;;2500:63:4;19278:417:19;2355:219:4;2602:12;-1:-1:-1;;;;;2629:18:4;;2625:183;;2663:40;2695:7;3811:10;:17;;3784:24;;;;:15;:24;;;;;:44;;;3838:24;;;;;;;;;;;;3708:161;2663:40;2625:183;;;2732:2;-1:-1:-1;;;;;2724:10:4;:4;-1:-1:-1;;;;;2724:10:4;;2720:88;;2750:47;2783:4;2789:7;2750:32;:47::i;:::-;-1:-1:-1;;;;;2821:16:4;;2817:179;;2853:45;2890:7;2853:36;:45::i;:::-;2817:179;;;2925:4;-1:-1:-1;;;;;2919:10:4;:2;-1:-1:-1;;;;;2919:10:4;;2915:81;;2945:40;2973:2;2977:7;2945:27;:40::i;:::-;2273:729;2112:890;;;;:::o;4486:970::-;4748:22;4798:1;4773:22;4790:4;4773:16;:22::i;:::-;:26;;;;:::i;:::-;4809:18;4830:26;;;:17;:26;;;;;;4748:51;;-1:-1:-1;4960:28:4;;;4956:323;;-1:-1:-1;;;;;5026:18:4;;5004:19;5026:18;;;:12;:18;;;;;;;;:34;;;;;;;;;5075:30;;;;;;:44;;;5191:30;;:17;:30;;;;;:43;;;4956:323;-1:-1:-1;5372:26:4;;;;:17;:26;;;;;;;;5365:33;;;-1:-1:-1;;;;;5415:18:4;;;;;:12;:18;;;;;:34;;;;;;;5408:41;4486:970::o;5744:1061::-;6018:10;:17;5993:22;;6018:21;;6038:1;;6018:21;:::i;:::-;6049:18;6070:24;;;:15;:24;;;;;;6438:10;:26;;5993:46;;-1:-1:-1;6070:24:4;;5993:46;;6438:26;;;;;;:::i;:::-;;;;;;;;;6416:48;;6500:11;6475:10;6486;6475:22;;;;;;;;:::i;:::-;;;;;;;;;;;;:36;;;;6579:28;;;:15;:28;;;;;;;:41;;;6748:24;;;;;6741:31;6782:10;:16;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;5815:990;;;5744:1061;:::o;3296:217::-;3380:14;3397:20;3414:2;3397:16;:20::i;:::-;-1:-1:-1;;;;;3427:16:4;;;;;;;:12;:16;;;;;;;;:24;;;;;;;;:34;;;3471:26;;;:17;:26;;;;;;:35;;;;-1:-1:-1;3296:217:4:o;14:177:19:-;99:66;92:5;88:78;81:5;78:89;68:117;;181:1;178;171:12;196:245;254:6;307:2;295:9;286:7;282:23;278:32;275:52;;;323:1;320;313:12;275:52;362:9;349:23;381:30;405:5;381:30;:::i;638:250::-;723:1;733:113;747:6;744:1;741:13;733:113;;;823:11;;;817:18;804:11;;;797:39;769:2;762:10;733:113;;;-1:-1:-1;;880:1:19;862:16;;855:27;638:250::o;893:330::-;935:3;973:5;967:12;1000:6;995:3;988:19;1016:76;1085:6;1078:4;1073:3;1069:14;1062:4;1055:5;1051:16;1016:76;:::i;:::-;1137:2;1125:15;1142:66;1121:88;1112:98;;;;1212:4;1108:109;;893:330;-1:-1:-1;;893:330:19:o;1228:220::-;1377:2;1366:9;1359:21;1340:4;1397:45;1438:2;1427:9;1423:18;1415:6;1397:45;:::i;1453:180::-;1512:6;1565:2;1553:9;1544:7;1540:23;1536:32;1533:52;;;1581:1;1578;1571:12;1533:52;-1:-1:-1;1604:23:19;;1453:180;-1:-1:-1;1453:180:19:o;1869:196::-;1937:20;;-1:-1:-1;;;;;1986:54:19;;1976:65;;1966:93;;2055:1;2052;2045:12;1966:93;1869:196;;;:::o;2070:254::-;2138:6;2146;2199:2;2187:9;2178:7;2174:23;2170:32;2167:52;;;2215:1;2212;2205:12;2167:52;2238:29;2257:9;2238:29;:::i;:::-;2228:39;2314:2;2299:18;;;;2286:32;;-1:-1:-1;;;2070:254:19:o;2511:184::-;2563:77;2560:1;2553:88;2660:4;2657:1;2650:15;2684:4;2681:1;2674:15;2700:691;2765:5;2795:18;2836:2;2828:6;2825:14;2822:40;;;2842:18;;:::i;:::-;2976:2;2970:9;3042:2;3030:15;;2881:66;3026:24;;;3052:2;3022:33;3018:42;3006:55;;;3076:18;;;3096:22;;;3073:46;3070:72;;;3122:18;;:::i;:::-;3162:10;3158:2;3151:22;3191:6;3182:15;;3221:6;3213;3206:22;3261:3;3252:6;3247:3;3243:16;3240:25;3237:45;;;3278:1;3275;3268:12;3237:45;3328:6;3323:3;3316:4;3308:6;3304:17;3291:44;3383:1;3376:4;3367:6;3359;3355:19;3351:30;3344:41;;;;2700:691;;;;;:::o;3396:222::-;3439:5;3492:3;3485:4;3477:6;3473:17;3469:27;3459:55;;3510:1;3507;3500:12;3459:55;3532:80;3608:3;3599:6;3586:20;3579:4;3571:6;3567:17;3532:80;:::i;3623:322::-;3692:6;3745:2;3733:9;3724:7;3720:23;3716:32;3713:52;;;3761:1;3758;3751:12;3713:52;3801:9;3788:23;3834:18;3826:6;3823:30;3820:50;;;3866:1;3863;3856:12;3820:50;3889;3931:7;3922:6;3911:9;3907:22;3889:50;:::i;3950:328::-;4027:6;4035;4043;4096:2;4084:9;4075:7;4071:23;4067:32;4064:52;;;4112:1;4109;4102:12;4064:52;4135:29;4154:9;4135:29;:::i;:::-;4125:39;;4183:38;4217:2;4206:9;4202:18;4183:38;:::i;:::-;4173:48;;4268:2;4257:9;4253:18;4240:32;4230:42;;3950:328;;;;;:::o;4283:186::-;4342:6;4395:2;4383:9;4374:7;4370:23;4366:32;4363:52;;;4411:1;4408;4401:12;4363:52;4434:29;4453:9;4434:29;:::i;4474:592::-;4545:6;4553;4606:2;4594:9;4585:7;4581:23;4577:32;4574:52;;;4622:1;4619;4612:12;4574:52;4662:9;4649:23;4691:18;4732:2;4724:6;4721:14;4718:34;;;4748:1;4745;4738:12;4718:34;4786:6;4775:9;4771:22;4761:32;;4831:7;4824:4;4820:2;4816:13;4812:27;4802:55;;4853:1;4850;4843:12;4802:55;4893:2;4880:16;4919:2;4911:6;4908:14;4905:34;;;4935:1;4932;4925:12;4905:34;4980:7;4975:2;4966:6;4962:2;4958:15;4954:24;4951:37;4948:57;;;5001:1;4998;4991:12;4948:57;5032:2;5024:11;;;;;5054:6;;-1:-1:-1;4474:592:19;;-1:-1:-1;;;;4474:592:19:o;5071:464::-;5158:6;5166;5174;5227:2;5215:9;5206:7;5202:23;5198:32;5195:52;;;5243:1;5240;5233:12;5195:52;5279:9;5266:23;5256:33;;5340:2;5329:9;5325:18;5312:32;5367:18;5359:6;5356:30;5353:50;;;5399:1;5396;5389:12;5353:50;5422;5464:7;5455:6;5444:9;5440:22;5422:50;:::i;:::-;5412:60;;;5491:38;5525:2;5514:9;5510:18;5491:38;:::i;:::-;5481:48;;5071:464;;;;;:::o;5540:347::-;5605:6;5613;5666:2;5654:9;5645:7;5641:23;5637:32;5634:52;;;5682:1;5679;5672:12;5634:52;5705:29;5724:9;5705:29;:::i;:::-;5695:39;;5784:2;5773:9;5769:18;5756:32;5831:5;5824:13;5817:21;5810:5;5807:32;5797:60;;5853:1;5850;5843:12;5797:60;5876:5;5866:15;;;5540:347;;;;;:::o;5892:667::-;5987:6;5995;6003;6011;6064:3;6052:9;6043:7;6039:23;6035:33;6032:53;;;6081:1;6078;6071:12;6032:53;6104:29;6123:9;6104:29;:::i;:::-;6094:39;;6152:38;6186:2;6175:9;6171:18;6152:38;:::i;:::-;6142:48;;6237:2;6226:9;6222:18;6209:32;6199:42;;6292:2;6281:9;6277:18;6264:32;6319:18;6311:6;6308:30;6305:50;;;6351:1;6348;6341:12;6305:50;6374:22;;6427:4;6419:13;;6415:27;-1:-1:-1;6405:55:19;;6456:1;6453;6446:12;6405:55;6479:74;6545:7;6540:2;6527:16;6522:2;6518;6514:11;6479:74;:::i;:::-;6469:84;;;5892:667;;;;;;;:::o;6564:260::-;6632:6;6640;6693:2;6681:9;6672:7;6668:23;6664:32;6661:52;;;6709:1;6706;6699:12;6661:52;6732:29;6751:9;6732:29;:::i;:::-;6722:39;;6780:38;6814:2;6803:9;6799:18;6780:38;:::i;:::-;6770:48;;6564:260;;;;;:::o;6829:437::-;6908:1;6904:12;;;;6951;;;6972:61;;7026:4;7018:6;7014:17;7004:27;;6972:61;7079:2;7071:6;7068:14;7048:18;7045:38;7042:218;;7116:77;7113:1;7106:88;7217:4;7214:1;7207:15;7245:4;7242:1;7235:15;7042:218;;6829:437;;;:::o;9342:184::-;9394:77;9391:1;9384:88;9491:4;9488:1;9481:15;9515:4;9512:1;9505:15;9657:545;9759:2;9754:3;9751:11;9748:448;;;9795:1;9820:5;9816:2;9809:17;9865:4;9861:2;9851:19;9935:2;9923:10;9919:19;9916:1;9912:27;9906:4;9902:38;9971:4;9959:10;9956:20;9953:47;;;-1:-1:-1;9994:4:19;9953:47;10049:2;10044:3;10040:12;10037:1;10033:20;10027:4;10023:31;10013:41;;10104:82;10122:2;10115:5;10112:13;10104:82;;;10167:17;;;10148:1;10137:13;10104:82;;;10108:3;;;9657:545;;;:::o;10438:1325::-;10562:18;10557:3;10554:27;10551:53;;;10584:18;;:::i;:::-;10613:94;10703:3;10663:38;10695:4;10689:11;10663:38;:::i;:::-;10657:4;10613:94;:::i;:::-;10733:1;10758:2;10753:3;10750:11;10775:1;10770:735;;;;11549:1;11566:3;11563:93;;;-1:-1:-1;11622:19:19;;;11609:33;11563:93;10344:66;10335:1;10331:11;;;10327:84;10323:89;10313:100;10419:1;10415:11;;;10310:117;11669:78;;10743:1014;;10770:735;9604:1;9597:14;;;9641:4;9628:18;;10815:66;10806:76;;;10966:9;10988:229;11002:7;10999:1;10996:14;10988:229;;;11091:19;;;11078:33;11063:49;;11198:4;11183:20;;;;11151:1;11139:14;;;;11018:12;10988:229;;;10992:3;11245;11236:7;11233:16;11230:219;;;11365:66;11359:3;11353;11350:1;11346:11;11342:21;11338:94;11334:99;11321:9;11316:3;11312:19;11299:33;11295:139;11287:6;11280:155;11230:219;;;11492:1;11486:3;11483:1;11479:11;11475:19;11469:4;11462:33;10743:1014;;10438:1325;;;:::o;12531:1078::-;12707:3;12736:1;12769:6;12763:13;12799:36;12825:9;12799:36;:::i;:::-;12854:1;12871:18;;;12898:191;;;;13103:1;13098:356;;;;12864:590;;12898:191;12946:66;12935:9;12931:82;12926:3;12919:95;13069:6;13062:14;13055:22;13047:6;13043:35;13038:3;13034:45;13027:52;;12898:191;;13098:356;13129:6;13126:1;13119:17;13159:4;13204:2;13201:1;13191:16;13229:1;13243:165;13257:6;13254:1;13251:13;13243:165;;;13335:14;;13322:11;;;13315:35;13378:16;;;;13272:10;;13243:165;;;13247:3;;;13437:6;13432:3;13428:16;13421:23;;12864:590;;;;;13485:6;13479:13;13501:68;13560:8;13555:3;13548:4;13540:6;13536:17;13501:68;:::i;:::-;13585:18;;12531:1078;-1:-1:-1;;;;12531:1078:19:o;15540:1471::-;15666:3;15660:10;15693:18;15685:6;15682:30;15679:56;;;15715:18;;:::i;:::-;15744:97;15834:6;15794:38;15826:4;15820:11;15794:38;:::i;:::-;15788:4;15744:97;:::i;:::-;15896:4;;15960:2;15949:14;;15977:1;15972:782;;;;16798:1;16815:6;16812:89;;;-1:-1:-1;16867:19:19;;;16861:26;16812:89;10344:66;10335:1;10331:11;;;10327:84;10323:89;10313:100;10419:1;10415:11;;;10310:117;16914:81;;15942:1063;;15972:782;9604:1;9597:14;;;9641:4;9628:18;;16020:66;16008:79;;;16185:236;16199:7;16196:1;16193:14;16185:236;;;16288:19;;;16282:26;16267:42;;16380:27;;;;16348:1;16336:14;;;;16215:19;;16185:236;;;16189:3;16449:6;16440:7;16437:19;16434:261;;;16510:19;;;16504:26;16611:66;16593:1;16589:14;;;16605:3;16585:24;16581:97;16577:102;16562:118;16547:134;;16434:261;-1:-1:-1;;;;;16741:1:19;16725:14;;;16721:22;16708:36;;-1:-1:-1;15540:1471:19:o;18507:512::-;18701:4;-1:-1:-1;;;;;18811:2:19;18803:6;18799:15;18788:9;18781:34;18863:2;18855:6;18851:15;18846:2;18835:9;18831:18;18824:43;;18903:6;18898:2;18887:9;18883:18;18876:34;18946:3;18941:2;18930:9;18926:18;18919:31;18967:46;19008:3;18997:9;18993:19;18985:6;18967:46;:::i;:::-;18959:54;18507:512;-1:-1:-1;;;;;;18507:512:19:o;19024:249::-;19093:6;19146:2;19134:9;19125:7;19121:23;19117:32;19114:52;;;19162:1;19159;19152:12;19114:52;19194:9;19188:16;19213:30;19237:5;19213:30;:::i;19700:282::-;19767:9;;;19788:11;;;19785:191;;;19832:77;19829:1;19822:88;19933:4;19930:1;19923:15;19961:4;19958:1;19951:15;19987:184;20039:77;20036:1;20029:88;20136:4;20133:1;20126:15;20160:4;20157:1;20150:15"},"gasEstimates":{"creation":{"codeDepositCost":"1899000","executionCost":"infinite","totalCost":"infinite"},"external":{"addMinter(address)":"27983","approve(address,uint256)":"infinite","balanceOf(address)":"2656","baseName()":"infinite","baseURI()":"infinite","getApproved(uint256)":"4815","getName(uint256)":"infinite","getTokenId(string)":"infinite","isApprovedForAll(address,address)":"infinite","minters(address)":"2630","name()":"infinite","names(uint256)":"infinite","owner()":"2442","ownerOf(uint256)":"2600","register(uint256,string,address)":"infinite","removeMinter(address)":"28000","renounceOwnership()":"infinite","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26769","setBaseURI(string)":"infinite","supportsInterface(bytes4)":"infinite","symbol()":"infinite","tokenByIndex(uint256)":"6804","tokenOfOwnerByIndex(address,uint256)":"5003","tokenURI(uint256)":"infinite","totalSupply()":"2371","transferFrom(address,address,uint256)":"infinite","transferOwnership(address)":"28406"},"internal":{"_beforeTokenTransfer(address,address,uint256,uint256)":"infinite","_register(uint256,string memory,address)":"infinite"}},"methodIdentifiers":{"addMinter(address)":"983b2d56","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","baseName()":"15030633","baseURI()":"6c0360eb","getApproved(uint256)":"081812fc","getName(uint256)":"6b8ff574","getTokenId(string)":"1e7663bc","isApprovedForAll(address,address)":"e985e9c5","minters(address)":"f46eccc4","name()":"06fdde03","names(uint256)":"4622ab03","owner()":"8da5cb5b","ownerOf(uint256)":"6352211e","register(uint256,string,address)":"601219b7","removeMinter(address)":"3092afd5","renounceOwnership()":"715018a6","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","setBaseURI(string)":"55f804b3","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenByIndex(uint256)":"4f6ccce7","tokenOfOwnerByIndex(address,uint256)":"2f745c59","tokenURI(uint256)":"c87b56dd","totalSupply()":"18160ddd","transferFrom(address,address,uint256)":"23b872dd","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_baseName\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NameRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"names\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"register(uint256,string,address)\":{\"details\":\"Register a name.\",\"params\":{\"id\":\"The token ID (keccak256 of the label).\",\"owner\":\"The address that should own the registration.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/gitid/gitid.sol\":\"GitID\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/gitid/gitid.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n\\ncontract GitID is Ownable, ERC721, ERC721Enumerable  {\\n\\n    // basename '.gitid'\\n    string public baseName;\\n    string public baseURI;\\n\\n    // A map of tokenId to name\\n    mapping(uint256=>string) public names;\\n\\n    // A map of addresses that are authorised to register and renew names.\\n    mapping(address=>bool) public minters;\\n\\n\\n    event MinterAdded(address indexed minter);\\n    event MinterRemoved(address indexed minter);\\n    event NameRegistered(uint256 indexed id, address indexed owner);\\n\\n\\n    constructor(string memory _name, string memory _symbol, string memory _baseName) ERC721(_name, _symbol) {\\n        baseName = _baseName;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC721Enumerable) returns (bool) {\\n        bool result = super.supportsInterface(interfaceId);\\n        if (result) {\\n            return true;\\n        }\\n        if (interfaceId == type(IERC721Enumerable).interfaceId) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    modifier onlyMinter {\\n        require(minters[msg.sender]);\\n        _;\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId, uint256 batchSize) internal override(ERC721, ERC721Enumerable) {\\n        require(balanceOf(to) == 0);\\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\\n    }\\n\\n    function addMinter(address minter) external onlyOwner {\\n        minters[minter] = true;\\n        emit MinterAdded(minter);\\n    }\\n\\n    // Revoke minter permission for an address.\\n    function removeMinter(address minter) external onlyOwner {\\n        minters[minter] = false;\\n        emit MinterRemoved(minter);\\n    }\\n\\n\\n    /**\\n     * @dev Register a name.\\n     * @param id The token ID (keccak256 of the label).\\n     * @param owner The address that should own the registration.\\n     */\\n    function register(uint256 id, string memory name, address owner) external onlyMinter {\\n        return _register(id, name, owner);\\n    }\\n\\n\\n    function _register(uint256 id, string memory name, address owner) internal {\\n        require(!_exists(id), 'Already registered');\\n\\n        _mint(owner, id);\\n        names[id] = name;\\n\\n        emit NameRegistered(id, owner);\\n    }\\n\\n    function getTokenId(string memory username) public pure returns (uint256) {\\n        bytes32 label = keccak256(bytes(username));\\n        uint256 tokenId = uint256(label);\\n        return tokenId;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        _requireMinted(tokenId);\\n        string memory name = getName(tokenId);\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, name)) : \\\"\\\";\\n    }\\n\\n    function setBaseURI(string calldata uri) public onlyOwner {\\n        baseURI = uri;\\n    }\\n\\n    function getName(uint256 tokenId) public view returns(string memory) {\\n        string memory name = names[tokenId];\\n        return name;\\n    }\\n}\\n\",\"keccak256\":\"0x63e00a8c0d65be5888f1ed5ac15f45a7ef7a6868cf989bff3951f2d3de59593f\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"contracts/gitid/gitid.sol:GitID","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":138,"contract":"contracts/gitid/gitid.sol:GitID","label":"_name","offset":0,"slot":"1","type":"t_string_storage"},{"astId":140,"contract":"contracts/gitid/gitid.sol:GitID","label":"_symbol","offset":0,"slot":"2","type":"t_string_storage"},{"astId":144,"contract":"contracts/gitid/gitid.sol:GitID","label":"_owners","offset":0,"slot":"3","type":"t_mapping(t_uint256,t_address)"},{"astId":148,"contract":"contracts/gitid/gitid.sol:GitID","label":"_balances","offset":0,"slot":"4","type":"t_mapping(t_address,t_uint256)"},{"astId":152,"contract":"contracts/gitid/gitid.sol:GitID","label":"_tokenApprovals","offset":0,"slot":"5","type":"t_mapping(t_uint256,t_address)"},{"astId":158,"contract":"contracts/gitid/gitid.sol:GitID","label":"_operatorApprovals","offset":0,"slot":"6","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":1188,"contract":"contracts/gitid/gitid.sol:GitID","label":"_ownedTokens","offset":0,"slot":"7","type":"t_mapping(t_address,t_mapping(t_uint256,t_uint256))"},{"astId":1192,"contract":"contracts/gitid/gitid.sol:GitID","label":"_ownedTokensIndex","offset":0,"slot":"8","type":"t_mapping(t_uint256,t_uint256)"},{"astId":1195,"contract":"contracts/gitid/gitid.sol:GitID","label":"_allTokens","offset":0,"slot":"9","type":"t_array(t_uint256)dyn_storage"},{"astId":1199,"contract":"contracts/gitid/gitid.sol:GitID","label":"_allTokensIndex","offset":0,"slot":"10","type":"t_mapping(t_uint256,t_uint256)"},{"astId":3812,"contract":"contracts/gitid/gitid.sol:GitID","label":"baseName","offset":0,"slot":"11","type":"t_string_storage"},{"astId":3814,"contract":"contracts/gitid/gitid.sol:GitID","label":"baseURI","offset":0,"slot":"12","type":"t_string_storage"},{"astId":3818,"contract":"contracts/gitid/gitid.sol:GitID","label":"names","offset":0,"slot":"13","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":3822,"contract":"contracts/gitid/gitid.sol:GitID","label":"minters","offset":0,"slot":"14","type":"t_mapping(t_address,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)dyn_storage":{"base":"t_uint256","encoding":"dynamic_array","label":"uint256[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_mapping(t_uint256,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}